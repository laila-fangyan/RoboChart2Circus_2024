
--
-- RoboChart generator version 3.0.0.202401231330
-- Automatically generated on 01-05-2025 09:52:17
--
-- Iterated compression status: true
-- Assertions compression status: false
--

	module MicroController
		shared_variable_events = {|
		|}
		
	exports
		transparent diamond
		transparent sbisim
		transparent dbisim
		transparent chase

		-- declaring controller events
		channel turn: InOut.Chemical_Angle
		channel obstacle: InOut.Location_Loc
		channel flag: InOut
		channel stop: InOut
		channel resume: InOut
		channel odometer: InOut.core_real
		
		
		
		-- declaring call and ret events for undefined operations
		channel moveCall: core_real.Chemical_Angle
		channel randomWalkCall
		channel shortRandomWalkCall
		
		-- declaring controller termination channel
		channel terminate
		
		-- channel set with all visible events
		sem__events = {|
			terminate
		,	turn,
			obstacle,
			flag,
			stop,
			resume,
			odometer
		,	moveCall,
			randomWalkCall,
			shortRandomWalkCall
		|}

		-- defined operations
		-- compileOperationDef
		module OP_changeDirection
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_From|
			              NID_j0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			
			-- Declaring call and ret events for undefined operations
			channel moveCall: core_real.Chemical_Angle
			channel randomWalkCall
			channel shortRandomWalkCall
			
			enterSS = {|
			i0::enter,
			From::enter,
			j0::enter
			|}
			
			enteredSS = 	{|
			From::entered,
			j0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	moveCall,
				randomWalkCall,
				shortRandomWalkCall
				, share__
				|}
			
			-- Nodes --
			-- declaring all nodes
			
			----------------------------------------------------------------------
			-- Initial: i0
			module i0
			exports
			
				channel enter, interrupt
				
				D__(id__,
							param_l,
						    const_Location_changeDirection_lv) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__,
							param_l,
						    const_Location_changeDirection_lv) = D__(id__,
							param_l,
						    const_Location_changeDirection_lv)
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- State: From
			module From
			
			enterSS = {}
			
			enteredSS = {}
			
			exports
			
				--  Declarations
				
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
								
				
				--	Nodes
				-- declaring all nodes
				
				
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
							param_l,
						    const_Location_changeDirection_lv) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
							param_l,
						    const_Location_changeDirection_lv) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- Final state: j0
			module j0
			
			exports
			
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
				--	Rule: behaviours(Node)
				D__(id__,
							param_l,
						    const_Location_changeDirection_lv) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
						
						Entering 	= entered -> SKIP ; Active
						Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
						Interrupted	= share__choice(exit -> exited -> Inactive)
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
							param_l,
						    const_Location_changeDirection_lv) = D__(id__,
							param_l,
						    const_Location_changeDirection_lv)
			
			endmodule
			----------------------------------------------------------------------
			
			-- END of Nodes --
			
			-- Operation calls --
			-- Only the undefined operations are declared here.
			-- If the state machine is in isolation, all required operations will be undefined.
			-- If it is in the context of a controller, the required operations not provided by the
			-- controller will be declared here, and the defined operations will be defined in the
			-- context of the Controller module, and therefore within scope of the state machine module.
			CALL__move(id__,
					    const_Location_changeDirection_lv,
						param_lv,
						param_a) 	= moveCall.param_lv.param_a -> SKIP
			CALL__randomWalk(id__,
					    const_Location_changeDirection_lv) 	= randomWalkCall -> SKIP
			CALL__shortRandomWalk(id__,
					    const_Location_changeDirection_lv) 	= shortRandomWalkCall -> SKIP
			
			-- END of Operation calls --
			
			-- STM processes
			STM(id__,
						param_l,
					    const_Location_changeDirection_lv) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
			Stateful(id__,
						param_l,
					    const_Location_changeDirection_lv) \ {terminate}
			
			STM_VS_O(id__,
						param_l,
					    const_Location_changeDirection_lv) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
			Stateful(id__,
						param_l,
					    const_Location_changeDirection_lv) \ {terminate}
			
			-- Transitions
			Transitions(id__,
						param_l,
					    const_Location_changeDirection_lv) = ((let
				Trans = (
					((share__ -> SKIP
					 [] dbisim(((param_l==Location_Loc_left))&(internal__!NID_From -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&CALL__move(
					 			id__,
					 		    const_Location_changeDirection_lv,
					 			const_Location_changeDirection_lv,
					 			Chemical_Angle_Right
					 		) ; j0::enter -> SKIP)))
					 	 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; From::enter -> SKIP))))
					 	 [] dbisim(((param_l==Location_Loc_right))&(internal__!NID_From -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&CALL__move(
					 			id__,
					 		    const_Location_changeDirection_lv,
					 			const_Location_changeDirection_lv,
					 			Chemical_Angle_Left
					 		) ; j0::enter -> SKIP)))
					 	 [] dbisim(((param_l==Location_Loc_front))&(internal__!NID_From -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&CALL__move(
					 			id__,
					 		    const_Location_changeDirection_lv,
					 			const_Location_changeDirection_lv,
					 			Chemical_Angle_Back
					 		) ; j0::enter -> SKIP)))
					 ) ; Trans)
					 []
					 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
					 []
					 terminate -> SKIP
				)
			within
				Trans
			)
			)
			
			-- Stateful
			-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
			
			-- Named process definitions
			MachineBody(id__,
						param_l,
					    const_Location_changeDirection_lv) = 
				dbisim((
				let
					finalNodesEntered = {|j0::entered|}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i0::enter,
						From::enter,
						j0::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_From,internal__.NID_i0,internal__.NID_From,internal__.NID_From|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i0::D__(id__,
							   			param_l,
							   		    const_Location_changeDirection_lv)
							   [| { share__, terminate } |] (
							   From::D__(id__,
							   			param_l,
							   		    const_Location_changeDirection_lv)
							   [| { share__, terminate } |] (
							   j0::D__(id__,
							   			param_l,
							   		    const_Location_changeDirection_lv)
							   )
							   )
							 )
							 [[From::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_From,internal__.NID_From,internal__.NID_From|}]]
							 [[j0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							|}) |]
							 ((i0::enter -> Transitions(id__,
							 			param_l,
							 		    const_Location_changeDirection_lv))
							  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 )
							)
							)
						)
						 \ hideSet)
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour(id__,
						param_l,
					    const_Location_changeDirection_lv) = 
				dbisim((MachineBody(id__,
							param_l,
						    const_Location_changeDirection_lv)\ enteredSS)
				)
			
			
			Stateful(id__,
						param_l,
					    const_Location_changeDirection_lv) = 
				((
					(Behaviour(id__,
								param_l,
							    const_Location_changeDirection_lv) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
								param_l,
							    const_Location_changeDirection_lv))
				 	\getsetLocalChannels
				)
				)
			
			
			-- Visible counterparts
			MachineBody_VS_O(id__,
						param_l,
					    const_Location_changeDirection_lv) = 
				dbisim((
				let
					finalNodesEntered = {|j0::entered|}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i0::enter,
						From::enter,
						j0::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_From,internal__.NID_i0,internal__.NID_From,internal__.NID_From|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i0::VS_O__(id__,
							   			param_l,
							   		    const_Location_changeDirection_lv)
							   [| { share__, terminate } |] (
							   From::VS_O__(id__,
							   			param_l,
							   		    const_Location_changeDirection_lv)
							   [| { share__, terminate } |] (
							   j0::VS_O__(id__,
							   			param_l,
							   		    const_Location_changeDirection_lv)
							   )
							   )
							 )
							 [[From::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_From,internal__.NID_From,internal__.NID_From|}]]
							 [[j0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							|}) |]
							 ((i0::enter -> Transitions(id__,
							 			param_l,
							 		    const_Location_changeDirection_lv))
							  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 )
							)
							)
						)
						 \ hideSet)
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour_VS_O(id__,
						param_l,
					    const_Location_changeDirection_lv) = 
				dbisim((MachineBody_VS_O(id__,
							param_l,
						    const_Location_changeDirection_lv))
				)
			
			
			Stateful_VS_O(id__,
						param_l,
					    const_Location_changeDirection_lv) = 
				dbisim((
					(Behaviour_VS_O(id__,
								param_l,
							    const_Location_changeDirection_lv) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
								param_l,
							    const_Location_changeDirection_lv))
				 	\getsetLocalChannels
				)
				)
			
			
			-- END
			
			-- Memory
			-- Memory variables
			
			-- varMemory process
			varMemory(id__,
						param_l,
					    const_Location_changeDirection_lv) = terminate -> SKIP
			
			getsetLocalChannels = {||}
			
			-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
			FVS__(id__,
						param_l,
					    const_Location_changeDirection_lv) = STM_VS_O(id__,
						param_l,
					    const_Location_changeDirection_lv)
			
			D__(id__,
						param_l,
					    const_Location_changeDirection_lv) = STM(id__,
						param_l,
					    const_Location_changeDirection_lv) \ internal_events
			O__(id__,
						param_l,
					    const_Location_changeDirection_lv) = sbisim(diamond(D__(id__,
						param_l,
					    const_Location_changeDirection_lv)))
			VS__(id__,
						param_l,
					    const_Location_changeDirection_lv) = FVS__(id__,
						param_l,
					    const_Location_changeDirection_lv)
			VS_O__(id__,
						param_l,
					    const_Location_changeDirection_lv) = sbisim(diamond(FVS__(id__,
						param_l,
					    const_Location_changeDirection_lv)))
			HEXT__(id__,
						param_l,
					    const_Location_changeDirection_lv) = O__(id__,
						param_l,
					    const_Location_changeDirection_lv) [|shared_variable_events|] SKIP
			HUP__(id__,
						param_l,
					    const_Location_changeDirection_lv) = O__(id__,
						param_l,
					    const_Location_changeDirection_lv) [|{share__}|] SKIP
					endmodule
	
		-- declaring machines
		module stm_ref0
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
		
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i1|
			              NID_Waiting|
			              NID_Going|
			              NID_Found|
			              NID_j1|
			              NID_Avoiding|
			              NID_TryingAgain|
			              NID_AvoidingAgain|
			              NID_GettingOut
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_a, set_a, setL_a, setR_a: Chemical_Angle
			channel get_d0, set_d0, setL_d0, setR_d0: core_real
			channel get_d1, set_d1, setL_d1, setR_d1: core_real
			channel get_l, set_l, setL_l, setR_l: Location_Loc
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel obstacle__: NIDS.InOut.Location_Loc
			channel obstacle: InOut.Location_Loc
			channel odometer__: NIDS.InOut.core_real
			channel odometer: InOut.core_real
			channel resume__: NIDS.InOut
			channel resume: InOut
			channel turn__: NIDS.InOut.Chemical_Angle
			channel turn: InOut.Chemical_Angle
			channel stop__: NIDS.InOut
			channel stop: InOut
			channel flag__: NIDS.InOut
			channel flag: InOut
			
			-- Declaring call and ret events for undefined operations
			channel moveCall: core_real.Chemical_Angle
			channel randomWalkCall
			channel shortRandomWalkCall
			
			enterSS = {|
			i1::enter,
			Waiting::enter,
			Going::enter,
			Found::enter,
			j1::enter,
			Avoiding::enter,
			TryingAgain::enter,
			AvoidingAgain::enter,
			GettingOut::enter
			|}
			
			enteredSS = 	{|
			Waiting::entered,
			Going::entered,
			Found::entered,
			j1::entered,
			Avoiding::entered,
			TryingAgain::entered,
			AvoidingAgain::entered,
			GettingOut::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	obstacle,
				odometer,
				resume,
				turn,
				stop,
				flag
			,	moveCall,
				randomWalkCall,
				shortRandomWalkCall
				|}
		
			-- Nodes --
			-- declaring all nodes
			
			----------------------------------------------------------------------
			-- Initial: i1
			module i1
			exports
			
				channel enter, interrupt
				
				D__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod,
						    const_Location_changeDirection_lv) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod,
						    const_Location_changeDirection_lv) = D__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod,
						    const_Location_changeDirection_lv)
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- State: Waiting
			module Waiting
			
			enterSS = {}
			
			enteredSS = {}
			
			exports
			
				--  Declarations
				
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
								
				
				--	Nodes
				-- declaring all nodes
				
				
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod,
						    const_Location_changeDirection_lv) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((true&CALL__randomWalk(
								id__,
							    const_Movement_lv,
							    const_Movement_evadeTime,
							    const_Movement_stuckPeriod,
							    const_Movement_stuckDist,
							    const_Movement_outPeriod,
								const_Location_changeDirection_lv
							) ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod,
						    const_Location_changeDirection_lv) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((true&CALL__randomWalk(
								id__,
							    const_Movement_lv,
							    const_Movement_evadeTime,
							    const_Movement_stuckPeriod,
							    const_Movement_stuckDist,
							    const_Movement_outPeriod,
								const_Location_changeDirection_lv
							) ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- State: Going
			module Going
			
			enterSS = {}
			
			enteredSS = {}
			
			exports
			
				--  Declarations
				
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
								
				
				--	Nodes
				-- declaring all nodes
				
				
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod,
						    const_Location_changeDirection_lv) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(get_a?a -> true&CALL__move(
								id__,
							    const_Movement_lv,
							    const_Movement_evadeTime,
							    const_Movement_stuckPeriod,
							    const_Movement_stuckDist,
							    const_Movement_outPeriod,
								const_Movement_lv,
								a,
								const_Location_changeDirection_lv
							)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod,
						    const_Location_changeDirection_lv) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(get_a?a -> true&CALL__move(
								id__,
							    const_Movement_lv,
							    const_Movement_evadeTime,
							    const_Movement_stuckPeriod,
							    const_Movement_stuckDist,
							    const_Movement_outPeriod,
								const_Movement_lv,
								a,
								const_Location_changeDirection_lv
							)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- State: Found
			module Found
			
			enterSS = {}
			
			enteredSS = {}
			
			exports
			
				--  Declarations
				
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
								
				
				--	Nodes
				-- declaring all nodes
				
				
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod,
						    const_Location_changeDirection_lv) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&CALL__move(
								id__,
							    const_Movement_lv,
							    const_Movement_evadeTime,
							    const_Movement_stuckPeriod,
							    const_Movement_stuckDist,
							    const_Movement_outPeriod,
								0,
								Chemical_Angle_Front,
								const_Location_changeDirection_lv
							);true&(share__choice(flag.out -> SKIP)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod,
						    const_Location_changeDirection_lv) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&CALL__move(
								id__,
							    const_Movement_lv,
							    const_Movement_evadeTime,
							    const_Movement_stuckPeriod,
							    const_Movement_stuckDist,
							    const_Movement_outPeriod,
								0,
								Chemical_Angle_Front,
								const_Location_changeDirection_lv
							);true&(share__choice(flag.out -> SKIP)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- Final state: j1
			module j1
			
			exports
			
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
				--	Rule: behaviours(Node)
				D__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod,
						    const_Location_changeDirection_lv) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
						
						Entering 	= entered -> SKIP ; Active
						Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
						Interrupted	= share__choice(exit -> exited -> Inactive)
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod,
						    const_Location_changeDirection_lv) = D__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod,
						    const_Location_changeDirection_lv)
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- State: Avoiding
			module Avoiding
			
			enterSS = {}
			
			enteredSS = {}
			
			exports
			
				--  Declarations
				
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
								
				
				--	Nodes
				-- declaring all nodes
				
				
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod,
						    const_Location_changeDirection_lv) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(odometer.in?d0 -> (SStop /\ set_d0!d0 -> SKIP)));share__choice(get_l?l -> true&CALL__changeDirection(
								id__,
							    const_Movement_lv,
							    const_Movement_evadeTime,
							    const_Movement_stuckPeriod,
							    const_Movement_stuckDist,
							    const_Movement_outPeriod,
								l, 
								const_Location_changeDirection_lv
							));SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod,
						    const_Location_changeDirection_lv) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(odometer.in?d0 -> (SStop /\ set_d0!d0 -> SKIP)));share__choice(get_l?l -> true&CALL__changeDirection(
								id__,
							    const_Movement_lv,
							    const_Movement_evadeTime,
							    const_Movement_stuckPeriod,
							    const_Movement_stuckDist,
							    const_Movement_outPeriod,
								l, 
								const_Location_changeDirection_lv
							));SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- State: TryingAgain
			module TryingAgain
			
			enterSS = {}
			
			enteredSS = {}
			
			exports
			
				--  Declarations
				
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
								
				
				--	Nodes
				-- declaring all nodes
				
				
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod,
						    const_Location_changeDirection_lv) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(get_a?a -> true&CALL__move(
								id__,
							    const_Movement_lv,
							    const_Movement_evadeTime,
							    const_Movement_stuckPeriod,
							    const_Movement_stuckDist,
							    const_Movement_outPeriod,
								const_Movement_lv,
								a,
								const_Location_changeDirection_lv
							)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod,
						    const_Location_changeDirection_lv) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(get_a?a -> true&CALL__move(
								id__,
							    const_Movement_lv,
							    const_Movement_evadeTime,
							    const_Movement_stuckPeriod,
							    const_Movement_stuckDist,
							    const_Movement_outPeriod,
								const_Movement_lv,
								a,
								const_Location_changeDirection_lv
							)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- State: AvoidingAgain
			module AvoidingAgain
			
			enterSS = {}
			
			enteredSS = {}
			
			exports
			
				--  Declarations
				
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
								
				
				--	Nodes
				-- declaring all nodes
				
				
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod,
						    const_Location_changeDirection_lv) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod,
						    const_Location_changeDirection_lv) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- State: GettingOut
			module GettingOut
			
			enterSS = {}
			
			enteredSS = {}
			
			exports
			
				--  Declarations
				
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
								
				
				--	Nodes
				-- declaring all nodes
				
				
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod,
						    const_Location_changeDirection_lv) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&CALL__shortRandomWalk(
								id__,
							    const_Movement_lv,
							    const_Movement_evadeTime,
							    const_Movement_stuckPeriod,
							    const_Movement_stuckDist,
							    const_Movement_outPeriod,
								const_Location_changeDirection_lv
							);SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod,
						    const_Location_changeDirection_lv) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&CALL__shortRandomWalk(
								id__,
							    const_Movement_lv,
							    const_Movement_evadeTime,
							    const_Movement_stuckPeriod,
							    const_Movement_stuckDist,
							    const_Movement_outPeriod,
								const_Location_changeDirection_lv
							);SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
			
			endmodule
			----------------------------------------------------------------------
			
			-- END of Nodes --
			
			-- Operation calls --
			-- Only the undefined operations are declared here.
			-- If the state machine is in isolation, all required operations will be undefined.
			-- If it is in the context of a controller, the required operations not provided by the
			-- controller will be declared here, and the defined operations will be defined in the
			-- context of the Controller module, and therefore within scope of the state machine module.
			CALL__move(id__,
					    const_Movement_lv,
					    const_Movement_evadeTime,
					    const_Movement_stuckPeriod,
					    const_Movement_stuckDist,
					    const_Movement_outPeriod,
						param_lv,
						param_a,
					    const_Location_changeDirection_lv) 	= moveCall.param_lv.param_a -> SKIP
			CALL__randomWalk(id__,
					    const_Movement_lv,
					    const_Movement_evadeTime,
					    const_Movement_stuckPeriod,
					    const_Movement_stuckDist,
					    const_Movement_outPeriod,
					    const_Location_changeDirection_lv) 	= randomWalkCall -> SKIP
			CALL__shortRandomWalk(id__,
					    const_Movement_lv,
					    const_Movement_evadeTime,
					    const_Movement_stuckPeriod,
					    const_Movement_stuckDist,
					    const_Movement_outPeriod,
					    const_Location_changeDirection_lv) 	= shortRandomWalkCall -> SKIP
			
			CALL__changeDirection(id__,
					    const_Movement_lv,
					    const_Movement_evadeTime,
					    const_Movement_stuckPeriod,
					    const_Movement_stuckDist,
					    const_Movement_outPeriod,
						param_l,
					    const_Location_changeDirection_lv) = (OP_changeDirection::O__(id__,
						param_l,
					    const_Location_changeDirection_lv))
			[[
				OP_changeDirection::moveCall <- moveCall,
				OP_changeDirection::randomWalkCall <- randomWalkCall,
				OP_changeDirection::shortRandomWalkCall <- shortRandomWalkCall
			]]
			-- END of Operation calls --
			
			-- STM processes
			STM(id__,
					    const_Movement_lv,
					    const_Movement_evadeTime,
					    const_Movement_stuckPeriod,
					    const_Movement_stuckDist,
					    const_Movement_outPeriod,
					    const_Location_changeDirection_lv) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
			( 
				(
					(
						(IteratedStateful(id__,
								    const_Movement_lv,
								    const_Movement_evadeTime,
								    const_Movement_stuckPeriod,
								    const_Movement_stuckDist,
								    const_Movement_outPeriod,
								    const_Location_changeDirection_lv) \ {terminate} ; share__choice(terminate -> SKIP))
					 	[[ share__ <- x__ | x__ <- {||} ]]
					)
				[| {share__} |]
				SKIP
				)
				[| union(sharedVarSync,{terminate}) |]
				dbisim(sharedVarMemory(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod,
						    const_Location_changeDirection_lv))
			)\sharedVarHide
			
			STM_VS_O(id__,
					    const_Movement_lv,
					    const_Movement_evadeTime,
					    const_Movement_stuckPeriod,
					    const_Movement_stuckDist,
					    const_Movement_outPeriod,
					    const_Location_changeDirection_lv) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
			( 
				(
					(
						(IteratedStateful_VS_O(id__,
								    const_Movement_lv,
								    const_Movement_evadeTime,
								    const_Movement_stuckPeriod,
								    const_Movement_stuckDist,
								    const_Movement_outPeriod,
								    const_Location_changeDirection_lv) \ {terminate} ; share__choice(terminate -> SKIP))
					 	[[ share__ <- x__ | x__ <- {||} ]]
					)
				[| {share__} |]
				SKIP
				)
				[| union(sharedVarSync,{terminate}) |]
				dbisim(sharedVarMemory(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod,
						    const_Location_changeDirection_lv))
			)\sharedVarHide
			
			-- Transitions
			Transitions(id__,
					    const_Movement_lv,
					    const_Movement_evadeTime,
					    const_Movement_stuckPeriod,
					    const_Movement_stuckDist,
					    const_Movement_outPeriod,
					    const_Location_changeDirection_lv) = ((let
				Trans = share__choice(get_d1?d1 -> get_d0?d0 -> (
					((share__ -> SKIP
					 [] dbisim((true)&(internal__!NID_i1 -> SKIP ;  ((SKIP ; Waiting::enter -> SKIP))))
					 	 [] dbisim((true)&(turn__!NID_Waiting.in?a:{a|a <- Chemical_Angle, true} -> share__choice(set_a!a -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Going::enter -> SKIP)))
					 	 [] dbisim((true)&(turn__!NID_Going.in?a:{a|a <- Chemical_Angle, true} -> share__choice(set_a!a -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Going::enter -> SKIP)))
					 	 [] dbisim((true)&(stop__!NID_Going.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Found::enter -> SKIP)))
					 	 [] dbisim((true)&(internal__!NID_Found -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; j1::enter -> SKIP)))
					 	 [] dbisim((true)&(obstacle__!NID_Going.in?l:{l|l <- Location_Loc, true} -> share__choice(set_l!l -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Avoiding::enter -> SKIP)))
					 	 [] dbisim((true)&(turn__!NID_Avoiding.in?a:{a|a <- Chemical_Angle, true} -> share__choice(set_a!a -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; TryingAgain::enter -> SKIP)))
					 	 [] dbisim((true)&(turn__!NID_TryingAgain.in?a:{a|a <- Chemical_Angle, true} -> share__choice(set_a!a -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; TryingAgain::enter -> SKIP)))
					 	 [] dbisim((true)&(stop__!NID_TryingAgain.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Found::enter -> SKIP)))
					 	 [] dbisim((true)&(resume__!NID_TryingAgain.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Waiting::enter -> SKIP)))
					 	 [] dbisim((true)&(obstacle__!NID_TryingAgain.in?l:{l|l <- Location_Loc, true} -> share__choice(set_l!l -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(odometer.in?d1 -> (SStop /\ set_d1!d1 -> SKIP))) ; AvoidingAgain::enter -> SKIP)))
					 	 [] dbisim((true)&(internal__!NID_AvoidingAgain -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Avoiding::enter -> SKIP)))
					 	 [] dbisim((true)&(internal__!NID_AvoidingAgain -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; GettingOut::enter -> SKIP)))
					 	 [] dbisim((true)&(turn__!NID_GettingOut.in?a:{a|a <- Chemical_Angle, true} -> share__choice(set_a!a -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Going::enter -> SKIP)))
					 	 [] dbisim((true)&(resume__!NID_Waiting.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Waiting::enter -> SKIP)))
					 	 [] dbisim((true)&(stop__!NID_Waiting.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Found::enter -> SKIP)))
					 	 [] dbisim((true)&(stop__!NID_GettingOut.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Found::enter -> SKIP)))
					 	 [] dbisim((true)&(stop__!NID_AvoidingAgain.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Found::enter -> SKIP)))
					 	 [] dbisim((true)&(stop__!NID_Avoiding.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Found::enter -> SKIP)))
					 	 [] dbisim((true)&(resume__!NID_Avoiding.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Waiting::enter -> SKIP)))
					 	 [] dbisim((true)&(resume__!NID_GettingOut.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Waiting::enter -> SKIP)))
					 	 [] dbisim((true)&(resume__!NID_AvoidingAgain.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Waiting::enter -> SKIP)))
					 	 [] dbisim((true)&(resume__!NID_Going.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Waiting::enter -> SKIP)))
					 ) ; Trans)
					 []
					 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
					 []
					 terminate -> SKIP
				)
				)
			within
				Trans
			)
			)
			
			-- Stateful
			-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
			
			-- Named process definitions
			MachineBody(id__,
					    const_Movement_lv,
					    const_Movement_evadeTime,
					    const_Movement_stuckPeriod,
					    const_Movement_stuckDist,
					    const_Movement_outPeriod,
					    const_Location_changeDirection_lv) = 
				dbisim((
				let
					finalNodesEntered = {|j1::entered|}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i1::enter,
						Waiting::enter,
						Going::enter,
						Found::enter,
						j1::enter,
						Avoiding::enter,
						TryingAgain::enter,
						AvoidingAgain::enter,
						GettingOut::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_i1,turn__.NID_Waiting.in,turn__.NID_Going.in,stop__.NID_Going.in,internal__.NID_Found,obstacle__.NID_Going.in,turn__.NID_Avoiding.in,turn__.NID_TryingAgain.in,stop__.NID_TryingAgain.in,resume__.NID_TryingAgain.in,obstacle__.NID_TryingAgain.in,internal__.NID_AvoidingAgain,internal__.NID_AvoidingAgain,turn__.NID_GettingOut.in,resume__.NID_Waiting.in,stop__.NID_Waiting.in,stop__.NID_GettingOut.in,stop__.NID_AvoidingAgain.in,stop__.NID_Avoiding.in,resume__.NID_Avoiding.in,resume__.NID_GettingOut.in,resume__.NID_AvoidingAgain.in,resume__.NID_Going.in|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i1::D__(id__,
							   		    const_Movement_lv,
							   		    const_Movement_evadeTime,
							   		    const_Movement_stuckPeriod,
							   		    const_Movement_stuckDist,
							   		    const_Movement_outPeriod,
							   		    const_Location_changeDirection_lv)
							   [| { share__, terminate } |] (
							   Waiting::D__(id__,
							   		    const_Movement_lv,
							   		    const_Movement_evadeTime,
							   		    const_Movement_stuckPeriod,
							   		    const_Movement_stuckDist,
							   		    const_Movement_outPeriod,
							   		    const_Location_changeDirection_lv)
							   [| { share__, terminate } |] (
							   Going::D__(id__,
							   		    const_Movement_lv,
							   		    const_Movement_evadeTime,
							   		    const_Movement_stuckPeriod,
							   		    const_Movement_stuckDist,
							   		    const_Movement_outPeriod,
							   		    const_Location_changeDirection_lv)
							   [| { share__, terminate } |] (
							   Found::D__(id__,
							   		    const_Movement_lv,
							   		    const_Movement_evadeTime,
							   		    const_Movement_stuckPeriod,
							   		    const_Movement_stuckDist,
							   		    const_Movement_outPeriod,
							   		    const_Location_changeDirection_lv)
							   [| { share__, terminate } |] (
							   j1::D__(id__,
							   		    const_Movement_lv,
							   		    const_Movement_evadeTime,
							   		    const_Movement_stuckPeriod,
							   		    const_Movement_stuckDist,
							   		    const_Movement_outPeriod,
							   		    const_Location_changeDirection_lv)
							   [| { share__, terminate } |] (
							   Avoiding::D__(id__,
							   		    const_Movement_lv,
							   		    const_Movement_evadeTime,
							   		    const_Movement_stuckPeriod,
							   		    const_Movement_stuckDist,
							   		    const_Movement_outPeriod,
							   		    const_Location_changeDirection_lv)
							   [| { share__, terminate } |] (
							   TryingAgain::D__(id__,
							   		    const_Movement_lv,
							   		    const_Movement_evadeTime,
							   		    const_Movement_stuckPeriod,
							   		    const_Movement_stuckDist,
							   		    const_Movement_outPeriod,
							   		    const_Location_changeDirection_lv)
							   [| { share__, terminate } |] (
							   AvoidingAgain::D__(id__,
							   		    const_Movement_lv,
							   		    const_Movement_evadeTime,
							   		    const_Movement_stuckPeriod,
							   		    const_Movement_stuckDist,
							   		    const_Movement_outPeriod,
							   		    const_Location_changeDirection_lv)
							   [| { share__, terminate } |] (
							   GettingOut::D__(id__,
							   		    const_Movement_lv,
							   		    const_Movement_evadeTime,
							   		    const_Movement_stuckPeriod,
							   		    const_Movement_stuckDist,
							   		    const_Movement_outPeriod,
							   		    const_Location_changeDirection_lv)
							   )
							   )
							   )
							   )
							   )
							   )
							   )
							   )
							 )
							 [[Waiting::interrupt <- x__ | x__ <- {|interrupt,turn__.NID_Waiting.in,resume__.NID_Waiting.in,stop__.NID_Waiting.in|}]]
							 [[Going::interrupt <- x__ | x__ <- {|interrupt,turn__.NID_Going.in,stop__.NID_Going.in,obstacle__.NID_Going.in,resume__.NID_Going.in|}]]
							 [[Found::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Found|}]]
							 [[j1::interrupt <- x__ | x__ <- {|interrupt|}]]
							 [[Avoiding::interrupt <- x__ | x__ <- {|interrupt,turn__.NID_Avoiding.in,stop__.NID_Avoiding.in,resume__.NID_Avoiding.in|}]]
							 [[TryingAgain::interrupt <- x__ | x__ <- {|interrupt,turn__.NID_TryingAgain.in,stop__.NID_TryingAgain.in,resume__.NID_TryingAgain.in,obstacle__.NID_TryingAgain.in|}]]
							 [[AvoidingAgain::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_AvoidingAgain,internal__.NID_AvoidingAgain,stop__.NID_AvoidingAgain.in,resume__.NID_AvoidingAgain.in|}]]
							 [[GettingOut::interrupt <- x__ | x__ <- {|interrupt,turn__.NID_GettingOut.in,stop__.NID_GettingOut.in,resume__.NID_GettingOut.in|}]]
							 [[i1::interrupt <- x__ | x__ <- {|internal__.NID_i1|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__,setR_l,setR_a |} ]] 
							  [[set_d1 <- setL_d1,set_d0 <- setL_d0]]
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 			,setL_d1
							 			,setL_d0
							 			,setR_l
							 			 			,setR_a
							 			|}) |]
							 ((i1::enter -> Transitions(id__,
							 		    const_Movement_lv,
							 		    const_Movement_evadeTime,
							 		    const_Movement_stuckPeriod,
							 		    const_Movement_stuckDist,
							 		    const_Movement_outPeriod,
							 		    const_Location_changeDirection_lv))
							  [[ share__ <- x__ | x__ <- {| share__,setL_d1,setL_d0 |} ]]
							  [[set_l <- setR_l,set_a <- setR_a]]
							 )
							)[[setL_d1 <- set_d1,setL_d0 <- set_d0]]
							 [[setR_l <- set_l,setR_a <- set_a]]
							)
						)
						 \ hideSet)
						[[
							obstacle__.x____ <- obstacle,
							odometer__.x____ <- odometer,
							resume__.x____ <- resume,
							turn__.x____ <- turn,
							stop__.x____ <- stop,
							flag__.x____ <- flag
							| x____ <- NIDS
						]]
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour(id__,
					    const_Movement_lv,
					    const_Movement_evadeTime,
					    const_Movement_stuckPeriod,
					    const_Movement_stuckDist,
					    const_Movement_outPeriod,
					    const_Location_changeDirection_lv) = 
				dbisim((MachineBody(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod,
						    const_Location_changeDirection_lv)\ enteredSS)
				)
			
			IteratedBehaviour(id__,
					    const_Movement_lv,
					    const_Movement_evadeTime,
					    const_Movement_stuckPeriod,
					    const_Movement_stuckDist,
					    const_Movement_outPeriod,
					    const_Location_changeDirection_lv) = 
				dbisim((MachineBody(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod,
						    const_Location_changeDirection_lv)\ enteredSS)
				)
			
			Stateful(id__,
					    const_Movement_lv,
					    const_Movement_evadeTime,
					    const_Movement_stuckPeriod,
					    const_Movement_stuckDist,
					    const_Movement_outPeriod,
					    const_Location_changeDirection_lv) = 
				((
					(Behaviour(id__,
							    const_Movement_lv,
							    const_Movement_evadeTime,
							    const_Movement_stuckPeriod,
							    const_Movement_stuckDist,
							    const_Movement_outPeriod,
							    const_Location_changeDirection_lv) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
							    const_Movement_lv,
							    const_Movement_evadeTime,
							    const_Movement_stuckPeriod,
							    const_Movement_stuckDist,
							    const_Movement_outPeriod,
							    const_Location_changeDirection_lv))
				 	\getsetLocalChannels
				)
				)
			
			IteratedStateful(id__,
					    const_Movement_lv,
					    const_Movement_evadeTime,
					    const_Movement_stuckPeriod,
					    const_Movement_stuckDist,
					    const_Movement_outPeriod,
					    const_Location_changeDirection_lv) =
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										dbisim(
											sbisim(
												Behaviour(id__,
														    const_Movement_lv,
														    const_Movement_evadeTime,
														    const_Movement_stuckPeriod,
														    const_Movement_stuckDist,
														    const_Movement_outPeriod,
														    const_Location_changeDirection_lv)
												[| {|get_l,set_l,terminate|} |]
												Memory_l(Location_Loc_left)
											)\{|get_l,set_l|}
										)
										[| {|get_d1,set_d1,terminate|} |]
										Memory_d1(0)
									)\{|get_d1,set_d1|}
								)
								[| {|get_d0,set_d0,terminate|} |]
								Memory_d0(0)
							)\{|get_d0,set_d0|}
						)
						[| {|get_a,set_a,terminate|} |]
						Memory_a(Chemical_Angle_Left)
					)\{|get_a,set_a|}
				)
				)
			
			-- Visible counterparts
			MachineBody_VS_O(id__,
					    const_Movement_lv,
					    const_Movement_evadeTime,
					    const_Movement_stuckPeriod,
					    const_Movement_stuckDist,
					    const_Movement_outPeriod,
					    const_Location_changeDirection_lv) = 
				dbisim((
				let
					finalNodesEntered = {|j1::entered|}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i1::enter,
						Waiting::enter,
						Going::enter,
						Found::enter,
						j1::enter,
						Avoiding::enter,
						TryingAgain::enter,
						AvoidingAgain::enter,
						GettingOut::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_i1,turn__.NID_Waiting.in,turn__.NID_Going.in,stop__.NID_Going.in,internal__.NID_Found,obstacle__.NID_Going.in,turn__.NID_Avoiding.in,turn__.NID_TryingAgain.in,stop__.NID_TryingAgain.in,resume__.NID_TryingAgain.in,obstacle__.NID_TryingAgain.in,internal__.NID_AvoidingAgain,internal__.NID_AvoidingAgain,turn__.NID_GettingOut.in,resume__.NID_Waiting.in,stop__.NID_Waiting.in,stop__.NID_GettingOut.in,stop__.NID_AvoidingAgain.in,stop__.NID_Avoiding.in,resume__.NID_Avoiding.in,resume__.NID_GettingOut.in,resume__.NID_AvoidingAgain.in,resume__.NID_Going.in|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i1::VS_O__(id__,
							   		    const_Movement_lv,
							   		    const_Movement_evadeTime,
							   		    const_Movement_stuckPeriod,
							   		    const_Movement_stuckDist,
							   		    const_Movement_outPeriod,
							   		    const_Location_changeDirection_lv)
							   [| { share__, terminate } |] (
							   Waiting::VS_O__(id__,
							   		    const_Movement_lv,
							   		    const_Movement_evadeTime,
							   		    const_Movement_stuckPeriod,
							   		    const_Movement_stuckDist,
							   		    const_Movement_outPeriod,
							   		    const_Location_changeDirection_lv)
							   [| { share__, terminate } |] (
							   Going::VS_O__(id__,
							   		    const_Movement_lv,
							   		    const_Movement_evadeTime,
							   		    const_Movement_stuckPeriod,
							   		    const_Movement_stuckDist,
							   		    const_Movement_outPeriod,
							   		    const_Location_changeDirection_lv)
							   [| { share__, terminate } |] (
							   Found::VS_O__(id__,
							   		    const_Movement_lv,
							   		    const_Movement_evadeTime,
							   		    const_Movement_stuckPeriod,
							   		    const_Movement_stuckDist,
							   		    const_Movement_outPeriod,
							   		    const_Location_changeDirection_lv)
							   [| { share__, terminate } |] (
							   j1::VS_O__(id__,
							   		    const_Movement_lv,
							   		    const_Movement_evadeTime,
							   		    const_Movement_stuckPeriod,
							   		    const_Movement_stuckDist,
							   		    const_Movement_outPeriod,
							   		    const_Location_changeDirection_lv)
							   [| { share__, terminate } |] (
							   Avoiding::VS_O__(id__,
							   		    const_Movement_lv,
							   		    const_Movement_evadeTime,
							   		    const_Movement_stuckPeriod,
							   		    const_Movement_stuckDist,
							   		    const_Movement_outPeriod,
							   		    const_Location_changeDirection_lv)
							   [| { share__, terminate } |] (
							   TryingAgain::VS_O__(id__,
							   		    const_Movement_lv,
							   		    const_Movement_evadeTime,
							   		    const_Movement_stuckPeriod,
							   		    const_Movement_stuckDist,
							   		    const_Movement_outPeriod,
							   		    const_Location_changeDirection_lv)
							   [| { share__, terminate } |] (
							   AvoidingAgain::VS_O__(id__,
							   		    const_Movement_lv,
							   		    const_Movement_evadeTime,
							   		    const_Movement_stuckPeriod,
							   		    const_Movement_stuckDist,
							   		    const_Movement_outPeriod,
							   		    const_Location_changeDirection_lv)
							   [| { share__, terminate } |] (
							   GettingOut::VS_O__(id__,
							   		    const_Movement_lv,
							   		    const_Movement_evadeTime,
							   		    const_Movement_stuckPeriod,
							   		    const_Movement_stuckDist,
							   		    const_Movement_outPeriod,
							   		    const_Location_changeDirection_lv)
							   )
							   )
							   )
							   )
							   )
							   )
							   )
							   )
							 )
							 [[Waiting::interrupt <- x__ | x__ <- {|interrupt,turn__.NID_Waiting.in,resume__.NID_Waiting.in,stop__.NID_Waiting.in|}]]
							 [[Going::interrupt <- x__ | x__ <- {|interrupt,turn__.NID_Going.in,stop__.NID_Going.in,obstacle__.NID_Going.in,resume__.NID_Going.in|}]]
							 [[Found::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Found|}]]
							 [[j1::interrupt <- x__ | x__ <- {|interrupt|}]]
							 [[Avoiding::interrupt <- x__ | x__ <- {|interrupt,turn__.NID_Avoiding.in,stop__.NID_Avoiding.in,resume__.NID_Avoiding.in|}]]
							 [[TryingAgain::interrupt <- x__ | x__ <- {|interrupt,turn__.NID_TryingAgain.in,stop__.NID_TryingAgain.in,resume__.NID_TryingAgain.in,obstacle__.NID_TryingAgain.in|}]]
							 [[AvoidingAgain::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_AvoidingAgain,internal__.NID_AvoidingAgain,stop__.NID_AvoidingAgain.in,resume__.NID_AvoidingAgain.in|}]]
							 [[GettingOut::interrupt <- x__ | x__ <- {|interrupt,turn__.NID_GettingOut.in,stop__.NID_GettingOut.in,resume__.NID_GettingOut.in|}]]
							 [[i1::interrupt <- x__ | x__ <- {|internal__.NID_i1|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__,setR_l,setR_a |} ]] 
							  [[set_d1 <- setL_d1,set_d0 <- setL_d0]]
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 			,setL_d1
							 			,setL_d0
							 			,setR_l
							 			 			,setR_a
							 			|}) |]
							 ((i1::enter -> Transitions(id__,
							 		    const_Movement_lv,
							 		    const_Movement_evadeTime,
							 		    const_Movement_stuckPeriod,
							 		    const_Movement_stuckDist,
							 		    const_Movement_outPeriod,
							 		    const_Location_changeDirection_lv))
							  [[ share__ <- x__ | x__ <- {| share__,setL_d1,setL_d0 |} ]]
							  [[set_l <- setR_l,set_a <- setR_a]]
							 )
							)[[setL_d1 <- set_d1,setL_d0 <- set_d0]]
							 [[setR_l <- set_l,setR_a <- set_a]]
							)
						)
						 \ hideSet)
						[[
							obstacle__.x____ <- obstacle,
							odometer__.x____ <- odometer,
							resume__.x____ <- resume,
							turn__.x____ <- turn,
							stop__.x____ <- stop,
							flag__.x____ <- flag
							| x____ <- NIDS
						]]
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour_VS_O(id__,
					    const_Movement_lv,
					    const_Movement_evadeTime,
					    const_Movement_stuckPeriod,
					    const_Movement_stuckDist,
					    const_Movement_outPeriod,
					    const_Location_changeDirection_lv) = 
				dbisim((MachineBody_VS_O(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod,
						    const_Location_changeDirection_lv))
				)
			
			IteratedBehaviour_VS_O(id__,
					    const_Movement_lv,
					    const_Movement_evadeTime,
					    const_Movement_stuckPeriod,
					    const_Movement_stuckDist,
					    const_Movement_outPeriod,
					    const_Location_changeDirection_lv) = 
				dbisim((MachineBody_VS_O(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod,
						    const_Location_changeDirection_lv))
				)
			
			Stateful_VS_O(id__,
					    const_Movement_lv,
					    const_Movement_evadeTime,
					    const_Movement_stuckPeriod,
					    const_Movement_stuckDist,
					    const_Movement_outPeriod,
					    const_Location_changeDirection_lv) = 
				dbisim((
					(Behaviour_VS_O(id__,
							    const_Movement_lv,
							    const_Movement_evadeTime,
							    const_Movement_stuckPeriod,
							    const_Movement_stuckDist,
							    const_Movement_outPeriod,
							    const_Location_changeDirection_lv) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
							    const_Movement_lv,
							    const_Movement_evadeTime,
							    const_Movement_stuckPeriod,
							    const_Movement_stuckDist,
							    const_Movement_outPeriod,
							    const_Location_changeDirection_lv))
				 	\getsetLocalChannels
				)
				)
			
			IteratedStateful_VS_O(id__,
					    const_Movement_lv,
					    const_Movement_evadeTime,
					    const_Movement_stuckPeriod,
					    const_Movement_stuckDist,
					    const_Movement_outPeriod,
					    const_Location_changeDirection_lv) =
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										dbisim(
											sbisim(
												Behaviour_VS_O(id__,
														    const_Movement_lv,
														    const_Movement_evadeTime,
														    const_Movement_stuckPeriod,
														    const_Movement_stuckDist,
														    const_Movement_outPeriod,
														    const_Location_changeDirection_lv)
												[| {|get_l,set_l,terminate|} |]
												Memory_l(Location_Loc_left)
											)\{|get_l,set_l|}
										)
										[| {|get_d1,set_d1,terminate|} |]
										Memory_d1(0)
									)\{|get_d1,set_d1|}
								)
								[| {|get_d0,set_d0,terminate|} |]
								Memory_d0(0)
							)\{|get_d0,set_d0|}
						)
						[| {|get_a,set_a,terminate|} |]
						Memory_a(Chemical_Angle_Left)
					)\{|get_a,set_a|}
				)
				)
			
			-- END
			
			-- Memory
			-- Memory variables
			Memory_a(a) =
				get_a!a -> Memory_a(a)
				[]
				set_a?x__ -> Memory_a(x__)
				[]
				terminate -> SKIP
			Memory_d0(d0) =
				get_d0!d0 -> Memory_d0(d0)
				[]
				set_d0?x__ -> Memory_d0(x__)
				[]
				terminate -> SKIP
			Memory_d1(d1) =
				get_d1!d1 -> Memory_d1(d1)
				[]
				set_d1?x__ -> Memory_d1(x__)
				[]
				terminate -> SKIP
			Memory_l(l) =
				get_l!l -> Memory_l(l)
				[]
				set_l?x__ -> Memory_l(x__)
				[]
				terminate -> SKIP
			
			-- varMemory process
			varMemory(id__,
					    const_Movement_lv,
					    const_Movement_evadeTime,
					    const_Movement_stuckPeriod,
					    const_Movement_stuckDist,
					    const_Movement_outPeriod,
					    const_Location_changeDirection_lv) = Memory_a(Chemical_Angle_Left)
			[| { terminate } |] (
			Memory_d0(0)
			[| { terminate } |] (
			Memory_d1(0)
			[| { terminate } |] (
			Memory_l(Location_Loc_left)
			)
			)
			)
			
			getsetLocalChannels = {|get_a,set_a,get_d0,set_d0,get_d1,set_d1,get_l,set_l|}
			
			-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
			FVS__(id__,
					    const_Movement_lv,
					    const_Movement_evadeTime,
					    const_Movement_stuckPeriod,
					    const_Movement_stuckDist,
					    const_Movement_outPeriod,
					    const_Location_changeDirection_lv) = STM_VS_O(id__,
					    const_Movement_lv,
					    const_Movement_evadeTime,
					    const_Movement_stuckPeriod,
					    const_Movement_stuckDist,
					    const_Movement_outPeriod,
					    const_Location_changeDirection_lv)
			
			D__(id__,
					    const_Movement_lv,
					    const_Movement_evadeTime,
					    const_Movement_stuckPeriod,
					    const_Movement_stuckDist,
					    const_Movement_outPeriod,
					    const_Location_changeDirection_lv) = STM(id__,
					    const_Movement_lv,
					    const_Movement_evadeTime,
					    const_Movement_stuckPeriod,
					    const_Movement_stuckDist,
					    const_Movement_outPeriod,
					    const_Location_changeDirection_lv) \ internal_events
			O__(id__,
					    const_Movement_lv,
					    const_Movement_evadeTime,
					    const_Movement_stuckPeriod,
					    const_Movement_stuckDist,
					    const_Movement_outPeriod,
					    const_Location_changeDirection_lv) = sbisim(diamond(D__(id__,
					    const_Movement_lv,
					    const_Movement_evadeTime,
					    const_Movement_stuckPeriod,
					    const_Movement_stuckDist,
					    const_Movement_outPeriod,
					    const_Location_changeDirection_lv)))
			VS__(id__,
					    const_Movement_lv,
					    const_Movement_evadeTime,
					    const_Movement_stuckPeriod,
					    const_Movement_stuckDist,
					    const_Movement_outPeriod,
					    const_Location_changeDirection_lv) = FVS__(id__,
					    const_Movement_lv,
					    const_Movement_evadeTime,
					    const_Movement_stuckPeriod,
					    const_Movement_stuckDist,
					    const_Movement_outPeriod,
					    const_Location_changeDirection_lv)
			VS_O__(id__,
					    const_Movement_lv,
					    const_Movement_evadeTime,
					    const_Movement_stuckPeriod,
					    const_Movement_stuckDist,
					    const_Movement_outPeriod,
					    const_Location_changeDirection_lv) = sbisim(diamond(FVS__(id__,
					    const_Movement_lv,
					    const_Movement_evadeTime,
					    const_Movement_stuckPeriod,
					    const_Movement_stuckDist,
					    const_Movement_outPeriod,
					    const_Location_changeDirection_lv)))
			HEXT__(id__,
					    const_Movement_lv,
					    const_Movement_evadeTime,
					    const_Movement_stuckPeriod,
					    const_Movement_stuckDist,
					    const_Movement_outPeriod,
					    const_Location_changeDirection_lv) = O__(id__,
					    const_Movement_lv,
					    const_Movement_evadeTime,
					    const_Movement_stuckPeriod,
					    const_Movement_stuckDist,
					    const_Movement_outPeriod,
					    const_Location_changeDirection_lv) [|shared_variable_events|] SKIP
			HUP__(id__,
					    const_Movement_lv,
					    const_Movement_evadeTime,
					    const_Movement_stuckPeriod,
					    const_Movement_stuckDist,
					    const_Movement_outPeriod,
					    const_Location_changeDirection_lv) = O__(id__,
					    const_Movement_lv,
					    const_Movement_evadeTime,
					    const_Movement_stuckPeriod,
					    const_Movement_stuckDist,
					    const_Movement_outPeriod,
					    const_Location_changeDirection_lv) [|{share__}|] SKIP
			
			-- Shared memory
			-- Shared memory variables
			
			-- sharedVarMemory process
			sharedVarMemory(id__,
					    const_Movement_lv,
					    const_Movement_evadeTime,
					    const_Movement_stuckPeriod,
					    const_Movement_stuckDist,
					    const_Movement_outPeriod,
					    const_Location_changeDirection_lv) = terminate -> SKIP
			
			sharedVarSync = {||}
			
			sharedVarHide = {||}
		endmodule
		
			-- undefined operations
			CALL__move(id__,
					    param_lv,
					    param_a) 	= moveCall.param_lv.param_a -> SKIP
			CALL__randomWalk(id__) 	= randomWalkCall -> SKIP
			CALL__shortRandomWalk(id__) 	= shortRandomWalkCall -> SKIP
			
			-- declaring controller memory
			Memory(id__) = SKIP
			
			D__(id__,
					    const_MicroController_stm_ref0_lv,
					    const_MicroController_stm_ref0_evadeTime,
					    const_MicroController_stm_ref0_stuckPeriod,
					    const_MicroController_stm_ref0_stuckDist,
					    const_MicroController_stm_ref0_outPeriod,
					   	const_MicroController_op_ref0_lv) = 	((
					let
						const_Movement_lv = const_MicroController_stm_ref0_lv
						const_Movement_evadeTime = const_MicroController_stm_ref0_evadeTime
						const_Movement_stuckPeriod = const_MicroController_stm_ref0_stuckPeriod
						const_Movement_stuckDist = const_MicroController_stm_ref0_stuckDist
						const_Movement_outPeriod = const_MicroController_stm_ref0_outPeriod
						const_Location_changeDirection_lv = const_MicroController_op_ref0_lv
					within 
					stm_ref0::D__(id__,
							    const_Movement_lv,
							    const_Movement_evadeTime,
							    const_Movement_stuckPeriod,
							    const_Movement_stuckDist,
							    const_Movement_outPeriod,
							    const_Location_changeDirection_lv)[[
						stm_ref0::terminate <- terminate,
						stm_ref0::turn <- turn,
						stm_ref0::obstacle <- obstacle,
						stm_ref0::flag <- flag,
						stm_ref0::resume <- resume,
						stm_ref0::stop <- stop,
						stm_ref0::odometer <- odometer,
						stm_ref0::moveCall <- moveCall,
						stm_ref0::randomWalkCall <- randomWalkCall,
						stm_ref0::shortRandomWalkCall <- shortRandomWalkCall
					]]
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				Memory(id__)
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
			
			-- VS version
			VS__(id__,
					    const_MicroController_stm_ref0_lv,
					    const_MicroController_stm_ref0_evadeTime,
					    const_MicroController_stm_ref0_stuckPeriod,
					    const_MicroController_stm_ref0_stuckDist,
					    const_MicroController_stm_ref0_outPeriod,
					   	const_MicroController_op_ref0_lv) = 	((
					let
						const_Movement_lv = const_MicroController_stm_ref0_lv
						const_Movement_evadeTime = const_MicroController_stm_ref0_evadeTime
						const_Movement_stuckPeriod = const_MicroController_stm_ref0_stuckPeriod
						const_Movement_stuckDist = const_MicroController_stm_ref0_stuckDist
						const_Movement_outPeriod = const_MicroController_stm_ref0_outPeriod
						const_Location_changeDirection_lv = const_MicroController_op_ref0_lv
					within 
					stm_ref0::VS__(id__,
							    const_Movement_lv,
							    const_Movement_evadeTime,
							    const_Movement_stuckPeriod,
							    const_Movement_stuckDist,
							    const_Movement_outPeriod,
							    const_Location_changeDirection_lv)[[
						stm_ref0::terminate <- terminate,
						stm_ref0::turn <- turn,
						stm_ref0::obstacle <- obstacle,
						stm_ref0::flag <- flag,
						stm_ref0::resume <- resume,
						stm_ref0::stop <- stop,
						stm_ref0::odometer <- odometer,
						stm_ref0::moveCall <- moveCall,
						stm_ref0::randomWalkCall <- randomWalkCall,
						stm_ref0::shortRandomWalkCall <- shortRandomWalkCall
					]]
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				Memory(id__)
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
		
			-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
			O__(id__,
					    const_MicroController_stm_ref0_lv,
					    const_MicroController_stm_ref0_evadeTime,
					    const_MicroController_stm_ref0_stuckPeriod,
					    const_MicroController_stm_ref0_stuckDist,
					    const_MicroController_stm_ref0_outPeriod,
					   	const_MicroController_op_ref0_lv) = sbisim(diamond(	((
					let
						const_Movement_lv = const_MicroController_stm_ref0_lv
						const_Movement_evadeTime = const_MicroController_stm_ref0_evadeTime
						const_Movement_stuckPeriod = const_MicroController_stm_ref0_stuckPeriod
						const_Movement_stuckDist = const_MicroController_stm_ref0_stuckDist
						const_Movement_outPeriod = const_MicroController_stm_ref0_outPeriod
						const_Location_changeDirection_lv = const_MicroController_op_ref0_lv
					within 
					stm_ref0::O__(id__,
							    const_Movement_lv,
							    const_Movement_evadeTime,
							    const_Movement_stuckPeriod,
							    const_Movement_stuckDist,
							    const_Movement_outPeriod,
							    const_Location_changeDirection_lv)[[
						stm_ref0::terminate <- terminate,
						stm_ref0::turn <- turn,
						stm_ref0::obstacle <- obstacle,
						stm_ref0::flag <- flag,
						stm_ref0::resume <- resume,
						stm_ref0::stop <- stop,
						stm_ref0::odometer <- odometer,
						stm_ref0::moveCall <- moveCall,
						stm_ref0::randomWalkCall <- randomWalkCall,
						stm_ref0::shortRandomWalkCall <- shortRandomWalkCall
					]]
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				dbisim(Memory(id__))
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
			))
							
			-- VS_O version
			VS_O__(id__,
					    const_MicroController_stm_ref0_lv,
					    const_MicroController_stm_ref0_evadeTime,
					    const_MicroController_stm_ref0_stuckPeriod,
					    const_MicroController_stm_ref0_stuckDist,
					    const_MicroController_stm_ref0_outPeriod,
					   	const_MicroController_op_ref0_lv) = sbisim(diamond(	((
					let
						const_Movement_lv = const_MicroController_stm_ref0_lv
						const_Movement_evadeTime = const_MicroController_stm_ref0_evadeTime
						const_Movement_stuckPeriod = const_MicroController_stm_ref0_stuckPeriod
						const_Movement_stuckDist = const_MicroController_stm_ref0_stuckDist
						const_Movement_outPeriod = const_MicroController_stm_ref0_outPeriod
						const_Location_changeDirection_lv = const_MicroController_op_ref0_lv
					within 
					stm_ref0::VS_O__(id__,
							    const_Movement_lv,
							    const_Movement_evadeTime,
							    const_Movement_stuckPeriod,
							    const_Movement_stuckDist,
							    const_Movement_outPeriod,
							    const_Location_changeDirection_lv)[[
						stm_ref0::terminate <- terminate,
						stm_ref0::turn <- turn,
						stm_ref0::obstacle <- obstacle,
						stm_ref0::flag <- flag,
						stm_ref0::resume <- resume,
						stm_ref0::stop <- stop,
						stm_ref0::odometer <- odometer,
						stm_ref0::moveCall <- moveCall,
						stm_ref0::randomWalkCall <- randomWalkCall,
						stm_ref0::shortRandomWalkCall <- shortRandomWalkCall
					]]
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				dbisim(Memory(id__))
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
			))
		
			HEXT(id__,
					    const_MicroController_stm_ref0_lv,
					    const_MicroController_stm_ref0_evadeTime,
					    const_MicroController_stm_ref0_stuckPeriod,
					    const_MicroController_stm_ref0_stuckDist,
					    const_MicroController_stm_ref0_outPeriod,
					   	const_MicroController_op_ref0_lv) = O__(id__,
					    const_MicroController_stm_ref0_lv,
					    const_MicroController_stm_ref0_evadeTime,
					    const_MicroController_stm_ref0_stuckPeriod,
					    const_MicroController_stm_ref0_stuckDist,
					    const_MicroController_stm_ref0_outPeriod,
					   	const_MicroController_op_ref0_lv) [|shared_variable_events|] SKIP			

	endmodule
