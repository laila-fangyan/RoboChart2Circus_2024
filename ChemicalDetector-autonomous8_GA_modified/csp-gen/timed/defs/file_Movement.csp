
--
-- RoboChart generator version 3.0.0.202401231330
-- Automatically generated on 01-05-2025 09:52:18
--
-- Iterated compression status: true
-- Assertions compression status: false
--




module Movement
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_i1|
	              NID_Waiting|
	              NID_Going|
	              NID_Found|
	              NID_j1|
	              NID_Avoiding|
	              NID_TryingAgain|
	              NID_AvoidingAgain|
	              NID_GettingOut
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_a, set_a, setL_a, setR_a: Chemical_Angle
	channel get_d0, set_d0, setL_d0, setR_d0: core_real
	channel get_d1, set_d1, setL_d1, setR_d1: core_real
	channel get_l, set_l, setL_l, setR_l: Location_Loc
	
	-- Shared variable channels
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	channel obstacle__: NIDS.InOut.Location_Loc
	channel obstacle: InOut.Location_Loc
	channel odometer__: NIDS.InOut.core_real
	channel odometer: InOut.core_real
	channel resume__: NIDS.InOut
	channel resume: InOut
	channel turn__: NIDS.InOut.Chemical_Angle
	channel turn: InOut.Chemical_Angle
	channel stop__: NIDS.InOut
	channel stop: InOut
	channel flag__: NIDS.InOut
	channel flag: InOut
	
	-- Declaring call and ret events for undefined operations
	channel moveCall: core_real.Chemical_Angle
	channel randomWalkCall
	channel changeDirectionCall: Location_Loc
	channel shortRandomWalkCall
	
	enterSS = {|
	i1::enter,
	Waiting::enter,
	Going::enter,
	Found::enter,
	j1::enter,
	Avoiding::enter,
	TryingAgain::enter,
	AvoidingAgain::enter,
	GettingOut::enter
	|}
	
	enteredSS = 	{|
	Waiting::entered,
	Going::entered,
	Found::entered,
	j1::entered,
	Avoiding::entered,
	TryingAgain::entered,
	AvoidingAgain::entered,
	GettingOut::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
	,	obstacle,
		odometer,
		resume,
		turn,
		stop,
		flag
	,	moveCall,
		randomWalkCall,
		changeDirectionCall,
		shortRandomWalkCall
		|}
	datatype ClockSet = 
		CLID_T
	
	channel clockReset, clockResetL, clockResetR : ClockSet
	
	localClockResets = {|clockReset.CLID_T|}
	
	
	channel get_CLID_AvoidingAgain : core_clock_type 
	channel get_CLID_Waiting : core_clock_type 
	channel get_CLID_Avoiding : core_clock_type 
	channel get_CLID_Going : core_clock_type 
	channel get_CLID_Found : core_clock_type 
	channel get_CLID_j1 : core_clock_type 
	channel get_CLID_T : core_clock_type 
	channel get_CLID_GettingOut : core_clock_type 
	channel get_CLID_TryingAgain : core_clock_type 
	--channel increment__
	
	CLID_AvoidingAgain_clock_type(id__,
			          const_Movement_lv,
			          const_Movement_evadeTime,
			          const_Movement_stuckPeriod,
			          const_Movement_stuckDist,
			          const_Movement_outPeriod) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_Waiting_clock_type(id__,
			          const_Movement_lv,
			          const_Movement_evadeTime,
			          const_Movement_stuckPeriod,
			          const_Movement_stuckDist,
			          const_Movement_outPeriod) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_Avoiding_clock_type(id__,
			          const_Movement_lv,
			          const_Movement_evadeTime,
			          const_Movement_stuckPeriod,
			          const_Movement_stuckDist,
			          const_Movement_outPeriod) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_Going_clock_type(id__,
			          const_Movement_lv,
			          const_Movement_evadeTime,
			          const_Movement_stuckPeriod,
			          const_Movement_stuckDist,
			          const_Movement_outPeriod) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_Found_clock_type(id__,
			          const_Movement_lv,
			          const_Movement_evadeTime,
			          const_Movement_stuckPeriod,
			          const_Movement_stuckDist,
			          const_Movement_outPeriod) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_j1_clock_type(id__,
			          const_Movement_lv,
			          const_Movement_evadeTime,
			          const_Movement_stuckPeriod,
			          const_Movement_stuckDist,
			          const_Movement_outPeriod) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_T_clock_type(id__,
			          const_Movement_lv,
			          const_Movement_evadeTime,
			          const_Movement_stuckPeriod,
			          const_Movement_stuckDist,
			          const_Movement_outPeriod) = 
		let
			max = (clock_type_max(Union({
	({const_Movement_stuckPeriod|stuckPeriod <- core_nat}),
	({const_Movement_stuckPeriod|stuckPeriod <- core_nat})
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_GettingOut_clock_type(id__,
			          const_Movement_lv,
			          const_Movement_evadeTime,
			          const_Movement_stuckPeriod,
			          const_Movement_stuckDist,
			          const_Movement_outPeriod) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_TryingAgain_clock_type(id__,
			          const_Movement_lv,
			          const_Movement_evadeTime,
			          const_Movement_stuckPeriod,
			          const_Movement_stuckDist,
			          const_Movement_outPeriod) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	

		-- Nodes --
		-- declaring all nodes
		
		----------------------------------------------------------------------
		-- Initial: i1
		module i1
		exports
		
			channel enter, interrupt
			
			Timed(OneStep) {
				D__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod) = D__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: Waiting
		module Waiting
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((true&CALL__randomWalk(
								id__,
							    const_Movement_lv,
							    const_Movement_evadeTime,
							    const_Movement_stuckPeriod,
							    const_Movement_stuckDist,
							    const_Movement_outPeriod
							) ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((true&CALL__randomWalk(
								id__,
							    const_Movement_lv,
							    const_Movement_evadeTime,
							    const_Movement_stuckPeriod,
							    const_Movement_stuckDist,
							    const_Movement_outPeriod
							) ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: Going
		module Going
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(get_a?a -> true&CALL__move(
								id__,
							    const_Movement_lv,
							    const_Movement_evadeTime,
							    const_Movement_stuckPeriod,
							    const_Movement_stuckDist,
							    const_Movement_outPeriod,
								const_Movement_lv,
								a
							)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(get_a?a -> true&CALL__move(
								id__,
							    const_Movement_lv,
							    const_Movement_evadeTime,
							    const_Movement_stuckPeriod,
							    const_Movement_stuckDist,
							    const_Movement_outPeriod,
								const_Movement_lv,
								a
							)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: Found
		module Found
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&CALL__move(
								id__,
							    const_Movement_lv,
							    const_Movement_evadeTime,
							    const_Movement_stuckPeriod,
							    const_Movement_stuckDist,
							    const_Movement_outPeriod,
								0,
								Chemical_Angle_Front
							);true&(share__choice(flag.out -> SKIP)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&CALL__move(
								id__,
							    const_Movement_lv,
							    const_Movement_evadeTime,
							    const_Movement_stuckPeriod,
							    const_Movement_stuckDist,
							    const_Movement_outPeriod,
								0,
								Chemical_Angle_Front
							);true&(share__choice(flag.out -> SKIP)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- Final state: j1
		module j1
		
		exports
		
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				D__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
						
						Entering 	= entered -> SKIP ; Active
						Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
						Interrupted	= share__choice(exit -> exited -> Inactive)
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod) = D__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: Avoiding
		module Avoiding
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(odometer.in?d0 -> (SStop /\ set_d0!d0 -> SKIP)));share__choice(get_l?l -> true&CALL__changeDirection(
								id__,
							    const_Movement_lv,
							    const_Movement_evadeTime,
							    const_Movement_stuckPeriod,
							    const_Movement_stuckDist,
							    const_Movement_outPeriod,
								l
							));SHARE_WAIT(const_Movement_evadeTime) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(odometer.in?d0 -> (SStop /\ set_d0!d0 -> SKIP)));share__choice(get_l?l -> true&CALL__changeDirection(
								id__,
							    const_Movement_lv,
							    const_Movement_evadeTime,
							    const_Movement_stuckPeriod,
							    const_Movement_stuckDist,
							    const_Movement_outPeriod,
								l
							));SHARE_WAIT(const_Movement_evadeTime) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: TryingAgain
		module TryingAgain
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(get_a?a -> true&CALL__move(
								id__,
							    const_Movement_lv,
							    const_Movement_evadeTime,
							    const_Movement_stuckPeriod,
							    const_Movement_stuckDist,
							    const_Movement_outPeriod,
								const_Movement_lv,
								a
							)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(get_a?a -> true&CALL__move(
								id__,
							    const_Movement_lv,
							    const_Movement_evadeTime,
							    const_Movement_stuckPeriod,
							    const_Movement_stuckDist,
							    const_Movement_outPeriod,
								const_Movement_lv,
								a
							)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: AvoidingAgain
		module AvoidingAgain
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: GettingOut
		module GettingOut
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&CALL__shortRandomWalk(
								id__,
							    const_Movement_lv,
							    const_Movement_evadeTime,
							    const_Movement_stuckPeriod,
							    const_Movement_stuckDist,
							    const_Movement_outPeriod
							);SHARE_WAIT(const_Movement_outPeriod) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&CALL__shortRandomWalk(
								id__,
							    const_Movement_lv,
							    const_Movement_evadeTime,
							    const_Movement_stuckPeriod,
							    const_Movement_stuckDist,
							    const_Movement_outPeriod
							);SHARE_WAIT(const_Movement_outPeriod) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		-- END of Nodes --
		
		Timed(OneStep) {
		-- Operation calls --
		-- Only the undefined operations are declared here.
		-- If the state machine is in isolation, all required operations will be undefined.
		-- If it is in the context of a controller, the required operations not provided by the
		-- controller will be declared here, and the defined operations will be defined in the
		-- context of the Controller module, and therefore within scope of the state machine module.
		CALL__move(id__,
				    const_Movement_lv,
				    const_Movement_evadeTime,
				    const_Movement_stuckPeriod,
				    const_Movement_stuckDist,
				    const_Movement_outPeriod,
					param_lv,
					param_a) = EDeadline(moveCall.param_lv.param_a,0)
		CALL__randomWalk(id__,
				    const_Movement_lv,
				    const_Movement_evadeTime,
				    const_Movement_stuckPeriod,
				    const_Movement_stuckDist,
				    const_Movement_outPeriod) = EDeadline(randomWalkCall,0)
		CALL__changeDirection(id__,
				    const_Movement_lv,
				    const_Movement_evadeTime,
				    const_Movement_stuckPeriod,
				    const_Movement_stuckDist,
				    const_Movement_outPeriod,
					param_l) = EDeadline(changeDirectionCall.param_l,0)
		CALL__shortRandomWalk(id__,
				    const_Movement_lv,
				    const_Movement_evadeTime,
				    const_Movement_stuckPeriod,
				    const_Movement_stuckDist,
				    const_Movement_outPeriod) = EDeadline(shortRandomWalkCall,0)
		
		-- END of Operation calls --
	
		-- STM processes
		STM(id__,
				    const_Movement_lv,
				    const_Movement_evadeTime,
				    const_Movement_stuckPeriod,
				    const_Movement_stuckDist,
				    const_Movement_outPeriod) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
		( 
			(
				(
					(IteratedStateful(id__,
							    const_Movement_lv,
							    const_Movement_evadeTime,
							    const_Movement_stuckPeriod,
							    const_Movement_stuckDist,
							    const_Movement_outPeriod) \ {terminate} ; share__choice(terminate -> SKIP))
				 	[[ share__ <- x__ | x__ <- {||} ]]
				)
			[| {share__} |]
			SKIP
			)
			[| union(sharedVarSync,{terminate}) |]
			dbisim(sharedVarMemory(id__,
					    const_Movement_lv,
					    const_Movement_evadeTime,
					    const_Movement_stuckPeriod,
					    const_Movement_stuckDist,
					    const_Movement_outPeriod))
		)\sharedVarHide
		
		STM_VS_O(id__,
				    const_Movement_lv,
				    const_Movement_evadeTime,
				    const_Movement_stuckPeriod,
				    const_Movement_stuckDist,
				    const_Movement_outPeriod) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
		( 
			(
				(
					(IteratedStateful_VS_O(id__,
							    const_Movement_lv,
							    const_Movement_evadeTime,
							    const_Movement_stuckPeriod,
							    const_Movement_stuckDist,
							    const_Movement_outPeriod) \ {terminate} ; share__choice(terminate -> SKIP))
				 	[[ share__ <- x__ | x__ <- {||} ]]
				)
			[| {share__} |]
			SKIP
			)
			[| union(sharedVarSync,{terminate}) |]
			dbisim(sharedVarMemory(id__,
					    const_Movement_lv,
					    const_Movement_evadeTime,
					    const_Movement_stuckPeriod,
					    const_Movement_stuckDist,
					    const_Movement_outPeriod))
		)\sharedVarHide
		
		-- Transitions
		Transitions(id__,
				    const_Movement_lv,
				    const_Movement_evadeTime,
				    const_Movement_stuckPeriod,
				    const_Movement_stuckDist,
				    const_Movement_outPeriod) = ((let
			Trans = share__choice(get_d1?d1 -> get_d0?d0 -> get_CLID_T?T:CLID_T_clock_type(id__,
					          const_Movement_lv,
					          const_Movement_evadeTime,
					          const_Movement_stuckPeriod,
					          const_Movement_stuckDist,
					          const_Movement_outPeriod) -> TimeOut_1(
				 (share__ -> SKIP
				 [] dbisim((true)&(internal__!NID_i1 -> SKIP ;  ((SKIP ; Waiting::enter -> SKIP))))
				 [] dbisim((true)&(turn__!NID_Waiting.in?a:{a|a <- Chemical_Angle, true} -> share__choice(set_a!a -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Going::enter -> SKIP)))
				 [] dbisim((true)&(turn__!NID_Going.in?a:{a|a <- Chemical_Angle, true} -> share__choice(set_a!a -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Going::enter -> SKIP)))
				 [] dbisim((true)&(stop__!NID_Going.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Found::enter -> SKIP)))
				 [] dbisim((true)&(internal__!NID_Found -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; j1::enter -> SKIP)))
				 [] dbisim((true)&(obstacle__!NID_Going.in?l:{l|l <- Location_Loc, true} -> share__choice(set_l!l -> SKIP) ; (share__choice(clockReset.CLID_T -> SKIP) ; share__choice(SKIP))
				 ; share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Avoiding::enter -> SKIP)))
				 [] dbisim((true)&(turn__!NID_Avoiding.in?a:{a|a <- Chemical_Angle, true} -> share__choice(set_a!a -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; TryingAgain::enter -> SKIP)))
				 [] dbisim((true)&(turn__!NID_TryingAgain.in?a:{a|a <- Chemical_Angle, true} -> share__choice(set_a!a -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; TryingAgain::enter -> SKIP)))
				 [] dbisim((true)&(stop__!NID_TryingAgain.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Found::enter -> SKIP)))
				 [] dbisim((true)&(resume__!NID_TryingAgain.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Waiting::enter -> SKIP)))
				 [] dbisim((true)&(obstacle__!NID_TryingAgain.in?l:{l|l <- Location_Loc, true} -> share__choice(set_l!l -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(odometer.in?d1 -> (SStop /\ set_d1!d1 -> SKIP))) ; AvoidingAgain::enter -> SKIP)))
				 [] dbisim((((T<const_Movement_stuckPeriod) or (Minus(d1, d0, core_real)>const_Movement_stuckDist)))&(internal__!NID_AvoidingAgain -> SKIP ; (share__choice(clockReset.CLID_T -> SKIP) ; share__choice(SKIP))
				 ; share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Avoiding::enter -> SKIP)))
				 [] dbisim((((T>=const_Movement_stuckPeriod) and (Minus(d1, d0, core_real)<=const_Movement_stuckDist)))&(internal__!NID_AvoidingAgain -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; GettingOut::enter -> SKIP)))
				 [] dbisim((true)&(turn__!NID_GettingOut.in?a:{a|a <- Chemical_Angle, true} -> share__choice(set_a!a -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Going::enter -> SKIP)))
				 [] dbisim((true)&(resume__!NID_Waiting.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Waiting::enter -> SKIP)))
				 [] dbisim((true)&(stop__!NID_Waiting.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Found::enter -> SKIP)))
				 [] dbisim((true)&(stop__!NID_GettingOut.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Found::enter -> SKIP)))
				 [] dbisim((true)&(stop__!NID_AvoidingAgain.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Found::enter -> SKIP)))
				 [] dbisim((true)&(stop__!NID_Avoiding.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Found::enter -> SKIP)))
				 [] dbisim((true)&(resume__!NID_Avoiding.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Waiting::enter -> SKIP)))
				 [] dbisim((true)&(resume__!NID_GettingOut.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Waiting::enter -> SKIP)))
				 [] dbisim((true)&(resume__!NID_AvoidingAgain.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Waiting::enter -> SKIP)))
				 [] dbisim((true)&(resume__!NID_Going.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Waiting::enter -> SKIP)))
				 []
				 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
				 []
				 terminate -> SKIP
				 )
			,SKIP);Trans
			)
		within
			Trans [|{terminate}|> SKIP
		)
		)
		
		-- Stateful
		-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
		
		-- Named process definitions
		MachineBody(id__,
				    const_Movement_lv,
				    const_Movement_evadeTime,
				    const_Movement_stuckPeriod,
				    const_Movement_stuckDist,
				    const_Movement_outPeriod) = 
			dbisim((
			let
				finalNodesEntered = {|j1::entered|}
			within
				(dbisim((dbisim((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					i1::enter,
					Waiting::enter,
					Going::enter,
					Found::enter,
					j1::enter,
					Avoiding::enter,
					TryingAgain::enter,
					AvoidingAgain::enter,
					GettingOut::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited,interrupt|})
						transSync = {|internal__.NID_i1,turn__.NID_Waiting.in,turn__.NID_Going.in,stop__.NID_Going.in,internal__.NID_Found,obstacle__.NID_Going.in,turn__.NID_Avoiding.in,turn__.NID_TryingAgain.in,stop__.NID_TryingAgain.in,resume__.NID_TryingAgain.in,obstacle__.NID_TryingAgain.in,internal__.NID_AvoidingAgain,internal__.NID_AvoidingAgain,turn__.NID_GettingOut.in,resume__.NID_Waiting.in,stop__.NID_Waiting.in,stop__.NID_GettingOut.in,stop__.NID_AvoidingAgain.in,stop__.NID_Avoiding.in,resume__.NID_Avoiding.in,resume__.NID_GettingOut.in,resume__.NID_AvoidingAgain.in,resume__.NID_Going.in|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   i1::D__(id__,
						   		    const_Movement_lv,
						   		    const_Movement_evadeTime,
						   		    const_Movement_stuckPeriod,
						   		    const_Movement_stuckDist,
						   		    const_Movement_outPeriod)
						   [| { share__, terminate } |] (
						   Waiting::D__(id__,
						   		    const_Movement_lv,
						   		    const_Movement_evadeTime,
						   		    const_Movement_stuckPeriod,
						   		    const_Movement_stuckDist,
						   		    const_Movement_outPeriod)
						   [| { share__, terminate } |] (
						   Going::D__(id__,
						   		    const_Movement_lv,
						   		    const_Movement_evadeTime,
						   		    const_Movement_stuckPeriod,
						   		    const_Movement_stuckDist,
						   		    const_Movement_outPeriod)
						   [| { share__, terminate } |] (
						   Found::D__(id__,
						   		    const_Movement_lv,
						   		    const_Movement_evadeTime,
						   		    const_Movement_stuckPeriod,
						   		    const_Movement_stuckDist,
						   		    const_Movement_outPeriod)
						   [| { share__, terminate } |] (
						   j1::D__(id__,
						   		    const_Movement_lv,
						   		    const_Movement_evadeTime,
						   		    const_Movement_stuckPeriod,
						   		    const_Movement_stuckDist,
						   		    const_Movement_outPeriod)
						   [| { share__, terminate } |] (
						   Avoiding::D__(id__,
						   		    const_Movement_lv,
						   		    const_Movement_evadeTime,
						   		    const_Movement_stuckPeriod,
						   		    const_Movement_stuckDist,
						   		    const_Movement_outPeriod)
						   [| { share__, terminate } |] (
						   TryingAgain::D__(id__,
						   		    const_Movement_lv,
						   		    const_Movement_evadeTime,
						   		    const_Movement_stuckPeriod,
						   		    const_Movement_stuckDist,
						   		    const_Movement_outPeriod)
						   [| { share__, terminate } |] (
						   AvoidingAgain::D__(id__,
						   		    const_Movement_lv,
						   		    const_Movement_evadeTime,
						   		    const_Movement_stuckPeriod,
						   		    const_Movement_stuckDist,
						   		    const_Movement_outPeriod)
						   [| { share__, terminate } |] (
						   GettingOut::D__(id__,
						   		    const_Movement_lv,
						   		    const_Movement_evadeTime,
						   		    const_Movement_stuckPeriod,
						   		    const_Movement_stuckDist,
						   		    const_Movement_outPeriod)
						   )
						   )
						   )
						   )
						   )
						   )
						   )
						   )
						 )
						 [[Waiting::interrupt <- x__ | x__ <- {|interrupt,turn__.NID_Waiting.in,resume__.NID_Waiting.in,stop__.NID_Waiting.in|}]]
						 [[Going::interrupt <- x__ | x__ <- {|interrupt,turn__.NID_Going.in,stop__.NID_Going.in,obstacle__.NID_Going.in,resume__.NID_Going.in|}]]
						 [[Found::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Found|}]]
						 [[j1::interrupt <- x__ | x__ <- {|interrupt|}]]
						 [[Avoiding::interrupt <- x__ | x__ <- {|interrupt,turn__.NID_Avoiding.in,stop__.NID_Avoiding.in,resume__.NID_Avoiding.in|}]]
						 [[TryingAgain::interrupt <- x__ | x__ <- {|interrupt,turn__.NID_TryingAgain.in,stop__.NID_TryingAgain.in,resume__.NID_TryingAgain.in,obstacle__.NID_TryingAgain.in|}]]
						 [[AvoidingAgain::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_AvoidingAgain,internal__.NID_AvoidingAgain,stop__.NID_AvoidingAgain.in,resume__.NID_AvoidingAgain.in|}]]
						 [[GettingOut::interrupt <- x__ | x__ <- {|interrupt,turn__.NID_GettingOut.in,stop__.NID_GettingOut.in,resume__.NID_GettingOut.in|}]]
						 [[i1::interrupt <- x__ | x__ <- {|internal__.NID_i1|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__,setR_l,setR_a |} ]] 
						  [[set_d1 <- setL_d1,set_d0 <- setL_d0,clockReset.CLID_T <- clockResetL.CLID_T]]
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 			,setL_d1
						 			,setL_d0
						 			,clockResetL.CLID_T
						 			,setR_l
						 			 			,setR_a
						 			|}) |]
						 ((i1::enter -> Transitions(id__,
						 		    const_Movement_lv,
						 		    const_Movement_evadeTime,
						 		    const_Movement_stuckPeriod,
						 		    const_Movement_stuckDist,
						 		    const_Movement_outPeriod))
						  [[ share__ <- x__ | x__ <- {| share__,setL_d1,setL_d0,clockResetL.CLID_T |} ]]
						  [[set_l <- setR_l,set_a <- setR_a]]
						 )
						)[[setL_d1 <- set_d1,setL_d0 <- set_d0,clockResetL.CLID_T <- clockReset.CLID_T]]
						 [[setR_l <- set_l,setR_a <- set_a]]
						)
					)
					 \ hideSet)
					[[
						obstacle__.x____ <- obstacle,
						odometer__.x____ <- odometer,
						resume__.x____ <- resume,
						turn__.x____ <- turn,
						stop__.x____ <- stop,
						flag__.x____ <- flag
						| x____ <- NIDS
					]]
				)
				)
				 [| union(stateClockSync,{terminate}) |]
				 StateClocks(id__,
				 		          const_Movement_lv,
				 		          const_Movement_evadeTime,
				 		          const_Movement_stuckPeriod,
				 		          const_Movement_stuckDist,
				 		          const_Movement_outPeriod)
				)\diff(stateClockSync,enteredSS))
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour(id__,
				    const_Movement_lv,
				    const_Movement_evadeTime,
				    const_Movement_stuckPeriod,
				    const_Movement_stuckDist,
				    const_Movement_outPeriod) = 
			dbisim((let
				stateClockSync = {|get_CLID_AvoidingAgain,AvoidingAgain::entered,get_CLID_Waiting,Waiting::entered,get_CLID_Avoiding,Avoiding::entered,get_CLID_Going,Going::entered,get_CLID_Found,Found::entered,get_CLID_GettingOut,GettingOut::entered,get_CLID_TryingAgain,TryingAgain::entered|}
			 within
				(MachineBody(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod)) \ union(stateClockSync,enteredSS)
			)
			)
		
		IteratedBehaviour(id__,
				    const_Movement_lv,
				    const_Movement_evadeTime,
				    const_Movement_stuckPeriod,
				    const_Movement_stuckDist,
				    const_Movement_outPeriod) = 
			dbisim((let
				stateClockSync = {|get_CLID_AvoidingAgain,AvoidingAgain::entered,get_CLID_Waiting,Waiting::entered,get_CLID_Avoiding,Avoiding::entered,get_CLID_Going,Going::entered,get_CLID_Found,Found::entered,get_CLID_GettingOut,GettingOut::entered,get_CLID_TryingAgain,TryingAgain::entered|}
			 within
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										dbisim(
											sbisim(
												dbisim(
													sbisim(
														dbisim(
															sbisim(
																dbisim(
																	sbisim(
																		MachineBody(id__,
																				    const_Movement_lv,
																				    const_Movement_evadeTime,
																				    const_Movement_stuckPeriod,
																				    const_Movement_stuckDist,
																				    const_Movement_outPeriod)
																		[| {|get_CLID_TryingAgain,TryingAgain::entered,terminate|} |]
																		dbisim(Clock_CLID_TryingAgain(id__,0,
																				          const_Movement_lv,
																				          const_Movement_evadeTime,
																				          const_Movement_stuckPeriod,
																				          const_Movement_stuckDist,
																				          const_Movement_outPeriod))
																	)\{|get_CLID_TryingAgain|}
																)
																[| {|get_CLID_GettingOut,GettingOut::entered,terminate|} |]
																dbisim(Clock_CLID_GettingOut(id__,0,
																		          const_Movement_lv,
																		          const_Movement_evadeTime,
																		          const_Movement_stuckPeriod,
																		          const_Movement_stuckDist,
																		          const_Movement_outPeriod))
															)\{|get_CLID_GettingOut|}
														)
														[| {|get_CLID_Found,Found::entered,terminate|} |]
														dbisim(Clock_CLID_Found(id__,0,
																          const_Movement_lv,
																          const_Movement_evadeTime,
																          const_Movement_stuckPeriod,
																          const_Movement_stuckDist,
																          const_Movement_outPeriod))
													)\{|get_CLID_Found|}
												)
												[| {|get_CLID_Going,Going::entered,terminate|} |]
												dbisim(Clock_CLID_Going(id__,0,
														          const_Movement_lv,
														          const_Movement_evadeTime,
														          const_Movement_stuckPeriod,
														          const_Movement_stuckDist,
														          const_Movement_outPeriod))
											)\{|get_CLID_Going|}
										)
										[| {|get_CLID_Avoiding,Avoiding::entered,terminate|} |]
										dbisim(Clock_CLID_Avoiding(id__,0,
												          const_Movement_lv,
												          const_Movement_evadeTime,
												          const_Movement_stuckPeriod,
												          const_Movement_stuckDist,
												          const_Movement_outPeriod))
									)\{|get_CLID_Avoiding|}
								)
								[| {|get_CLID_Waiting,Waiting::entered,terminate|} |]
								dbisim(Clock_CLID_Waiting(id__,0,
										          const_Movement_lv,
										          const_Movement_evadeTime,
										          const_Movement_stuckPeriod,
										          const_Movement_stuckDist,
										          const_Movement_outPeriod))
							)\{|get_CLID_Waiting|}
						)
						[| {|get_CLID_AvoidingAgain,AvoidingAgain::entered,terminate|} |]
						dbisim(Clock_CLID_AvoidingAgain(id__,0,
								          const_Movement_lv,
								          const_Movement_evadeTime,
								          const_Movement_stuckPeriod,
								          const_Movement_stuckDist,
								          const_Movement_outPeriod))
					)\{|get_CLID_AvoidingAgain|}
				)
				) \ union(stateClockSync,enteredSS)
			)
			)
		
		Stateful(id__,
				    const_Movement_lv,
				    const_Movement_evadeTime,
				    const_Movement_stuckPeriod,
				    const_Movement_stuckDist,
				    const_Movement_outPeriod) = 
			((let
				getsetLocalChannels = {|get_a,set_a,
				get_d0,set_d0,
				get_d1,set_d1,
				get_l,set_l|}
				clockSync = {|get_CLID_T,clockReset.CLID_T|}
			within
				(Behaviour(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__,
				 		    const_Movement_lv,
				 		    const_Movement_evadeTime,
				 		    const_Movement_stuckPeriod,
				 		    const_Movement_stuckDist,
				 		    const_Movement_outPeriod) [| {terminate} |] Clocks(id__,
				 		          const_Movement_lv,
				 		          const_Movement_evadeTime,
				 		          const_Movement_stuckPeriod,
				 		          const_Movement_stuckDist,
				 		          const_Movement_outPeriod))
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		IteratedStateful(id__,
				    const_Movement_lv,
				    const_Movement_evadeTime,
				    const_Movement_stuckPeriod,
				    const_Movement_stuckDist,
				    const_Movement_outPeriod) =
			(dbisim(
				sbisim(
					dbisim(
						sbisim(
							dbisim(
								sbisim(
									dbisim(
										sbisim(
											dbisim(
												sbisim(
													IteratedBehaviour(id__,
															    const_Movement_lv,
															    const_Movement_evadeTime,
															    const_Movement_stuckPeriod,
															    const_Movement_stuckDist,
															    const_Movement_outPeriod)
													[| {|get_CLID_T,clockReset.CLID_T,terminate|} |]
													dbisim(Clock_CLID_T(id__,0,
															          const_Movement_lv,
															          const_Movement_evadeTime,
															          const_Movement_stuckPeriod,
															          const_Movement_stuckDist,
															          const_Movement_outPeriod))
												)\{|get_CLID_T,clockReset.CLID_T|}
											)
											[| {|get_l,set_l,terminate|} |]
											Memory_l(Location_Loc_left)
										)\{|get_l,set_l|}
									)
									[| {|get_d1,set_d1,terminate|} |]
									Memory_d1(0)
								)\{|get_d1,set_d1|}
							)
							[| {|get_d0,set_d0,terminate|} |]
							Memory_d0(0)
						)\{|get_d0,set_d0|}
					)
					[| {|get_a,set_a,terminate|} |]
					Memory_a(Chemical_Angle_Left)
				)\{|get_a,set_a|}
			)
			)
		
		-- Visible counterparts
		MachineBody_VS_O(id__,
				    const_Movement_lv,
				    const_Movement_evadeTime,
				    const_Movement_stuckPeriod,
				    const_Movement_stuckDist,
				    const_Movement_outPeriod) = 
			dbisim((
			let
				finalNodesEntered = {|j1::entered|}
			within
				(dbisim((dbisim((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					i1::enter,
					Waiting::enter,
					Going::enter,
					Found::enter,
					j1::enter,
					Avoiding::enter,
					TryingAgain::enter,
					AvoidingAgain::enter,
					GettingOut::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited,interrupt|})
						transSync = {|internal__.NID_i1,turn__.NID_Waiting.in,turn__.NID_Going.in,stop__.NID_Going.in,internal__.NID_Found,obstacle__.NID_Going.in,turn__.NID_Avoiding.in,turn__.NID_TryingAgain.in,stop__.NID_TryingAgain.in,resume__.NID_TryingAgain.in,obstacle__.NID_TryingAgain.in,internal__.NID_AvoidingAgain,internal__.NID_AvoidingAgain,turn__.NID_GettingOut.in,resume__.NID_Waiting.in,stop__.NID_Waiting.in,stop__.NID_GettingOut.in,stop__.NID_AvoidingAgain.in,stop__.NID_Avoiding.in,resume__.NID_Avoiding.in,resume__.NID_GettingOut.in,resume__.NID_AvoidingAgain.in,resume__.NID_Going.in|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   i1::VS_O__(id__,
						   		    const_Movement_lv,
						   		    const_Movement_evadeTime,
						   		    const_Movement_stuckPeriod,
						   		    const_Movement_stuckDist,
						   		    const_Movement_outPeriod)
						   [| { share__, terminate } |] (
						   Waiting::VS_O__(id__,
						   		    const_Movement_lv,
						   		    const_Movement_evadeTime,
						   		    const_Movement_stuckPeriod,
						   		    const_Movement_stuckDist,
						   		    const_Movement_outPeriod)
						   [| { share__, terminate } |] (
						   Going::VS_O__(id__,
						   		    const_Movement_lv,
						   		    const_Movement_evadeTime,
						   		    const_Movement_stuckPeriod,
						   		    const_Movement_stuckDist,
						   		    const_Movement_outPeriod)
						   [| { share__, terminate } |] (
						   Found::VS_O__(id__,
						   		    const_Movement_lv,
						   		    const_Movement_evadeTime,
						   		    const_Movement_stuckPeriod,
						   		    const_Movement_stuckDist,
						   		    const_Movement_outPeriod)
						   [| { share__, terminate } |] (
						   j1::VS_O__(id__,
						   		    const_Movement_lv,
						   		    const_Movement_evadeTime,
						   		    const_Movement_stuckPeriod,
						   		    const_Movement_stuckDist,
						   		    const_Movement_outPeriod)
						   [| { share__, terminate } |] (
						   Avoiding::VS_O__(id__,
						   		    const_Movement_lv,
						   		    const_Movement_evadeTime,
						   		    const_Movement_stuckPeriod,
						   		    const_Movement_stuckDist,
						   		    const_Movement_outPeriod)
						   [| { share__, terminate } |] (
						   TryingAgain::VS_O__(id__,
						   		    const_Movement_lv,
						   		    const_Movement_evadeTime,
						   		    const_Movement_stuckPeriod,
						   		    const_Movement_stuckDist,
						   		    const_Movement_outPeriod)
						   [| { share__, terminate } |] (
						   AvoidingAgain::VS_O__(id__,
						   		    const_Movement_lv,
						   		    const_Movement_evadeTime,
						   		    const_Movement_stuckPeriod,
						   		    const_Movement_stuckDist,
						   		    const_Movement_outPeriod)
						   [| { share__, terminate } |] (
						   GettingOut::VS_O__(id__,
						   		    const_Movement_lv,
						   		    const_Movement_evadeTime,
						   		    const_Movement_stuckPeriod,
						   		    const_Movement_stuckDist,
						   		    const_Movement_outPeriod)
						   )
						   )
						   )
						   )
						   )
						   )
						   )
						   )
						 )
						 [[Waiting::interrupt <- x__ | x__ <- {|interrupt,turn__.NID_Waiting.in,resume__.NID_Waiting.in,stop__.NID_Waiting.in|}]]
						 [[Going::interrupt <- x__ | x__ <- {|interrupt,turn__.NID_Going.in,stop__.NID_Going.in,obstacle__.NID_Going.in,resume__.NID_Going.in|}]]
						 [[Found::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Found|}]]
						 [[j1::interrupt <- x__ | x__ <- {|interrupt|}]]
						 [[Avoiding::interrupt <- x__ | x__ <- {|interrupt,turn__.NID_Avoiding.in,stop__.NID_Avoiding.in,resume__.NID_Avoiding.in|}]]
						 [[TryingAgain::interrupt <- x__ | x__ <- {|interrupt,turn__.NID_TryingAgain.in,stop__.NID_TryingAgain.in,resume__.NID_TryingAgain.in,obstacle__.NID_TryingAgain.in|}]]
						 [[AvoidingAgain::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_AvoidingAgain,internal__.NID_AvoidingAgain,stop__.NID_AvoidingAgain.in,resume__.NID_AvoidingAgain.in|}]]
						 [[GettingOut::interrupt <- x__ | x__ <- {|interrupt,turn__.NID_GettingOut.in,stop__.NID_GettingOut.in,resume__.NID_GettingOut.in|}]]
						 [[i1::interrupt <- x__ | x__ <- {|internal__.NID_i1|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__,setR_l,setR_a |} ]] 
						  [[set_d1 <- setL_d1,set_d0 <- setL_d0,clockReset.CLID_T <- clockResetL.CLID_T]]
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 			,setL_d1
						 			,setL_d0
						 			,clockResetL.CLID_T
						 			,setR_l
						 			 			,setR_a
						 			|}) |]
						 ((i1::enter -> Transitions(id__,
						 		    const_Movement_lv,
						 		    const_Movement_evadeTime,
						 		    const_Movement_stuckPeriod,
						 		    const_Movement_stuckDist,
						 		    const_Movement_outPeriod))
						  [[ share__ <- x__ | x__ <- {| share__,setL_d1,setL_d0,clockResetL.CLID_T |} ]]
						  [[set_l <- setR_l,set_a <- setR_a]]
						 )
						)[[setL_d1 <- set_d1,setL_d0 <- set_d0,clockResetL.CLID_T <- clockReset.CLID_T]]
						 [[setR_l <- set_l,setR_a <- set_a]]
						)
					)
					 \ hideSet)
					[[
						obstacle__.x____ <- obstacle,
						odometer__.x____ <- odometer,
						resume__.x____ <- resume,
						turn__.x____ <- turn,
						stop__.x____ <- stop,
						flag__.x____ <- flag
						| x____ <- NIDS
					]]
				)
				)
				 [| union(stateClockSync,{terminate}) |]
				 StateClocks(id__,
				 		          const_Movement_lv,
				 		          const_Movement_evadeTime,
				 		          const_Movement_stuckPeriod,
				 		          const_Movement_stuckDist,
				 		          const_Movement_outPeriod)
				)\diff(stateClockSync,enteredSS))
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour_VS_O(id__,
				    const_Movement_lv,
				    const_Movement_evadeTime,
				    const_Movement_stuckPeriod,
				    const_Movement_stuckDist,
				    const_Movement_outPeriod) = 
			dbisim((let
				stateClockSync = {|get_CLID_AvoidingAgain,AvoidingAgain::entered,get_CLID_Waiting,Waiting::entered,get_CLID_Avoiding,Avoiding::entered,get_CLID_Going,Going::entered,get_CLID_Found,Found::entered,get_CLID_GettingOut,GettingOut::entered,get_CLID_TryingAgain,TryingAgain::entered|}
			 within
				(MachineBody_VS_O(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod)) \ diff(union(stateClockSync,enteredSS),enteredSS)
			)
			)
		
		IteratedBehaviour_VS_O(id__,
				    const_Movement_lv,
				    const_Movement_evadeTime,
				    const_Movement_stuckPeriod,
				    const_Movement_stuckDist,
				    const_Movement_outPeriod) = 
			dbisim((let
				stateClockSync = {|get_CLID_AvoidingAgain,AvoidingAgain::entered,get_CLID_Waiting,Waiting::entered,get_CLID_Avoiding,Avoiding::entered,get_CLID_Going,Going::entered,get_CLID_Found,Found::entered,get_CLID_GettingOut,GettingOut::entered,get_CLID_TryingAgain,TryingAgain::entered|}
			 within
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										dbisim(
											sbisim(
												dbisim(
													sbisim(
														dbisim(
															sbisim(
																dbisim(
																	sbisim(
																		MachineBody_VS_O(id__,
																				    const_Movement_lv,
																				    const_Movement_evadeTime,
																				    const_Movement_stuckPeriod,
																				    const_Movement_stuckDist,
																				    const_Movement_outPeriod)
																		[| {|get_CLID_TryingAgain,TryingAgain::entered,terminate|} |]
																		dbisim(Clock_CLID_TryingAgain(id__,0,
																				          const_Movement_lv,
																				          const_Movement_evadeTime,
																				          const_Movement_stuckPeriod,
																				          const_Movement_stuckDist,
																				          const_Movement_outPeriod))
																	)\{|get_CLID_TryingAgain|}
																)
																[| {|get_CLID_GettingOut,GettingOut::entered,terminate|} |]
																dbisim(Clock_CLID_GettingOut(id__,0,
																		          const_Movement_lv,
																		          const_Movement_evadeTime,
																		          const_Movement_stuckPeriod,
																		          const_Movement_stuckDist,
																		          const_Movement_outPeriod))
															)\{|get_CLID_GettingOut|}
														)
														[| {|get_CLID_Found,Found::entered,terminate|} |]
														dbisim(Clock_CLID_Found(id__,0,
																          const_Movement_lv,
																          const_Movement_evadeTime,
																          const_Movement_stuckPeriod,
																          const_Movement_stuckDist,
																          const_Movement_outPeriod))
													)\{|get_CLID_Found|}
												)
												[| {|get_CLID_Going,Going::entered,terminate|} |]
												dbisim(Clock_CLID_Going(id__,0,
														          const_Movement_lv,
														          const_Movement_evadeTime,
														          const_Movement_stuckPeriod,
														          const_Movement_stuckDist,
														          const_Movement_outPeriod))
											)\{|get_CLID_Going|}
										)
										[| {|get_CLID_Avoiding,Avoiding::entered,terminate|} |]
										dbisim(Clock_CLID_Avoiding(id__,0,
												          const_Movement_lv,
												          const_Movement_evadeTime,
												          const_Movement_stuckPeriod,
												          const_Movement_stuckDist,
												          const_Movement_outPeriod))
									)\{|get_CLID_Avoiding|}
								)
								[| {|get_CLID_Waiting,Waiting::entered,terminate|} |]
								dbisim(Clock_CLID_Waiting(id__,0,
										          const_Movement_lv,
										          const_Movement_evadeTime,
										          const_Movement_stuckPeriod,
										          const_Movement_stuckDist,
										          const_Movement_outPeriod))
							)\{|get_CLID_Waiting|}
						)
						[| {|get_CLID_AvoidingAgain,AvoidingAgain::entered,terminate|} |]
						dbisim(Clock_CLID_AvoidingAgain(id__,0,
								          const_Movement_lv,
								          const_Movement_evadeTime,
								          const_Movement_stuckPeriod,
								          const_Movement_stuckDist,
								          const_Movement_outPeriod))
					)\{|get_CLID_AvoidingAgain|}
				)
				) \ diff(union(stateClockSync,enteredSS),enteredSS)
			)
			)
		
		Stateful_VS_O(id__,
				    const_Movement_lv,
				    const_Movement_evadeTime,
				    const_Movement_stuckPeriod,
				    const_Movement_stuckDist,
				    const_Movement_outPeriod) = 
			dbisim((let
				getsetLocalChannels = {|get_a,set_a,
				get_d0,set_d0,
				get_d1,set_d1,
				get_l,set_l|}
				clockSync = {|get_CLID_T,clockReset.CLID_T|}
			within
				(Behaviour_VS_O(id__,
						    const_Movement_lv,
						    const_Movement_evadeTime,
						    const_Movement_stuckPeriod,
						    const_Movement_stuckDist,
						    const_Movement_outPeriod) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__,
				 		    const_Movement_lv,
				 		    const_Movement_evadeTime,
				 		    const_Movement_stuckPeriod,
				 		    const_Movement_stuckDist,
				 		    const_Movement_outPeriod) [| {terminate} |] Clocks(id__,
				 		          const_Movement_lv,
				 		          const_Movement_evadeTime,
				 		          const_Movement_stuckPeriod,
				 		          const_Movement_stuckDist,
				 		          const_Movement_outPeriod))
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		IteratedStateful_VS_O(id__,
				    const_Movement_lv,
				    const_Movement_evadeTime,
				    const_Movement_stuckPeriod,
				    const_Movement_stuckDist,
				    const_Movement_outPeriod) =
			(dbisim(
				sbisim(
					dbisim(
						sbisim(
							dbisim(
								sbisim(
									dbisim(
										sbisim(
											dbisim(
												sbisim(
													IteratedBehaviour_VS_O(id__,
															    const_Movement_lv,
															    const_Movement_evadeTime,
															    const_Movement_stuckPeriod,
															    const_Movement_stuckDist,
															    const_Movement_outPeriod)
													[| {|get_CLID_T,clockReset.CLID_T,terminate|} |]
													dbisim(Clock_CLID_T(id__,0,
															          const_Movement_lv,
															          const_Movement_evadeTime,
															          const_Movement_stuckPeriod,
															          const_Movement_stuckDist,
															          const_Movement_outPeriod))
												)\{|get_CLID_T,clockReset.CLID_T|}
											)
											[| {|get_l,set_l,terminate|} |]
											Memory_l(Location_Loc_left)
										)\{|get_l,set_l|}
									)
									[| {|get_d1,set_d1,terminate|} |]
									Memory_d1(0)
								)\{|get_d1,set_d1|}
							)
							[| {|get_d0,set_d0,terminate|} |]
							Memory_d0(0)
						)\{|get_d0,set_d0|}
					)
					[| {|get_a,set_a,terminate|} |]
					Memory_a(Chemical_Angle_Left)
				)\{|get_a,set_a|}
			)
			)
		
		-- END
		
		-- Memory
		-- Memory variables
		Memory_a(a) =
			get_a!a -> Memory_a(a)
			[]
			set_a?x__ -> Memory_a(x__)
			[]
			terminate -> SKIP
		Memory_d0(d0) =
			get_d0!d0 -> Memory_d0(d0)
			[]
			set_d0?x__ -> Memory_d0(x__)
			[]
			terminate -> SKIP
		Memory_d1(d1) =
			get_d1!d1 -> Memory_d1(d1)
			[]
			set_d1?x__ -> Memory_d1(x__)
			[]
			terminate -> SKIP
		Memory_l(l) =
			get_l!l -> Memory_l(l)
			[]
			set_l?x__ -> Memory_l(x__)
			[]
			terminate -> SKIP
		
		-- varMemory process
		varMemory(id__,
				    const_Movement_lv,
				    const_Movement_evadeTime,
				    const_Movement_stuckPeriod,
				    const_Movement_stuckDist,
				    const_Movement_outPeriod) = Memory_a(Chemical_Angle_Left)
		[| { terminate } |] (
		Memory_d0(0)
		[| { terminate } |] (
		Memory_d1(0)
		[| { terminate } |] (
		Memory_l(Location_Loc_left)
		)
		)
		)
		
		getsetLocalChannels = {|get_a,set_a,get_d0,set_d0,get_d1,set_d1,get_l,set_l|}
		
		-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
		FVS__(id__,
				    const_Movement_lv,
				    const_Movement_evadeTime,
				    const_Movement_stuckPeriod,
				    const_Movement_stuckDist,
				    const_Movement_outPeriod) = STM_VS_O(id__,
				    const_Movement_lv,
				    const_Movement_evadeTime,
				    const_Movement_stuckPeriod,
				    const_Movement_stuckDist,
				    const_Movement_outPeriod) \ localClockResets
		D__(id__,
				    const_Movement_lv,
				    const_Movement_evadeTime,
				    const_Movement_stuckPeriod,
				    const_Movement_stuckDist,
				    const_Movement_outPeriod) = timed_priority(STM(id__,
				    const_Movement_lv,
				    const_Movement_evadeTime,
				    const_Movement_stuckPeriod,
				    const_Movement_stuckDist,
				    const_Movement_outPeriod) \ union(internal_events,localClockResets))
		O__(id__,
				    const_Movement_lv,
				    const_Movement_evadeTime,
				    const_Movement_stuckPeriod,
				    const_Movement_stuckDist,
				    const_Movement_outPeriod) = dbisim(D__(id__,
				    const_Movement_lv,
				    const_Movement_evadeTime,
				    const_Movement_stuckPeriod,
				    const_Movement_stuckDist,
				    const_Movement_outPeriod))
		VS__(id__,
				    const_Movement_lv,
				    const_Movement_evadeTime,
				    const_Movement_stuckPeriod,
				    const_Movement_stuckDist,
				    const_Movement_outPeriod) = FVS__(id__,
				    const_Movement_lv,
				    const_Movement_evadeTime,
				    const_Movement_stuckPeriod,
				    const_Movement_stuckDist,
				    const_Movement_outPeriod)
		VS_O__(id__,
				    const_Movement_lv,
				    const_Movement_evadeTime,
				    const_Movement_stuckPeriod,
				    const_Movement_stuckDist,
				    const_Movement_outPeriod) = dbisim(FVS__(id__,
				    const_Movement_lv,
				    const_Movement_evadeTime,
				    const_Movement_stuckPeriod,
				    const_Movement_stuckDist,
				    const_Movement_outPeriod))
		HEXT__(id__,
				    const_Movement_lv,
				    const_Movement_evadeTime,
				    const_Movement_stuckPeriod,
				    const_Movement_stuckDist,
				    const_Movement_outPeriod) = O__(id__,
				    const_Movement_lv,
				    const_Movement_evadeTime,
				    const_Movement_stuckPeriod,
				    const_Movement_stuckDist,
				    const_Movement_outPeriod) [|shared_variable_events|] SKIP
		FVS_C__(id__,
				    const_Movement_lv,
				    const_Movement_evadeTime,
				    const_Movement_stuckPeriod,
				    const_Movement_stuckDist,
				    const_Movement_outPeriod) = dbisim(timed_priority(STM(id__,
				    const_Movement_lv,
				    const_Movement_evadeTime,
				    const_Movement_stuckPeriod,
				    const_Movement_stuckDist,
				    const_Movement_outPeriod) \ internal_events))
		HUP__(id__,
				    const_Movement_lv,
				    const_Movement_evadeTime,
				    const_Movement_stuckPeriod,
				    const_Movement_stuckDist,
				    const_Movement_outPeriod) = timed_priority(O__(id__,
				    const_Movement_lv,
				    const_Movement_evadeTime,
				    const_Movement_stuckPeriod,
				    const_Movement_stuckDist,
				    const_Movement_outPeriod) [|{share__}|] SKIP)
		
		-- Clocks
		Clock_CLID_T(id__,x__,
				          const_Movement_lv,
				          const_Movement_evadeTime,
				          const_Movement_stuckPeriod,
				          const_Movement_stuckDist,
				          const_Movement_outPeriod) = 
			TimeOut_1(
				clockReset.CLID_T -> Clock_CLID_T(id__,0,
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod)
				[]
				get_CLID_T!x__ -> Clock_CLID_T(id__,x__,
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod)
				[]
				terminate -> SKIP,Clock_CLID_T(id__,clock_type_plus(x__,1,CLID_T_clock_type(id__,
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod)),
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod))
		
		Clocks(id__,
				          const_Movement_lv,
				          const_Movement_evadeTime,
				          const_Movement_stuckPeriod,
				          const_Movement_stuckDist,
				          const_Movement_outPeriod) = dbisim(Clock_CLID_T(id__,0,
				          const_Movement_lv,
				          const_Movement_evadeTime,
				          const_Movement_stuckPeriod,
				          const_Movement_stuckDist,
				          const_Movement_outPeriod))
		
		clockSync = {|get_CLID_T,clockReset.CLID_T|}
		
		Clock_CLID_AvoidingAgain(id__,x__,
				          const_Movement_lv,
				          const_Movement_evadeTime,
				          const_Movement_stuckPeriod,
				          const_Movement_stuckDist,
				          const_Movement_outPeriod) = 
			TimeOut_1(
				AvoidingAgain::entered -> Clock_CLID_AvoidingAgain(id__,0,
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod)
				[]
				get_CLID_AvoidingAgain!x__ -> Clock_CLID_AvoidingAgain(id__,x__,
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod)
				[]
				terminate -> SKIP,Clock_CLID_AvoidingAgain(id__,clock_type_plus(x__,1,CLID_AvoidingAgain_clock_type(id__,
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod)),
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod))
		Clock_CLID_Waiting(id__,x__,
				          const_Movement_lv,
				          const_Movement_evadeTime,
				          const_Movement_stuckPeriod,
				          const_Movement_stuckDist,
				          const_Movement_outPeriod) = 
			TimeOut_1(
				Waiting::entered -> Clock_CLID_Waiting(id__,0,
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod)
				[]
				get_CLID_Waiting!x__ -> Clock_CLID_Waiting(id__,x__,
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod)
				[]
				terminate -> SKIP,Clock_CLID_Waiting(id__,clock_type_plus(x__,1,CLID_Waiting_clock_type(id__,
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod)),
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod))
		Clock_CLID_Avoiding(id__,x__,
				          const_Movement_lv,
				          const_Movement_evadeTime,
				          const_Movement_stuckPeriod,
				          const_Movement_stuckDist,
				          const_Movement_outPeriod) = 
			TimeOut_1(
				Avoiding::entered -> Clock_CLID_Avoiding(id__,0,
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod)
				[]
				get_CLID_Avoiding!x__ -> Clock_CLID_Avoiding(id__,x__,
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod)
				[]
				terminate -> SKIP,Clock_CLID_Avoiding(id__,clock_type_plus(x__,1,CLID_Avoiding_clock_type(id__,
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod)),
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod))
		Clock_CLID_Going(id__,x__,
				          const_Movement_lv,
				          const_Movement_evadeTime,
				          const_Movement_stuckPeriod,
				          const_Movement_stuckDist,
				          const_Movement_outPeriod) = 
			TimeOut_1(
				Going::entered -> Clock_CLID_Going(id__,0,
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod)
				[]
				get_CLID_Going!x__ -> Clock_CLID_Going(id__,x__,
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod)
				[]
				terminate -> SKIP,Clock_CLID_Going(id__,clock_type_plus(x__,1,CLID_Going_clock_type(id__,
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod)),
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod))
		Clock_CLID_Found(id__,x__,
				          const_Movement_lv,
				          const_Movement_evadeTime,
				          const_Movement_stuckPeriod,
				          const_Movement_stuckDist,
				          const_Movement_outPeriod) = 
			TimeOut_1(
				Found::entered -> Clock_CLID_Found(id__,0,
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod)
				[]
				get_CLID_Found!x__ -> Clock_CLID_Found(id__,x__,
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod)
				[]
				terminate -> SKIP,Clock_CLID_Found(id__,clock_type_plus(x__,1,CLID_Found_clock_type(id__,
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod)),
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod))
		Clock_CLID_GettingOut(id__,x__,
				          const_Movement_lv,
				          const_Movement_evadeTime,
				          const_Movement_stuckPeriod,
				          const_Movement_stuckDist,
				          const_Movement_outPeriod) = 
			TimeOut_1(
				GettingOut::entered -> Clock_CLID_GettingOut(id__,0,
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod)
				[]
				get_CLID_GettingOut!x__ -> Clock_CLID_GettingOut(id__,x__,
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod)
				[]
				terminate -> SKIP,Clock_CLID_GettingOut(id__,clock_type_plus(x__,1,CLID_GettingOut_clock_type(id__,
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod)),
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod))
		Clock_CLID_TryingAgain(id__,x__,
				          const_Movement_lv,
				          const_Movement_evadeTime,
				          const_Movement_stuckPeriod,
				          const_Movement_stuckDist,
				          const_Movement_outPeriod) = 
			TimeOut_1(
				TryingAgain::entered -> Clock_CLID_TryingAgain(id__,0,
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod)
				[]
				get_CLID_TryingAgain!x__ -> Clock_CLID_TryingAgain(id__,x__,
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod)
				[]
				terminate -> SKIP,Clock_CLID_TryingAgain(id__,clock_type_plus(x__,1,CLID_TryingAgain_clock_type(id__,
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod)),
						          const_Movement_lv,
						          const_Movement_evadeTime,
						          const_Movement_stuckPeriod,
						          const_Movement_stuckDist,
						          const_Movement_outPeriod))
		
		StateClocks(id__,
				          const_Movement_lv,
				          const_Movement_evadeTime,
				          const_Movement_stuckPeriod,
				          const_Movement_stuckDist,
				          const_Movement_outPeriod) = dbisim(Clock_CLID_AvoidingAgain(id__,0,
				          const_Movement_lv,
				          const_Movement_evadeTime,
				          const_Movement_stuckPeriod,
				          const_Movement_stuckDist,
				          const_Movement_outPeriod))
		[| { terminate } |] (
		dbisim(Clock_CLID_Waiting(id__,0,
				          const_Movement_lv,
				          const_Movement_evadeTime,
				          const_Movement_stuckPeriod,
				          const_Movement_stuckDist,
				          const_Movement_outPeriod))
		[| { terminate } |] (
		dbisim(Clock_CLID_Avoiding(id__,0,
				          const_Movement_lv,
				          const_Movement_evadeTime,
				          const_Movement_stuckPeriod,
				          const_Movement_stuckDist,
				          const_Movement_outPeriod))
		[| { terminate } |] (
		dbisim(Clock_CLID_Going(id__,0,
				          const_Movement_lv,
				          const_Movement_evadeTime,
				          const_Movement_stuckPeriod,
				          const_Movement_stuckDist,
				          const_Movement_outPeriod))
		[| { terminate } |] (
		dbisim(Clock_CLID_Found(id__,0,
				          const_Movement_lv,
				          const_Movement_evadeTime,
				          const_Movement_stuckPeriod,
				          const_Movement_stuckDist,
				          const_Movement_outPeriod))
		[| { terminate } |] (
		dbisim(Clock_CLID_GettingOut(id__,0,
				          const_Movement_lv,
				          const_Movement_evadeTime,
				          const_Movement_stuckPeriod,
				          const_Movement_stuckDist,
				          const_Movement_outPeriod))
		[| { terminate } |] (
		dbisim(Clock_CLID_TryingAgain(id__,0,
				          const_Movement_lv,
				          const_Movement_evadeTime,
				          const_Movement_stuckPeriod,
				          const_Movement_stuckDist,
				          const_Movement_outPeriod))
		)
		)
		)
		)
		)
		)
		
		stateClockSync = {|get_CLID_AvoidingAgain,AvoidingAgain::entered,get_CLID_Waiting,Waiting::entered,get_CLID_Avoiding,Avoiding::entered,get_CLID_Going,Going::entered,get_CLID_Found,Found::entered,get_CLID_GettingOut,GettingOut::entered,get_CLID_TryingAgain,TryingAgain::entered|}
		
		-- Shared memory
		-- Shared memory variables
		
		-- sharedVarMemory process
		sharedVarMemory(id__,
				    const_Movement_lv,
				    const_Movement_evadeTime,
				    const_Movement_stuckPeriod,
				    const_Movement_stuckDist,
				    const_Movement_outPeriod) = terminate -> SKIP
		
		sharedVarSync = {||}
		
		sharedVarHide = {||}
		}
endmodule


