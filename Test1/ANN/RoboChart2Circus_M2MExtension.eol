
//******************RULES AND HELPERS NOT FROM OUR RULES*******************/


//Iterated Actions: 

//Iterated Parallel Creation, with no nameset, creates the empty set for the name set. 
operation createInterleaveIteAction(action : Z!CircusAction, declList: Z!ZDeclList) : Z!InterleaveActionIte {
  /*
  Parameters we need to set: 
	val NameSet nameSet - can ignore. 
     - Decl, List,  which is, i : 1 .. inpSize. 
     - CallAction, there is an Action, somewhere, which is, NodeIn, with l, n, i as parameters. 
 */
 
  var interleaveIteAction = new Z!InterleaveActionIte;
  
  interleaveIteAction.circusAction = action;
  interleaveIteAction.declList = declList;
  interleaveIteAction.nameSet = createEmptyNS();
  
  return interleaveIteAction;
}


//Parallel process creation methods: 
//just with a channelset itself, not a reference to a csexp.
operation createParallelAction(
	csexp : Z!ChannelSet,
	left: Z!CircusAction, 
	right: Z!CircusAction
	):Z!ParallelAction {
	
	var parAction = new Z!ParallelAction;
	parAction.channelSet = csexp;
	parAction.leftAction = left;
	parAction.rightAction = right;
	
	return parAction;
}

operation createParallelActionIte(
	csexp : Z!ChannelSet,
	action: Z!CircusAction, 
	declList: Z!ZDeclList
	):Z!ParallelActionIte {
	
	var parAction = new Z!ParallelActionIte;
	parAction.channelSet = csexp;
	parAction.declList = declList;
	parAction.circusAction = action;
	
	return parAction;
}

//Create Hide Action
operation createHideAction(csexp : Z!ChannelSet, action : Z!CircusAction) : Z!HideAction {
  var hideAction = new Z!HideAction;
  hideAction.circusAction = action;
  hideAction.channelSet = csexp;
  return hideAction;
}

//Operation to create an empty named set. 
operation createEmptyNS() : Z!CircusNameSet {
  var ns = new Z!CircusNameSet;
  ns.expr = new Z!SetExpr;
  ns.expr.exprList = new Z!ZExprList;
  
  return ns;
}


//Parameterised Actions:
operation Z!CircusAction createParamAction(declList : Z!ZDeclList) : Z!ParamAction {
  var paramAction = new Z!ParamAction;
  paramAction.declList = declList;
  paramAction.circusAction = self;
  return paramAction;
}

operation Set<Z!VarDecl> createDeclList() : Z!ZDeclList {
  var declList = new Z!ZDeclList; 
  declList.decls.addAll(self);
  return declList;
}


//Creates a VarDecl, using a reference expression to the string type, and a ZNameList formed out of the set of strings namelist. 
operation createVarDecl(nameList : Set<String>, type : String) : Z!VarDecl {
  var varDecl = new Z!VarDecl;
  varDecl.expr = type.createRefExpr(false, false);
  varDecl.nameList = createNameList(nameList);
  
  return varDecl;
}

//Create a variable declaration, where the expression is an arbritrary expression.
operation createVarDecl(nameList : Set<String>, expr : Z!Expr) : Z!VarDecl {
  var varDecl = new Z!VarDecl;
  varDecl.expr = expr;
  varDecl.nameList = createNameList(nameList);
  
  return varDecl;
}

//Always creates an output field, cannot create a sync communication. Does not take a type, 
operation createOutputCommunication(
	chan_name: String,
	expr:Z!Expr
	): Z!Communication{
	
	var commu = new Z!Communication;

	commu.commUsage = Z!CommUsage#Normal;
	commu.indexed = false;
	commu.multiSych = 0;
	commu.channelExpr = chan_name.createRefExpr(false, false);

	commu.fieldList = new Z!CircusFieldList; 
		
	
	commu.commPattern = Z!CommPattern#Output;		
	var field = new Z!DotField;
	field.expr = expr;
		
    field.outputField = true;
	
	commu.fieldList.fields = Sequence{field};
	
	return commu;
}

//Modified, so it takes an arbritrary Z Expression, for the operands, and an arbritrary string for an operator.
operation createApplExpr(operator: String, operandLeft: Z!Expr, operandRight: Z!Expr): Z!ApplExpr{
	var expr = new Z!ApplExpr;
	
	expr.mixFix = true; 

	expr.leftExpr = operator.createRefExpr(false, false);
	expr.rightExpr = Sequence{operandLeft, operandRight}.createTupleExpr();	
	return 	expr;
}

operation createUnaryApplExpr(operator: String, operand : Z!Expr): Z!ApplExpr{

	var expr = new Z!ApplExpr;
	expr.mixFix = true;
	
	expr.leftExpr = operator.createRefExpr(false,false);
	expr.rightExpr = operand;
	
	return 	expr;
}

//Expressions, created from EOL Built-in types.
operation Integer createNumExpr(): Z!NumExpr {
  var numExpr = new Z!NumExpr;
  numExpr.numeral = new Z!ZNumeral;
  numExpr.numeral.value = self;

  return numExpr;
}

operation Real createFloatExpr(): Z!RefExpr{
	var floatExpr = new Z!RefExpr;
	floatExpr.mixFix = false;
	floatExpr.explicit = false;
	floatExpr.name = new Z!ZName;
	floatExpr.name.word = self.asString();
		
	return floatExpr;
}


operation createPlusExpr(operandLeft: Z!Expr, operandRight: Z!Expr) : Z!ApplExpr {
  return createApplExpr("_+_", operandLeft, operandRight);
}

operation createMinusExpr(operandLeft: Z!Expr, operandRight: Z!Expr) : Z!ApplExpr {
  return createApplExpr("_-_", operandLeft, operandRight);
}

operation createMultExpr(operandLeft: Z!Expr, operandRight: Z!Expr) : Z!ApplExpr {
  return createApplExpr("_*_", operandLeft, operandRight);
}

operation createUpToExpr(operandLeft: Z!Expr, operandRight: Z!Expr) : Z!ApplExpr {
  return createApplExpr("_.._", operandLeft, operandRight);
}


operation createReluExpr(operator: Z!Expr) : Z!ApplExpr {
 return createUnaryApplExpr("relu", operator);
}


//Equality predicate creator rule.
operation createNumEqualityPred(left: Z!Expr, right: Integer): Z!MemPred{
	var pred =  new Z!MemPred;
	pred.leftExpr = left;
	
	pred.rightExpr = Set{right}.createNumSetExpr();
	//Equality, so mixFix = true. 
	pred.mixFix = true;
	
	return pred;
}

//General create set expression from set. 
//This creates sets of numbers. 
operation Set<Integer> createNumSetExpr(): Z!SetExpr{
	var setExpr = new Z!SetExpr;
	var exprList = new Z!ZExprList;
	var exprs = new Sequence<Z!Expr>;
	
	for(m in self){
		exprs.add(m.createNumExpr());
	}
	exprList.exprs = exprs;
	setExpr.exprList = exprList;
	return setExpr;
}

//Have a method to create AndPreds. 

//Arbritrary nesting. 

/****Predicate Methods*****/
//Pred2, left and right pred, 
operation createAndPred(left: Z!Pred, right: Z!Pred) : Z!AndPred {
  //and type is WEDGE always, not semicolon, or chain, so and attribute always = 3. 
  var andPred = new Z!AndPred;
  //andPred.and = And#WEDGE; should set this, but not sure if it matters, and cannot as and is a reserved word.
  andPred.leftPred = left;
  andPred.rightPred = right;
  
  return andPred;
  
}

//for a set of predicates, create a chain of and preds. They have to be different, each pred.
operation Sequence<Z!Pred> createSequenceAsAndPred(): Z!AndPred{
	var andPred;
	var size = self.size();
	var i = 0;
	andPred = createAndPred(self.at(0), self.at(1));
	i = i + 2;
	if(size > 2){
		while(i<size){
			andPred = createAndPred(andPred, self.at(i));
			i = i + 1;
		}
	}
	return andPred;
}

//ADDITIONAL: Rule 4, of the robochart reference manual, but as a Sequence, returned in order, not implemented as a Set.
//This returns the events in order, based on how they are defined, including when in an interface, says unordered in RoboChart EMF but still returns ordered.
operation RC!Context allEvents() : Sequence<RC!Event> {
  var selfEvents = self.events;
  var interfaceEvents = self.interfaces.collect(i | i.events);
  
  var selfEventsSeq = selfEvents.asSequence();
  
  selfEventsSeq.addAll(interfaceEvents.flatten().asSequence());
  return selfEventsSeq; 
}

//Helper rule: Neg extraction: 
operation RC!Expression negExtract() : Real {
  if(self.isTypeOf(RC!Neg)) {
    return -(self.exp.value);
  }
  else {
    return self.value;
  }
}
