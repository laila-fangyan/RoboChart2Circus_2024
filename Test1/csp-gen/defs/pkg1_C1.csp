
--
-- RoboChart generator version 3.0.0.202401231330
-- Automatically generated on 16-10-2024 08:59:07
--
-- Iterated compression status: true
-- Assertions compression status: false
--

	module pkg1_C1
		shared_variable_events = {|
		|}
		
	exports
		transparent diamond
		transparent sbisim
		transparent dbisim
		transparent chase

		-- declaring controller events
		
		
		
		-- declaring call and ret events for undefined operations
		
		-- declaring controller termination channel
		channel terminate
		
		-- channel set with all visible events
		sem__events = {|
			terminate
		|}

		-- defined operations
	
		-- declaring machines
		module stm0
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
		
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_s0|
			              NID_f0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_l, set_l, setL_l, setR_l: core_int
			channel get_a, set_a, setL_a, setR_a: core_int
			channel get_m, set_m, setL_m, setR_m: core_int
			channel get_a1, set_a1, setL_a1, setR_a1: core_int
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel stop__: NIDS.InOut
			channel stop: InOut
			channel event1__: NIDS.InOut.core_int
			channel event1: InOut.core_int
			channel event2__: NIDS.InOut.core_int
			channel event2: InOut.core_int
			channel trigger1__: NIDS.InOut.core_int
			channel trigger1: InOut.core_int
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i0::enter,
			s0::enter,
			f0::enter
			|}
			
			enteredSS = 	{|
			s0::entered,
			f0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	stop,
				event1,
				event2,
				trigger1
				|}
		
			-- Nodes --
			-- declaring all nodes
			
			----------------------------------------------------------------------
			-- Initial: i0
			module i0
			exports
			
				channel enter, interrupt
				
				D__(id__,
						    const_pkg1_C1_stm0_const1) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__,
						    const_pkg1_C1_stm0_const1) = D__(id__,
						    const_pkg1_C1_stm0_const1)
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- State: s0
			module s0
			
			enterSS = {}
			
			enteredSS = {}
			
			exports
			
				--  Declarations
				
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
								
				
				--	Nodes
				-- declaring all nodes
				
				
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_pkg1_C1_stm0_const1) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(event1.in?a1 -> (SStop /\ set_a1!a1 -> SKIP))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((share__choice(share__choice(get_l?l -> share__choice(get_a1?a1 -> true & (share__choice(set_a!Plus(Plus(a1, l, core_int), 1, core_int) -> SKIP))))) ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_pkg1_C1_stm0_const1) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(event1.in?a1 -> (SStop /\ set_a1!a1 -> SKIP))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((share__choice(share__choice(get_l?l -> share__choice(get_a1?a1 -> true & (share__choice(set_a!Plus(Plus(a1, l, core_int), 1, core_int) -> SKIP))))) ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- Final state: f0
			module f0
			
			exports
			
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
				--	Rule: behaviours(Node)
				D__(id__,
						    const_pkg1_C1_stm0_const1) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
						
						Entering 	= entered -> SKIP ; Active
						Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
						Interrupted	= share__choice(exit -> exited -> Inactive)
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_pkg1_C1_stm0_const1) = D__(id__,
						    const_pkg1_C1_stm0_const1)
			
			endmodule
			----------------------------------------------------------------------
			
			-- END of Nodes --
			
			-- Operation calls --
			-- Only the undefined operations are declared here.
			-- If the state machine is in isolation, all required operations will be undefined.
			-- If it is in the context of a controller, the required operations not provided by the
			-- controller will be declared here, and the defined operations will be defined in the
			-- context of the Controller module, and therefore within scope of the state machine module.
			
			-- END of Operation calls --
			
			-- STM processes
			STM(id__,
					    const_pkg1_C1_stm0_const1) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
			( 
				(
					(
						(IteratedStateful(id__,
								    const_pkg1_C1_stm0_const1) \ {terminate} ; share__choice(terminate -> SKIP))
					 	[[ share__ <- x__ | x__ <- {||} ]]
					)
				[| {share__} |]
				SKIP
				)
				[| union(sharedVarSync,{terminate}) |]
				dbisim(sharedVarMemory(id__,
						    const_pkg1_C1_stm0_const1))
			)\sharedVarHide
			
			STM_VS_O(id__,
					    const_pkg1_C1_stm0_const1) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
			( 
				(
					(
						(IteratedStateful_VS_O(id__,
								    const_pkg1_C1_stm0_const1) \ {terminate} ; share__choice(terminate -> SKIP))
					 	[[ share__ <- x__ | x__ <- {||} ]]
					)
				[| {share__} |]
				SKIP
				)
				[| union(sharedVarSync,{terminate}) |]
				dbisim(sharedVarMemory(id__,
						    const_pkg1_C1_stm0_const1))
			)\sharedVarHide
			
			-- Transitions
			Transitions(id__,
					    const_pkg1_C1_stm0_const1) = ((let
				Trans = share__choice(get_a?a -> (
					((share__ -> SKIP
					 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s0::enter -> SKIP))))
					 	 [] dbisim((event1__!NID_s0.in?a1:{a1|a1 <- core_int, (a>4)} -> share__choice(set_a1!a1 -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; f0::enter -> SKIP)))
					 	 [] dbisim((true)&(event2__!NID_s0.in?a:{a|a <- core_int, true} -> share__choice(set_a!a -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(get_a1?a1 -> true&(share__choice(trigger1.out!a1 -> SKIP))) ; s0::enter -> SKIP)))
					 ) ; Trans)
					 []
					 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
					 []
					 terminate -> SKIP
				)
				)
			within
				Trans
			)
			)
			
			-- Stateful
			-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
			
			-- Named process definitions
			MachineBody(id__,
					    const_pkg1_C1_stm0_const1) = 
				dbisim((
				let
					finalNodesEntered = {|f0::entered|}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i0::enter,
						s0::enter,
						f0::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_i0,event1__.NID_s0.in,event2__.NID_s0.in|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i0::D__(id__,
							   		    const_pkg1_C1_stm0_const1)
							   [| { share__, terminate } |] (
							   s0::D__(id__,
							   		    const_pkg1_C1_stm0_const1)
							   [| { share__, terminate } |] (
							   f0::D__(id__,
							   		    const_pkg1_C1_stm0_const1)
							   )
							   )
							 )
							 [[s0::interrupt <- x__ | x__ <- {|interrupt,event1__.NID_s0.in,event2__.NID_s0.in|}]]
							 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__,setR_a1,setR_a |} ]] 
							  [[set_a <- setL_a]]
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 			,setL_a
							 			,setR_a1
							 			 			,setR_a
							 			|}) |]
							 ((i0::enter -> Transitions(id__,
							 		    const_pkg1_C1_stm0_const1))
							  [[ share__ <- x__ | x__ <- {| share__,setL_a |} ]]
							  [[set_a1 <- setR_a1,set_a <- setR_a]]
							 )
							)[[setL_a <- set_a]]
							 [[setR_a1 <- set_a1,setR_a <- set_a]]
							)
						)
						 \ hideSet)
						[[
							stop__.x____ <- stop,
							event1__.x____ <- event1,
							event2__.x____ <- event2,
							trigger1__.x____ <- trigger1
							| x____ <- NIDS
						]]
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour(id__,
					    const_pkg1_C1_stm0_const1) = 
				dbisim((MachineBody(id__,
						    const_pkg1_C1_stm0_const1)\ enteredSS)
				)
			
			IteratedBehaviour(id__,
					    const_pkg1_C1_stm0_const1) = 
				dbisim((MachineBody(id__,
						    const_pkg1_C1_stm0_const1)\ enteredSS)
				)
			
			Stateful(id__,
					    const_pkg1_C1_stm0_const1) = 
				((
					(Behaviour(id__,
							    const_pkg1_C1_stm0_const1) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
							    const_pkg1_C1_stm0_const1))
				 	\getsetLocalChannels
				)
				)
			
			IteratedStateful(id__,
					    const_pkg1_C1_stm0_const1) =
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										dbisim(
											sbisim(
												Behaviour(id__,
														    const_pkg1_C1_stm0_const1)
												[| {|get_a1,set_a1,terminate|} |]
												Memory_a1(0)
											)\{|get_a1,set_a1|}
										)
										[| {|get_m,set_m,terminate|} |]
										Memory_m(0)
									)\{|get_m,set_m|}
								)
								[| {|get_a,set_a,terminate|} |]
								Memory_a(0)
							)\{|get_a,set_a|}
						)
						[| {|get_l,set_l,terminate|} |]
						Memory_l(0)
					)\{|get_l,set_l|}
				)
				)
			
			-- Visible counterparts
			MachineBody_VS_O(id__,
					    const_pkg1_C1_stm0_const1) = 
				dbisim((
				let
					finalNodesEntered = {|f0::entered|}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i0::enter,
						s0::enter,
						f0::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_i0,event1__.NID_s0.in,event2__.NID_s0.in|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i0::VS_O__(id__,
							   		    const_pkg1_C1_stm0_const1)
							   [| { share__, terminate } |] (
							   s0::VS_O__(id__,
							   		    const_pkg1_C1_stm0_const1)
							   [| { share__, terminate } |] (
							   f0::VS_O__(id__,
							   		    const_pkg1_C1_stm0_const1)
							   )
							   )
							 )
							 [[s0::interrupt <- x__ | x__ <- {|interrupt,event1__.NID_s0.in,event2__.NID_s0.in|}]]
							 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__,setR_a1,setR_a |} ]] 
							  [[set_a <- setL_a]]
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 			,setL_a
							 			,setR_a1
							 			 			,setR_a
							 			|}) |]
							 ((i0::enter -> Transitions(id__,
							 		    const_pkg1_C1_stm0_const1))
							  [[ share__ <- x__ | x__ <- {| share__,setL_a |} ]]
							  [[set_a1 <- setR_a1,set_a <- setR_a]]
							 )
							)[[setL_a <- set_a]]
							 [[setR_a1 <- set_a1,setR_a <- set_a]]
							)
						)
						 \ hideSet)
						[[
							stop__.x____ <- stop,
							event1__.x____ <- event1,
							event2__.x____ <- event2,
							trigger1__.x____ <- trigger1
							| x____ <- NIDS
						]]
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour_VS_O(id__,
					    const_pkg1_C1_stm0_const1) = 
				dbisim((MachineBody_VS_O(id__,
						    const_pkg1_C1_stm0_const1))
				)
			
			IteratedBehaviour_VS_O(id__,
					    const_pkg1_C1_stm0_const1) = 
				dbisim((MachineBody_VS_O(id__,
						    const_pkg1_C1_stm0_const1))
				)
			
			Stateful_VS_O(id__,
					    const_pkg1_C1_stm0_const1) = 
				dbisim((
					(Behaviour_VS_O(id__,
							    const_pkg1_C1_stm0_const1) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
							    const_pkg1_C1_stm0_const1))
				 	\getsetLocalChannels
				)
				)
			
			IteratedStateful_VS_O(id__,
					    const_pkg1_C1_stm0_const1) =
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										dbisim(
											sbisim(
												Behaviour_VS_O(id__,
														    const_pkg1_C1_stm0_const1)
												[| {|get_a1,set_a1,terminate|} |]
												Memory_a1(0)
											)\{|get_a1,set_a1|}
										)
										[| {|get_m,set_m,terminate|} |]
										Memory_m(0)
									)\{|get_m,set_m|}
								)
								[| {|get_a,set_a,terminate|} |]
								Memory_a(0)
							)\{|get_a,set_a|}
						)
						[| {|get_l,set_l,terminate|} |]
						Memory_l(0)
					)\{|get_l,set_l|}
				)
				)
			
			-- END
			
			-- Memory
			-- Memory variables
			Memory_l(l) =
				get_l!l -> Memory_l(l)
				[]
				set_l?x__ -> Memory_l(x__)
				[]
				terminate -> SKIP
			Memory_a(a) =
				get_a!a -> Memory_a(a)
				[]
				set_a?x__ -> Memory_a(x__)
				[]
				terminate -> SKIP
			Memory_m(m) =
				get_m!m -> Memory_m(m)
				[]
				set_m?x__ -> Memory_m(x__)
				[]
				terminate -> SKIP
			Memory_a1(a1) =
				get_a1!a1 -> Memory_a1(a1)
				[]
				set_a1?x__ -> Memory_a1(x__)
				[]
				terminate -> SKIP
			
			-- varMemory process
			varMemory(id__,
					    const_pkg1_C1_stm0_const1) = Memory_l(0)
			[| { terminate } |] (
			Memory_a(0)
			[| { terminate } |] (
			Memory_m(0)
			[| { terminate } |] (
			Memory_a1(0)
			)
			)
			)
			
			getsetLocalChannels = {|get_l,set_l,get_a,set_a,get_m,set_m,get_a1,set_a1|}
			
			-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
			FVS__(id__,
					    const_pkg1_C1_stm0_const1) = STM_VS_O(id__,
					    const_pkg1_C1_stm0_const1)
			
			D__(id__,
					    const_pkg1_C1_stm0_const1) = STM(id__,
					    const_pkg1_C1_stm0_const1) \ internal_events
			O__(id__,
					    const_pkg1_C1_stm0_const1) = sbisim(diamond(D__(id__,
					    const_pkg1_C1_stm0_const1)))
			VS__(id__,
					    const_pkg1_C1_stm0_const1) = FVS__(id__,
					    const_pkg1_C1_stm0_const1)
			VS_O__(id__,
					    const_pkg1_C1_stm0_const1) = sbisim(diamond(FVS__(id__,
					    const_pkg1_C1_stm0_const1)))
			HEXT__(id__,
					    const_pkg1_C1_stm0_const1) = O__(id__,
					    const_pkg1_C1_stm0_const1) [|shared_variable_events|] SKIP
			HUP__(id__,
					    const_pkg1_C1_stm0_const1) = O__(id__,
					    const_pkg1_C1_stm0_const1) [|{share__}|] SKIP
			
			-- Shared memory
			-- Shared memory variables
			
			-- sharedVarMemory process
			sharedVarMemory(id__,
					    const_pkg1_C1_stm0_const1) = terminate -> SKIP
			
			sharedVarSync = {||}
			
			sharedVarHide = {||}
		endmodule
		
			-- undefined operations
			
			-- declaring controller memory
			Memory(id__) = SKIP
			
			D__(id__,
					    const_pkg1_C1_stm0_const1) = 	((
					stm0::D__(id__,
							    const_pkg1_C1_stm0_const1)[[
						stm0::terminate <- terminate
					]]
					\ {|
						stm0::stop,
						stm0::event1,
						stm0::event2,
						stm0::trigger1
					|}
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				Memory(id__)
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
			
			-- VS version
			VS__(id__,
					    const_pkg1_C1_stm0_const1) = 	((
					stm0::VS__(id__,
							    const_pkg1_C1_stm0_const1)[[
						stm0::terminate <- terminate
					]]
					\ {|
						stm0::stop,
						stm0::event1,
						stm0::event2,
						stm0::trigger1
					|}
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				Memory(id__)
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
		
			-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
			O__(id__,
					    const_pkg1_C1_stm0_const1) = sbisim(diamond(	((
					stm0::O__(id__,
							    const_pkg1_C1_stm0_const1)[[
						stm0::terminate <- terminate
					]]
					\ {|
						stm0::stop,
						stm0::event1,
						stm0::event2,
						stm0::trigger1
					|}
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				dbisim(Memory(id__))
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
			))
							
			-- VS_O version
			VS_O__(id__,
					    const_pkg1_C1_stm0_const1) = sbisim(diamond(	((
					stm0::VS_O__(id__,
							    const_pkg1_C1_stm0_const1)[[
						stm0::terminate <- terminate
					]]
					\ {|
						stm0::stop,
						stm0::event1,
						stm0::event2,
						stm0::trigger1
					|}
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				dbisim(Memory(id__))
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
			))
		
			HEXT(id__,
					    const_pkg1_C1_stm0_const1) = O__(id__,
					    const_pkg1_C1_stm0_const1) [|shared_variable_events|] SKIP			

	endmodule
