
--
-- RoboChart generator version 3.0.0.202401231330
-- Automatically generated on 01-05-2025 09:52:22
--
-- Iterated compression status: true
-- Assertions compression status: false
--

module Chemical_GasAnalysis_stm
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_i1|
	              NID_GasDetected|
	              NID_j1|
	              NID_Reading|
	              NID_Analysis|
	              NID_NoGas
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_sts, set_sts, setL_sts, setR_sts: Chemical_Status
	channel get_gs, set_gs, setL_gs, setR_gs: LSeq(Chemical_GasSensor,2)
	channel get_ins, set_ins, setL_ins, setR_ins: Chemical_Intensity
	channel get_anl, set_anl, setL_anl, setR_anl: Chemical_Angle
	
	-- Shared variable channels
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	channel gas__: NIDS.InOut.LSeq(Chemical_GasSensor,2)
	channel gas: InOut.LSeq(Chemical_GasSensor,2)
	channel resume__: NIDS.InOut
	channel resume: InOut
	channel turn__: NIDS.InOut.Chemical_Angle
	channel turn: InOut.Chemical_Angle
	channel stop__: NIDS.InOut
	channel stop: InOut
	
	-- Declaring call and ret events for undefined operations
	
	enterSS = {|
	i1::enter,
	GasDetected::enter,
	j1::enter,
	Reading::enter,
	Analysis::enter,
	NoGas::enter
	|}
	
	enteredSS = 	{|
	GasDetected::entered,
	j1::entered,
	Reading::entered,
	Analysis::entered,
	NoGas::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
	,	gas,
		resume,
		turn,
		stop
		|}

	-- Nodes --
	-- declaring all nodes
	
	----------------------------------------------------------------------
	-- Initial: i1
	module i1
	exports
	
		channel enter, interrupt
		
		D__(id__,
				    const_Chemical_GasAnalysis_stm_thr) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
		
		VS_O__(id__,
				    const_Chemical_GasAnalysis_stm_thr) = D__(id__,
				    const_Chemical_GasAnalysis_stm_thr)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: GasDetected
	module GasDetected
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__,
				    const_Chemical_GasAnalysis_stm_thr) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= share__choice(share__choice(get_gs?gs -> pre_Chemical_intensity(gs) & (share__choice(set_ins!Chemical_intensity(gs) -> SKIP)))) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
				    const_Chemical_GasAnalysis_stm_thr) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= share__choice(share__choice(get_gs?gs -> pre_Chemical_intensity(gs) & (share__choice(set_ins!Chemical_intensity(gs) -> SKIP)))) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- Final state: j1
	module j1
	
	exports
	
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
		--	Rule: behaviours(Node)
		D__(id__,
				    const_Chemical_GasAnalysis_stm_thr) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
				
				Entering 	= entered -> SKIP ; Active
				Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
				Interrupted	= share__choice(exit -> exited -> Inactive)
			within
				Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
				    const_Chemical_GasAnalysis_stm_thr) = D__(id__,
				    const_Chemical_GasAnalysis_stm_thr)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: Reading
	module Reading
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__,
				    const_Chemical_GasAnalysis_stm_thr) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
				    const_Chemical_GasAnalysis_stm_thr) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: Analysis
	module Analysis
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__,
				    const_Chemical_GasAnalysis_stm_thr) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((share__choice(share__choice(get_gs?gs -> pre_Chemical_analysis(gs) & (share__choice(set_sts!Chemical_analysis(gs) -> SKIP)))) ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
				    const_Chemical_GasAnalysis_stm_thr) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((share__choice(share__choice(get_gs?gs -> pre_Chemical_analysis(gs) & (share__choice(set_sts!Chemical_analysis(gs) -> SKIP)))) ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: NoGas
	module NoGas
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__,
				    const_Chemical_GasAnalysis_stm_thr) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
				    const_Chemical_GasAnalysis_stm_thr) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	-- END of Nodes --
	
	-- Operation calls --
	-- Only the undefined operations are declared here.
	-- If the state machine is in isolation, all required operations will be undefined.
	-- If it is in the context of a controller, the required operations not provided by the
	-- controller will be declared here, and the defined operations will be defined in the
	-- context of the Controller module, and therefore within scope of the state machine module.
	
	-- END of Operation calls --
	
	-- STM processes
	STM(id__,
			    const_Chemical_GasAnalysis_stm_thr) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
	( 
		(
			(
				(IteratedStateful(id__,
						    const_Chemical_GasAnalysis_stm_thr) \ {terminate} ; share__choice(terminate -> SKIP))
			 	[[ share__ <- x__ | x__ <- {||} ]]
			)
		[| {share__} |]
		SKIP
		)
		[| union(sharedVarSync,{terminate}) |]
		dbisim(sharedVarMemory(id__,
				    const_Chemical_GasAnalysis_stm_thr))
	)\sharedVarHide
	
	STM_VS_O(id__,
			    const_Chemical_GasAnalysis_stm_thr) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
	( 
		(
			(
				(IteratedStateful_VS_O(id__,
						    const_Chemical_GasAnalysis_stm_thr) \ {terminate} ; share__choice(terminate -> SKIP))
			 	[[ share__ <- x__ | x__ <- {||} ]]
			)
		[| {share__} |]
		SKIP
		)
		[| union(sharedVarSync,{terminate}) |]
		dbisim(sharedVarMemory(id__,
				    const_Chemical_GasAnalysis_stm_thr))
	)\sharedVarHide
	
	-- Transitions
	Transitions(id__,
			    const_Chemical_GasAnalysis_stm_thr) = ((let
		Trans = share__choice(get_ins?ins -> get_sts?sts -> (
			((share__ -> SKIP
			 [] dbisim((true)&(internal__!NID_i1 -> SKIP ;  ((share__choice(true & (share__choice(set_gs!<> -> SKIP)));share__choice(true & (share__choice(set_anl!Chemical_Angle_Front -> SKIP))) ; Reading::enter -> SKIP))))
			 	 [] dbisim((true)&(gas__!NID_Reading.in?gs:{gs|gs <- LSeq(Chemical_GasSensor,2), true} -> share__choice(set_gs!gs -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Analysis::enter -> SKIP)))
			 	 [] dbisim((true)&(internal__!NID_NoGas -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Reading::enter -> SKIP)))
			 	 [] dbisim(((sts==Chemical_Status_noGas))&(internal__!NID_Analysis -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(resume.out -> SKIP)) ; NoGas::enter -> SKIP)))
			 	 [] dbisim(((sts==Chemical_Status_gasD))&(internal__!NID_Analysis -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; GasDetected::enter -> SKIP)))
			 	 [] dbisim((Chemical_goreq(ins,const_Chemical_GasAnalysis_stm_thr))&(internal__!NID_GasDetected -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(stop.out -> SKIP)) ; j1::enter -> SKIP)))
			 	 [] dbisim(((not (Chemical_goreq(ins,const_Chemical_GasAnalysis_stm_thr))))&(internal__!NID_GasDetected -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(share__choice(get_gs?gs -> pre_Chemical_location(gs) & (share__choice(set_anl!Chemical_location(gs) -> SKIP))));share__choice(get_anl?anl -> true&(share__choice(turn.out!anl -> SKIP))) ; Reading::enter -> SKIP)))
			 ) ; Trans)
			 []
			 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
			 []
			 terminate -> SKIP
		)
		)
	within
		Trans
	)
	)
	
	-- Stateful
	-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
	
	-- Named process definitions
	MachineBody(id__,
			    const_Chemical_GasAnalysis_stm_thr) = 
		dbisim((
		let
			finalNodesEntered = {|j1::entered|}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				i1::enter,
				GasDetected::enter,
				j1::enter,
				Reading::enter,
				Analysis::enter,
				NoGas::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_i1,gas__.NID_Reading.in,internal__.NID_NoGas,internal__.NID_Analysis,internal__.NID_Analysis,internal__.NID_GasDetected,internal__.NID_GasDetected|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   i1::D__(id__,
					   		    const_Chemical_GasAnalysis_stm_thr)
					   [| { share__, terminate } |] (
					   GasDetected::D__(id__,
					   		    const_Chemical_GasAnalysis_stm_thr)
					   [| { share__, terminate } |] (
					   j1::D__(id__,
					   		    const_Chemical_GasAnalysis_stm_thr)
					   [| { share__, terminate } |] (
					   Reading::D__(id__,
					   		    const_Chemical_GasAnalysis_stm_thr)
					   [| { share__, terminate } |] (
					   Analysis::D__(id__,
					   		    const_Chemical_GasAnalysis_stm_thr)
					   [| { share__, terminate } |] (
					   NoGas::D__(id__,
					   		    const_Chemical_GasAnalysis_stm_thr)
					   )
					   )
					   )
					   )
					   )
					 )
					 [[GasDetected::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_GasDetected,internal__.NID_GasDetected|}]]
					 [[j1::interrupt <- x__ | x__ <- {|interrupt|}]]
					 [[Reading::interrupt <- x__ | x__ <- {|interrupt,gas__.NID_Reading.in|}]]
					 [[Analysis::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Analysis,internal__.NID_Analysis|}]]
					 [[NoGas::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_NoGas|}]]
					 [[i1::interrupt <- x__ | x__ <- {|internal__.NID_i1|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__,setR_gs |} ]] 
					  [[set_ins <- setL_ins,set_sts <- setL_sts]]
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					 			,setL_ins
					 			,setL_sts
					 			,setR_gs
					 			|}) |]
					 ((i1::enter -> Transitions(id__,
					 		    const_Chemical_GasAnalysis_stm_thr))
					  [[ share__ <- x__ | x__ <- {| share__,setL_ins,setL_sts |} ]]
					  [[set_gs <- setR_gs]]
					 )
					)[[setL_ins <- set_ins,setL_sts <- set_sts]]
					 [[setR_gs <- set_gs]]
					)
				)
				 \ hideSet)
				[[
					gas__.x____ <- gas,
					resume__.x____ <- resume,
					turn__.x____ <- turn,
					stop__.x____ <- stop
					| x____ <- NIDS
				]]
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour(id__,
			    const_Chemical_GasAnalysis_stm_thr) = 
		dbisim((MachineBody(id__,
				    const_Chemical_GasAnalysis_stm_thr)\ enteredSS)
		)
	
	IteratedBehaviour(id__,
			    const_Chemical_GasAnalysis_stm_thr) = 
		dbisim((MachineBody(id__,
				    const_Chemical_GasAnalysis_stm_thr)\ enteredSS)
		)
	
	Stateful(id__,
			    const_Chemical_GasAnalysis_stm_thr) = 
		((
			(Behaviour(id__,
					    const_Chemical_GasAnalysis_stm_thr) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
					    const_Chemical_GasAnalysis_stm_thr))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful(id__,
			    const_Chemical_GasAnalysis_stm_thr) =
		(dbisim(
			sbisim(
				dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										Behaviour(id__,
												    const_Chemical_GasAnalysis_stm_thr)
										[| {|get_anl,set_anl,terminate|} |]
										Memory_anl(Chemical_Angle_Front)
									)\{|get_anl,set_anl|}
								)
								[| {|get_ins,set_ins,terminate|} |]
								Memory_ins(0)
							)\{|get_ins,set_ins|}
						)
						[| {|get_gs,set_gs,terminate|} |]
						Memory_gs(<>)
					)\{|get_gs,set_gs|}
				)
				[| {|get_sts,set_sts,terminate|} |]
				Memory_sts(Chemical_Status_noGas)
			)\{|get_sts,set_sts|}
		)
		)
	
	-- Visible counterparts
	MachineBody_VS_O(id__,
			    const_Chemical_GasAnalysis_stm_thr) = 
		dbisim((
		let
			finalNodesEntered = {|j1::entered|}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				i1::enter,
				GasDetected::enter,
				j1::enter,
				Reading::enter,
				Analysis::enter,
				NoGas::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_i1,gas__.NID_Reading.in,internal__.NID_NoGas,internal__.NID_Analysis,internal__.NID_Analysis,internal__.NID_GasDetected,internal__.NID_GasDetected|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   i1::VS_O__(id__,
					   		    const_Chemical_GasAnalysis_stm_thr)
					   [| { share__, terminate } |] (
					   GasDetected::VS_O__(id__,
					   		    const_Chemical_GasAnalysis_stm_thr)
					   [| { share__, terminate } |] (
					   j1::VS_O__(id__,
					   		    const_Chemical_GasAnalysis_stm_thr)
					   [| { share__, terminate } |] (
					   Reading::VS_O__(id__,
					   		    const_Chemical_GasAnalysis_stm_thr)
					   [| { share__, terminate } |] (
					   Analysis::VS_O__(id__,
					   		    const_Chemical_GasAnalysis_stm_thr)
					   [| { share__, terminate } |] (
					   NoGas::VS_O__(id__,
					   		    const_Chemical_GasAnalysis_stm_thr)
					   )
					   )
					   )
					   )
					   )
					 )
					 [[GasDetected::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_GasDetected,internal__.NID_GasDetected|}]]
					 [[j1::interrupt <- x__ | x__ <- {|interrupt|}]]
					 [[Reading::interrupt <- x__ | x__ <- {|interrupt,gas__.NID_Reading.in|}]]
					 [[Analysis::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Analysis,internal__.NID_Analysis|}]]
					 [[NoGas::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_NoGas|}]]
					 [[i1::interrupt <- x__ | x__ <- {|internal__.NID_i1|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__,setR_gs |} ]] 
					  [[set_ins <- setL_ins,set_sts <- setL_sts]]
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					 			,setL_ins
					 			,setL_sts
					 			,setR_gs
					 			|}) |]
					 ((i1::enter -> Transitions(id__,
					 		    const_Chemical_GasAnalysis_stm_thr))
					  [[ share__ <- x__ | x__ <- {| share__,setL_ins,setL_sts |} ]]
					  [[set_gs <- setR_gs]]
					 )
					)[[setL_ins <- set_ins,setL_sts <- set_sts]]
					 [[setR_gs <- set_gs]]
					)
				)
				 \ hideSet)
				[[
					gas__.x____ <- gas,
					resume__.x____ <- resume,
					turn__.x____ <- turn,
					stop__.x____ <- stop
					| x____ <- NIDS
				]]
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour_VS_O(id__,
			    const_Chemical_GasAnalysis_stm_thr) = 
		dbisim((MachineBody_VS_O(id__,
				    const_Chemical_GasAnalysis_stm_thr))
		)
	
	IteratedBehaviour_VS_O(id__,
			    const_Chemical_GasAnalysis_stm_thr) = 
		dbisim((MachineBody_VS_O(id__,
				    const_Chemical_GasAnalysis_stm_thr))
		)
	
	Stateful_VS_O(id__,
			    const_Chemical_GasAnalysis_stm_thr) = 
		dbisim((
			(Behaviour_VS_O(id__,
					    const_Chemical_GasAnalysis_stm_thr) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
					    const_Chemical_GasAnalysis_stm_thr))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful_VS_O(id__,
			    const_Chemical_GasAnalysis_stm_thr) =
		(dbisim(
			sbisim(
				dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										Behaviour_VS_O(id__,
												    const_Chemical_GasAnalysis_stm_thr)
										[| {|get_anl,set_anl,terminate|} |]
										Memory_anl(Chemical_Angle_Front)
									)\{|get_anl,set_anl|}
								)
								[| {|get_ins,set_ins,terminate|} |]
								Memory_ins(0)
							)\{|get_ins,set_ins|}
						)
						[| {|get_gs,set_gs,terminate|} |]
						Memory_gs(<>)
					)\{|get_gs,set_gs|}
				)
				[| {|get_sts,set_sts,terminate|} |]
				Memory_sts(Chemical_Status_noGas)
			)\{|get_sts,set_sts|}
		)
		)
	
	-- END
	
	-- Memory
	-- Memory variables
	Memory_sts(sts) =
		get_sts!sts -> Memory_sts(sts)
		[]
		set_sts?x__ -> Memory_sts(x__)
		[]
		terminate -> SKIP
	Memory_gs(gs) =
		get_gs!gs -> Memory_gs(gs)
		[]
		set_gs?x__ -> Memory_gs(x__)
		[]
		terminate -> SKIP
	Memory_ins(ins) =
		get_ins!ins -> Memory_ins(ins)
		[]
		set_ins?x__ -> Memory_ins(x__)
		[]
		terminate -> SKIP
	Memory_anl(anl) =
		get_anl!anl -> Memory_anl(anl)
		[]
		set_anl?x__ -> Memory_anl(x__)
		[]
		terminate -> SKIP
	
	-- varMemory process
	varMemory(id__,
			    const_Chemical_GasAnalysis_stm_thr) = Memory_sts(Chemical_Status_noGas)
	[| { terminate } |] (
	Memory_gs(<>)
	[| { terminate } |] (
	Memory_ins(0)
	[| { terminate } |] (
	Memory_anl(Chemical_Angle_Front)
	)
	)
	)
	
	getsetLocalChannels = {|get_sts,set_sts,get_gs,set_gs,get_ins,set_ins,get_anl,set_anl|}
	
	-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
	FVS__(id__,
			    const_Chemical_GasAnalysis_stm_thr) = STM_VS_O(id__,
			    const_Chemical_GasAnalysis_stm_thr)
	
	D__(id__,
			    const_Chemical_GasAnalysis_stm_thr) = STM(id__,
			    const_Chemical_GasAnalysis_stm_thr) \ internal_events
	O__(id__,
			    const_Chemical_GasAnalysis_stm_thr) = sbisim(diamond(D__(id__,
			    const_Chemical_GasAnalysis_stm_thr)))
	VS__(id__,
			    const_Chemical_GasAnalysis_stm_thr) = FVS__(id__,
			    const_Chemical_GasAnalysis_stm_thr)
	VS_O__(id__,
			    const_Chemical_GasAnalysis_stm_thr) = sbisim(diamond(FVS__(id__,
			    const_Chemical_GasAnalysis_stm_thr)))
	HEXT__(id__,
			    const_Chemical_GasAnalysis_stm_thr) = O__(id__,
			    const_Chemical_GasAnalysis_stm_thr) [|shared_variable_events|] SKIP
	HUP__(id__,
			    const_Chemical_GasAnalysis_stm_thr) = O__(id__,
			    const_Chemical_GasAnalysis_stm_thr) [|{share__}|] SKIP
	
	-- Shared memory
	-- Shared memory variables
	
	-- sharedVarMemory process
	sharedVarMemory(id__,
			    const_Chemical_GasAnalysis_stm_thr) = terminate -> SKIP
	
	sharedVarSync = {||}
	
	sharedVarHide = {||}
endmodule
