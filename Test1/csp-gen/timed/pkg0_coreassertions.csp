
--
-- RoboChart generator version 3.0.0.202401231330
-- Automatically generated on 16-10-2024 16:09:50
--
-- Iterated compression status: true
-- Assertions compression status: false
--

include "pkg0.csp"


-- generate pkg0_OP_move1
P_pkg0_OP_move1 = let
	id__ = 0
	
	param_m = 0
	
	
	
within
	pkg0::OP_move1::O__(id__,
				param_m)
assert P_pkg0_OP_move1 :[deadlock-free]	
assert P_pkg0_OP_move1;RUN({r__}) :[deadlock-free]
assert P_pkg0_OP_move1 :[deterministic]
assert P_pkg0_OP_move1 :[divergence-free]
-- timed deadlock free
assert prioritise(P_pkg0_OP_move1[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_pkg0_OP_move1
-- generate pkg0_OP_move4
P_pkg0_OP_move4 = let
	id__ = 0
	
	
	
	
within
	pkg0::OP_move4::O__(id__)
assert P_pkg0_OP_move4 :[deadlock-free]	
assert P_pkg0_OP_move4;RUN({r__}) :[deadlock-free]
assert P_pkg0_OP_move4 :[deterministic]
assert P_pkg0_OP_move4 :[divergence-free]
-- timed deadlock free
assert prioritise(P_pkg0_OP_move4[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_pkg0_OP_move4
-- generate pkg0_OP_move2
P_pkg0_OP_move2 = let
	id__ = 0
	
	param_lv = 0
	param_a = 0
	
	
	
within
	pkg0::OP_move2::O__(id__,
				param_lv,
				param_a)
assert P_pkg0_OP_move2 :[deadlock-free]	
assert P_pkg0_OP_move2;RUN({r__}) :[deadlock-free]
assert P_pkg0_OP_move2 :[deterministic]
assert P_pkg0_OP_move2 :[divergence-free]
-- timed deadlock free
assert prioritise(P_pkg0_OP_move2[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_pkg0_OP_move2


-- generate pkg0_M
P_pkg0_M = let
	id__ = 0
	
	
	
	const_pkg0_M_C1_stm0_c6 = 8
	const_pkg0_M_C1_stm1_c6 = 8
	const_pkg0_M_C1_stm1_c1 = const_pkg0_M_C1_stm0_c1
		
	
within
	pkg0::M::O__(id__,
			    const_pkg0_M_P1_c2,
			    const_pkg0_M_P1_c3,
			    const_pkg0_M_C1_stm0_c6,
			    const_pkg0_M_C1_stm0_c1,
			    const_pkg0_M_C1_stm1_c6,
			    const_pkg0_M_C1_stm1_c1)
assert P_pkg0_M :[deadlock-free]	
assert P_pkg0_M;RUN({r__}) :[deadlock-free]
assert P_pkg0_M :[deterministic]
assert P_pkg0_M :[divergence-free]

-- generate pkg0_M_C1
P_pkg0_M_C1 = let
	id__ = 0
	
	
	
	const_pkg0_M_C1_stm0_c6 = 8
	const_pkg0_M_C1_stm1_c6 = 8
	const_pkg0_M_C1_stm1_c1 = const_pkg0_M_C1_stm0_c1
		
within
	pkg0::M::C1::O__(id__,
			    const_pkg0_M_C1_c2,
			    const_pkg0_M_C1_c3,
			    const_pkg0_M_C1_stm0_c6,
			    const_pkg0_M_C1_stm0_c1,
			    const_pkg0_M_C1_stm1_c6,
			    const_pkg0_M_C1_stm1_c1)

assert P_pkg0_M_C1 :[deadlock-free]	
assert P_pkg0_M_C1;RUN({r__}) :[deadlock-free]
assert P_pkg0_M_C1 :[deterministic]
assert P_pkg0_M_C1 :[divergence-free]

-- generate pkg0_M_C1_stm0
P_pkg0_M_C1_stm0 = let
	id__ = 0
	
	const_pkg0_M_C1_stm0_c2 = 0
	const_pkg0_M_C1_stm0_c3 = 0
	
	const_pkg0_M_C1_stm0_c6 = 8
	
within
	pkg0::M::C1::stm0::O__(
		id__,
		const_pkg0_M_C1_stm0_c2,
		const_pkg0_M_C1_stm0_c3,
		const_pkg0_M_C1_stm0_c6,
		const_pkg0_M_C1_stm0_c1
	)
assert P_pkg0_M_C1_stm0 :[deadlock-free]	
assert P_pkg0_M_C1_stm0;RUN({r__}) :[deadlock-free]
assert P_pkg0_M_C1_stm0 :[deterministic]
assert P_pkg0_M_C1_stm0 :[divergence-free]
-- timed deadlock free
assert prioritise(P_pkg0_M_C1_stm0[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_pkg0_M_C1_stm0
-- generate pkg0_M_C1_stm1
P_pkg0_M_C1_stm1 = let
	id__ = 0
	
	const_pkg0_M_C1_stm0_c2 = 0
	const_pkg0_M_C1_stm0_c3 = 0
	
	const_pkg0_M_C1_stm0_c6 = 8
	
within
	pkg0::M::C1::stm1::O__(
		id__,
		const_pkg0_M_C1_stm0_c2,
		const_pkg0_M_C1_stm0_c3,
		const_pkg0_M_C1_stm0_c6,
		const_pkg0_M_C1_stm0_c1
	)
assert P_pkg0_M_C1_stm1 :[deadlock-free]	
assert P_pkg0_M_C1_stm1;RUN({r__}) :[deadlock-free]
assert P_pkg0_M_C1_stm1 :[deterministic]
assert P_pkg0_M_C1_stm1 :[divergence-free]
-- timed deadlock free
assert prioritise(P_pkg0_M_C1_stm1[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_pkg0_M_C1_stm1
-- timed deadlock free
assert prioritise(P_pkg0_M_C1[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_pkg0_M_C1
-- timed deadlock free
assert prioritise(P_pkg0_M[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_pkg0_M
