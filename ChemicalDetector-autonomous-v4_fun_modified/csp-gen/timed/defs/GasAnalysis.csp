
--
-- RoboChart generator version 3.0.0.202401231330
-- Automatically generated on 01-05-2025 09:52:11
--
-- Iterated compression status: true
-- Assertions compression status: false
--

module GasAnalysis
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_i1|
	              NID_NoGas|
	              NID_Analysis|
	              NID_GasDetected|
	              NID_j1|
	              NID_Reading
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_st, set_st, setL_st, setR_st: Chemical_Status
	channel get_gs, set_gs, setL_gs, setR_gs: LSeq(Chemical_GasSensor,2)
	channel get_i, set_i, setL_i, setR_i: Chemical_Intensity
	channel get_a, set_a, setL_a, setR_a: Chemical_Angle
	
	-- Shared variable channels
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	channel gas__: NIDS.InOut.LSeq(Chemical_GasSensor,2)
	channel gas: InOut.LSeq(Chemical_GasSensor,2)
	channel resume__: NIDS.InOut
	channel resume: InOut
	channel turn__: NIDS.InOut.Chemical_Angle
	channel turn: InOut.Chemical_Angle
	channel stop__: NIDS.InOut
	channel stop: InOut
	
	-- Declaring call and ret events for undefined operations
	
	enterSS = {|
	i1::enter,
	NoGas::enter,
	Analysis::enter,
	GasDetected::enter,
	j1::enter,
	Reading::enter
	|}
	
	enteredSS = 	{|
	NoGas::entered,
	Analysis::entered,
	GasDetected::entered,
	j1::entered,
	Reading::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
	,	gas,
		resume,
		turn,
		stop
		|}
	
	channel clockReset, clockResetL, clockResetR 
	
	localClockResets = {||}
	
	
	channel get_CLID_Analysis : core_clock_type 
	channel get_CLID_NoGas : core_clock_type 
	channel get_CLID_GasDetected : core_clock_type 
	channel get_CLID_Reading : core_clock_type 
	channel get_CLID_j1 : core_clock_type 
	--channel increment__
	
	CLID_Analysis_clock_type(id__,
			          const_GasAnalysis_thr) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_NoGas_clock_type(id__,
			          const_GasAnalysis_thr) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_GasDetected_clock_type(id__,
			          const_GasAnalysis_thr) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_Reading_clock_type(id__,
			          const_GasAnalysis_thr) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_j1_clock_type(id__,
			          const_GasAnalysis_thr) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	

		-- Nodes --
		-- declaring all nodes
		
		----------------------------------------------------------------------
		-- Initial: i1
		module i1
		exports
		
			channel enter, interrupt
			
			Timed(OneStep) {
				D__(id__,
						    const_GasAnalysis_thr) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__,
						    const_GasAnalysis_thr) = D__(id__,
						    const_GasAnalysis_thr)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: NoGas
		module NoGas
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_GasAnalysis_thr) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_GasAnalysis_thr) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_GasAnalysis_thr) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: Analysis
		module Analysis
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_GasAnalysis_thr) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(share__choice(get_gs?gs -> true & (share__choice(set_st!Chemical_analysis(gs) -> SKIP)))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_GasAnalysis_thr) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(share__choice(get_gs?gs -> true & (share__choice(set_st!Chemical_analysis(gs) -> SKIP)))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_GasAnalysis_thr) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: GasDetected
		module GasDetected
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_GasAnalysis_thr) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(share__choice(get_gs?gs -> true & (share__choice(set_i!Chemical_intensity(gs) -> SKIP)))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_GasAnalysis_thr) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(share__choice(get_gs?gs -> true & (share__choice(set_i!Chemical_intensity(gs) -> SKIP)))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_GasAnalysis_thr) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- Final state: j1
		module j1
		
		exports
		
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				D__(id__,
						    const_GasAnalysis_thr) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
						
						Entering 	= entered -> SKIP ; Active
						Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
						Interrupted	= share__choice(exit -> exited -> Inactive)
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_GasAnalysis_thr) = D__(id__,
						    const_GasAnalysis_thr)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: Reading
		module Reading
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_GasAnalysis_thr) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_GasAnalysis_thr) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_GasAnalysis_thr) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		-- END of Nodes --
		
		Timed(OneStep) {
		-- Operation calls --
		-- Only the undefined operations are declared here.
		-- If the state machine is in isolation, all required operations will be undefined.
		-- If it is in the context of a controller, the required operations not provided by the
		-- controller will be declared here, and the defined operations will be defined in the
		-- context of the Controller module, and therefore within scope of the state machine module.
		
		-- END of Operation calls --
	
		-- STM processes
		STM(id__,
				    const_GasAnalysis_thr) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
		( 
			(
				(
					(IteratedStateful(id__,
							    const_GasAnalysis_thr) \ {terminate} ; share__choice(terminate -> SKIP))
				 	[[ share__ <- x__ | x__ <- {||} ]]
				)
			[| {share__} |]
			SKIP
			)
			[| union(sharedVarSync,{terminate}) |]
			dbisim(sharedVarMemory(id__,
					    const_GasAnalysis_thr))
		)\sharedVarHide
		
		STM_VS_O(id__,
				    const_GasAnalysis_thr) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
		( 
			(
				(
					(IteratedStateful_VS_O(id__,
							    const_GasAnalysis_thr) \ {terminate} ; share__choice(terminate -> SKIP))
				 	[[ share__ <- x__ | x__ <- {||} ]]
				)
			[| {share__} |]
			SKIP
			)
			[| union(sharedVarSync,{terminate}) |]
			dbisim(sharedVarMemory(id__,
					    const_GasAnalysis_thr))
		)\sharedVarHide
		
		-- Transitions
		Transitions(id__,
				    const_GasAnalysis_thr) = ((let
			Trans = share__choice(get_st?st -> get_i?i -> TimeOut_1(
				 (share__ -> SKIP
				 [] dbisim((true)&(internal__!NID_i1 -> SKIP ;  ((SKIP ; NoGas::enter -> SKIP))))
				 [] dbisim((true)&(gas__!NID_NoGas.in?gs:{gs|gs <- LSeq(Chemical_GasSensor,2), true} -> share__choice(set_gs!gs -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Analysis::enter -> SKIP)))
				 [] dbisim(((st==Chemical_Status_noGas))&(internal__!NID_Analysis -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(resume.out -> SKIP)) ; NoGas::enter -> SKIP)))
				 [] dbisim(((st==Chemical_Status_gasD))&(internal__!NID_Analysis -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; GasDetected::enter -> SKIP)))
				 [] dbisim((Chemical_goreq(i,const_GasAnalysis_thr))&(internal__!NID_GasDetected -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(stop.out -> SKIP)) ; j1::enter -> SKIP)))
				 [] dbisim(((not (Chemical_goreq(i,const_GasAnalysis_thr))))&(internal__!NID_GasDetected -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(share__choice(get_gs?gs -> true & (share__choice(set_a!Chemical_location(gs) -> SKIP))));share__choice(get_a?a -> true&(share__choice(turn.out!a -> SKIP))) ; Reading::enter -> SKIP)))
				 [] dbisim((true)&(gas__!NID_Reading.in?gs:{gs|gs <- LSeq(Chemical_GasSensor,2), true} -> share__choice(set_gs!gs -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Analysis::enter -> SKIP)))
				 []
				 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
				 []
				 terminate -> SKIP
				 )
			,SKIP);Trans
			)
		within
			Trans [|{terminate}|> SKIP
		)
		)
		
		-- Stateful
		-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
		
		-- Named process definitions
		MachineBody(id__,
				    const_GasAnalysis_thr) = 
			dbisim((
			let
				finalNodesEntered = {|j1::entered|}
			within
				(dbisim((dbisim((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					i1::enter,
					NoGas::enter,
					Analysis::enter,
					GasDetected::enter,
					j1::enter,
					Reading::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited,interrupt|})
						transSync = {|internal__.NID_i1,gas__.NID_NoGas.in,internal__.NID_Analysis,internal__.NID_Analysis,internal__.NID_GasDetected,internal__.NID_GasDetected,gas__.NID_Reading.in|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   i1::D__(id__,
						   		    const_GasAnalysis_thr)
						   [| { share__, terminate } |] (
						   NoGas::D__(id__,
						   		    const_GasAnalysis_thr)
						   [| { share__, terminate } |] (
						   Analysis::D__(id__,
						   		    const_GasAnalysis_thr)
						   [| { share__, terminate } |] (
						   GasDetected::D__(id__,
						   		    const_GasAnalysis_thr)
						   [| { share__, terminate } |] (
						   j1::D__(id__,
						   		    const_GasAnalysis_thr)
						   [| { share__, terminate } |] (
						   Reading::D__(id__,
						   		    const_GasAnalysis_thr)
						   )
						   )
						   )
						   )
						   )
						 )
						 [[NoGas::interrupt <- x__ | x__ <- {|interrupt,gas__.NID_NoGas.in|}]]
						 [[Analysis::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Analysis,internal__.NID_Analysis|}]]
						 [[GasDetected::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_GasDetected,internal__.NID_GasDetected|}]]
						 [[j1::interrupt <- x__ | x__ <- {|interrupt|}]]
						 [[Reading::interrupt <- x__ | x__ <- {|interrupt,gas__.NID_Reading.in|}]]
						 [[i1::interrupt <- x__ | x__ <- {|internal__.NID_i1|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__,setR_gs |} ]] 
						  [[set_st <- setL_st,set_i <- setL_i]]
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 			,setL_st
						 			,setL_i
						 			,setR_gs
						 			|}) |]
						 ((i1::enter -> Transitions(id__,
						 		    const_GasAnalysis_thr))
						  [[ share__ <- x__ | x__ <- {| share__,setL_st,setL_i |} ]]
						  [[set_gs <- setR_gs]]
						 )
						)[[setL_st <- set_st,setL_i <- set_i]]
						 [[setR_gs <- set_gs]]
						)
					)
					 \ hideSet)
					[[
						gas__.x____ <- gas,
						resume__.x____ <- resume,
						turn__.x____ <- turn,
						stop__.x____ <- stop
						| x____ <- NIDS
					]]
				)
				)
				 [| union(stateClockSync,{terminate}) |]
				 StateClocks(id__,
				 		          const_GasAnalysis_thr)
				)\diff(stateClockSync,enteredSS))
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour(id__,
				    const_GasAnalysis_thr) = 
			dbisim((let
				stateClockSync = {|get_CLID_Analysis,Analysis::entered,get_CLID_NoGas,NoGas::entered,get_CLID_GasDetected,GasDetected::entered,get_CLID_Reading,Reading::entered|}
			 within
				(MachineBody(id__,
						    const_GasAnalysis_thr) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
						          const_GasAnalysis_thr)) \ union(stateClockSync,enteredSS)
			)
			)
		
		IteratedBehaviour(id__,
				    const_GasAnalysis_thr) = 
			dbisim((let
				stateClockSync = {|get_CLID_Analysis,Analysis::entered,get_CLID_NoGas,NoGas::entered,get_CLID_GasDetected,GasDetected::entered,get_CLID_Reading,Reading::entered|}
			 within
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										dbisim(
											sbisim(
												MachineBody(id__,
														    const_GasAnalysis_thr)
												[| {|get_CLID_Reading,Reading::entered,terminate|} |]
												dbisim(Clock_CLID_Reading(id__,0,
														          const_GasAnalysis_thr))
											)\{|get_CLID_Reading|}
										)
										[| {|get_CLID_GasDetected,GasDetected::entered,terminate|} |]
										dbisim(Clock_CLID_GasDetected(id__,0,
												          const_GasAnalysis_thr))
									)\{|get_CLID_GasDetected|}
								)
								[| {|get_CLID_NoGas,NoGas::entered,terminate|} |]
								dbisim(Clock_CLID_NoGas(id__,0,
										          const_GasAnalysis_thr))
							)\{|get_CLID_NoGas|}
						)
						[| {|get_CLID_Analysis,Analysis::entered,terminate|} |]
						dbisim(Clock_CLID_Analysis(id__,0,
								          const_GasAnalysis_thr))
					)\{|get_CLID_Analysis|}
				)
				) \ union(stateClockSync,enteredSS)
			)
			)
		
		Stateful(id__,
				    const_GasAnalysis_thr) = 
			((let
				getsetLocalChannels = {|get_st,set_st,
				get_gs,set_gs,
				get_i,set_i,
				get_a,set_a|}
				clockSync = {||}
			within
				(Behaviour(id__,
						    const_GasAnalysis_thr) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__,
				 		    const_GasAnalysis_thr) [| {terminate} |] Clocks(id__,
				 		          const_GasAnalysis_thr))
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		IteratedStateful(id__,
				    const_GasAnalysis_thr) =
			(dbisim(
				sbisim(
					dbisim(
						sbisim(
							dbisim(
								sbisim(
									dbisim(
										sbisim(
											IteratedBehaviour(id__,
													    const_GasAnalysis_thr)
											[| {|get_a,set_a,terminate|} |]
											Memory_a(Chemical_Angle_Left)
										)\{|get_a,set_a|}
									)
									[| {|get_i,set_i,terminate|} |]
									Memory_i(0)
								)\{|get_i,set_i|}
							)
							[| {|get_gs,set_gs,terminate|} |]
							Memory_gs(<>)
						)\{|get_gs,set_gs|}
					)
					[| {|get_st,set_st,terminate|} |]
					Memory_st(Chemical_Status_noGas)
				)\{|get_st,set_st|}
			)
			)
		
		-- Visible counterparts
		MachineBody_VS_O(id__,
				    const_GasAnalysis_thr) = 
			dbisim((
			let
				finalNodesEntered = {|j1::entered|}
			within
				(dbisim((dbisim((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					i1::enter,
					NoGas::enter,
					Analysis::enter,
					GasDetected::enter,
					j1::enter,
					Reading::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited,interrupt|})
						transSync = {|internal__.NID_i1,gas__.NID_NoGas.in,internal__.NID_Analysis,internal__.NID_Analysis,internal__.NID_GasDetected,internal__.NID_GasDetected,gas__.NID_Reading.in|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   i1::VS_O__(id__,
						   		    const_GasAnalysis_thr)
						   [| { share__, terminate } |] (
						   NoGas::VS_O__(id__,
						   		    const_GasAnalysis_thr)
						   [| { share__, terminate } |] (
						   Analysis::VS_O__(id__,
						   		    const_GasAnalysis_thr)
						   [| { share__, terminate } |] (
						   GasDetected::VS_O__(id__,
						   		    const_GasAnalysis_thr)
						   [| { share__, terminate } |] (
						   j1::VS_O__(id__,
						   		    const_GasAnalysis_thr)
						   [| { share__, terminate } |] (
						   Reading::VS_O__(id__,
						   		    const_GasAnalysis_thr)
						   )
						   )
						   )
						   )
						   )
						 )
						 [[NoGas::interrupt <- x__ | x__ <- {|interrupt,gas__.NID_NoGas.in|}]]
						 [[Analysis::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Analysis,internal__.NID_Analysis|}]]
						 [[GasDetected::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_GasDetected,internal__.NID_GasDetected|}]]
						 [[j1::interrupt <- x__ | x__ <- {|interrupt|}]]
						 [[Reading::interrupt <- x__ | x__ <- {|interrupt,gas__.NID_Reading.in|}]]
						 [[i1::interrupt <- x__ | x__ <- {|internal__.NID_i1|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__,setR_gs |} ]] 
						  [[set_st <- setL_st,set_i <- setL_i]]
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 			,setL_st
						 			,setL_i
						 			,setR_gs
						 			|}) |]
						 ((i1::enter -> Transitions(id__,
						 		    const_GasAnalysis_thr))
						  [[ share__ <- x__ | x__ <- {| share__,setL_st,setL_i |} ]]
						  [[set_gs <- setR_gs]]
						 )
						)[[setL_st <- set_st,setL_i <- set_i]]
						 [[setR_gs <- set_gs]]
						)
					)
					 \ hideSet)
					[[
						gas__.x____ <- gas,
						resume__.x____ <- resume,
						turn__.x____ <- turn,
						stop__.x____ <- stop
						| x____ <- NIDS
					]]
				)
				)
				 [| union(stateClockSync,{terminate}) |]
				 StateClocks(id__,
				 		          const_GasAnalysis_thr)
				)\diff(stateClockSync,enteredSS))
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour_VS_O(id__,
				    const_GasAnalysis_thr) = 
			dbisim((let
				stateClockSync = {|get_CLID_Analysis,Analysis::entered,get_CLID_NoGas,NoGas::entered,get_CLID_GasDetected,GasDetected::entered,get_CLID_Reading,Reading::entered|}
			 within
				(MachineBody_VS_O(id__,
						    const_GasAnalysis_thr) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
						          const_GasAnalysis_thr)) \ diff(union(stateClockSync,enteredSS),enteredSS)
			)
			)
		
		IteratedBehaviour_VS_O(id__,
				    const_GasAnalysis_thr) = 
			dbisim((let
				stateClockSync = {|get_CLID_Analysis,Analysis::entered,get_CLID_NoGas,NoGas::entered,get_CLID_GasDetected,GasDetected::entered,get_CLID_Reading,Reading::entered|}
			 within
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										dbisim(
											sbisim(
												MachineBody_VS_O(id__,
														    const_GasAnalysis_thr)
												[| {|get_CLID_Reading,Reading::entered,terminate|} |]
												dbisim(Clock_CLID_Reading(id__,0,
														          const_GasAnalysis_thr))
											)\{|get_CLID_Reading|}
										)
										[| {|get_CLID_GasDetected,GasDetected::entered,terminate|} |]
										dbisim(Clock_CLID_GasDetected(id__,0,
												          const_GasAnalysis_thr))
									)\{|get_CLID_GasDetected|}
								)
								[| {|get_CLID_NoGas,NoGas::entered,terminate|} |]
								dbisim(Clock_CLID_NoGas(id__,0,
										          const_GasAnalysis_thr))
							)\{|get_CLID_NoGas|}
						)
						[| {|get_CLID_Analysis,Analysis::entered,terminate|} |]
						dbisim(Clock_CLID_Analysis(id__,0,
								          const_GasAnalysis_thr))
					)\{|get_CLID_Analysis|}
				)
				) \ diff(union(stateClockSync,enteredSS),enteredSS)
			)
			)
		
		Stateful_VS_O(id__,
				    const_GasAnalysis_thr) = 
			dbisim((let
				getsetLocalChannels = {|get_st,set_st,
				get_gs,set_gs,
				get_i,set_i,
				get_a,set_a|}
				clockSync = {||}
			within
				(Behaviour_VS_O(id__,
						    const_GasAnalysis_thr) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__,
				 		    const_GasAnalysis_thr) [| {terminate} |] Clocks(id__,
				 		          const_GasAnalysis_thr))
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		IteratedStateful_VS_O(id__,
				    const_GasAnalysis_thr) =
			(dbisim(
				sbisim(
					dbisim(
						sbisim(
							dbisim(
								sbisim(
									dbisim(
										sbisim(
											IteratedBehaviour_VS_O(id__,
													    const_GasAnalysis_thr)
											[| {|get_a,set_a,terminate|} |]
											Memory_a(Chemical_Angle_Left)
										)\{|get_a,set_a|}
									)
									[| {|get_i,set_i,terminate|} |]
									Memory_i(0)
								)\{|get_i,set_i|}
							)
							[| {|get_gs,set_gs,terminate|} |]
							Memory_gs(<>)
						)\{|get_gs,set_gs|}
					)
					[| {|get_st,set_st,terminate|} |]
					Memory_st(Chemical_Status_noGas)
				)\{|get_st,set_st|}
			)
			)
		
		-- END
		
		-- Memory
		-- Memory variables
		Memory_st(st) =
			get_st!st -> Memory_st(st)
			[]
			set_st?x__ -> Memory_st(x__)
			[]
			terminate -> SKIP
		Memory_gs(gs) =
			get_gs!gs -> Memory_gs(gs)
			[]
			set_gs?x__ -> Memory_gs(x__)
			[]
			terminate -> SKIP
		Memory_i(i) =
			get_i!i -> Memory_i(i)
			[]
			set_i?x__ -> Memory_i(x__)
			[]
			terminate -> SKIP
		Memory_a(a) =
			get_a!a -> Memory_a(a)
			[]
			set_a?x__ -> Memory_a(x__)
			[]
			terminate -> SKIP
		
		-- varMemory process
		varMemory(id__,
				    const_GasAnalysis_thr) = Memory_st(Chemical_Status_noGas)
		[| { terminate } |] (
		Memory_gs(<>)
		[| { terminate } |] (
		Memory_i(0)
		[| { terminate } |] (
		Memory_a(Chemical_Angle_Left)
		)
		)
		)
		
		getsetLocalChannels = {|get_st,set_st,get_gs,set_gs,get_i,set_i,get_a,set_a|}
		
		-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
		FVS__(id__,
				    const_GasAnalysis_thr) = STM_VS_O(id__,
				    const_GasAnalysis_thr) \ localClockResets
		D__(id__,
				    const_GasAnalysis_thr) = timed_priority(STM(id__,
				    const_GasAnalysis_thr) \ union(internal_events,localClockResets))
		O__(id__,
				    const_GasAnalysis_thr) = dbisim(D__(id__,
				    const_GasAnalysis_thr))
		VS__(id__,
				    const_GasAnalysis_thr) = FVS__(id__,
				    const_GasAnalysis_thr)
		VS_O__(id__,
				    const_GasAnalysis_thr) = dbisim(FVS__(id__,
				    const_GasAnalysis_thr))
		HEXT__(id__,
				    const_GasAnalysis_thr) = O__(id__,
				    const_GasAnalysis_thr) [|shared_variable_events|] SKIP
		FVS_C__(id__,
				    const_GasAnalysis_thr) = dbisim(timed_priority(STM(id__,
				    const_GasAnalysis_thr) \ internal_events))
		HUP__(id__,
				    const_GasAnalysis_thr) = timed_priority(O__(id__,
				    const_GasAnalysis_thr) [|{share__}|] SKIP)
		
		-- Clocks
		
		Clocks(id__,
				          const_GasAnalysis_thr) = terminate -> SKIP
		
		clockSync = {||}
		
		Clock_CLID_Analysis(id__,x__,
				          const_GasAnalysis_thr) = 
			TimeOut_1(
				Analysis::entered -> Clock_CLID_Analysis(id__,0,
						          const_GasAnalysis_thr)
				[]
				get_CLID_Analysis!x__ -> Clock_CLID_Analysis(id__,x__,
						          const_GasAnalysis_thr)
				[]
				terminate -> SKIP,Clock_CLID_Analysis(id__,clock_type_plus(x__,1,CLID_Analysis_clock_type(id__,
						          const_GasAnalysis_thr)),
						          const_GasAnalysis_thr))
		Clock_CLID_NoGas(id__,x__,
				          const_GasAnalysis_thr) = 
			TimeOut_1(
				NoGas::entered -> Clock_CLID_NoGas(id__,0,
						          const_GasAnalysis_thr)
				[]
				get_CLID_NoGas!x__ -> Clock_CLID_NoGas(id__,x__,
						          const_GasAnalysis_thr)
				[]
				terminate -> SKIP,Clock_CLID_NoGas(id__,clock_type_plus(x__,1,CLID_NoGas_clock_type(id__,
						          const_GasAnalysis_thr)),
						          const_GasAnalysis_thr))
		Clock_CLID_GasDetected(id__,x__,
				          const_GasAnalysis_thr) = 
			TimeOut_1(
				GasDetected::entered -> Clock_CLID_GasDetected(id__,0,
						          const_GasAnalysis_thr)
				[]
				get_CLID_GasDetected!x__ -> Clock_CLID_GasDetected(id__,x__,
						          const_GasAnalysis_thr)
				[]
				terminate -> SKIP,Clock_CLID_GasDetected(id__,clock_type_plus(x__,1,CLID_GasDetected_clock_type(id__,
						          const_GasAnalysis_thr)),
						          const_GasAnalysis_thr))
		Clock_CLID_Reading(id__,x__,
				          const_GasAnalysis_thr) = 
			TimeOut_1(
				Reading::entered -> Clock_CLID_Reading(id__,0,
						          const_GasAnalysis_thr)
				[]
				get_CLID_Reading!x__ -> Clock_CLID_Reading(id__,x__,
						          const_GasAnalysis_thr)
				[]
				terminate -> SKIP,Clock_CLID_Reading(id__,clock_type_plus(x__,1,CLID_Reading_clock_type(id__,
						          const_GasAnalysis_thr)),
						          const_GasAnalysis_thr))
		
		StateClocks(id__,
				          const_GasAnalysis_thr) = dbisim(Clock_CLID_Analysis(id__,0,
				          const_GasAnalysis_thr))
		[| { terminate } |] (
		dbisim(Clock_CLID_NoGas(id__,0,
				          const_GasAnalysis_thr))
		[| { terminate } |] (
		dbisim(Clock_CLID_GasDetected(id__,0,
				          const_GasAnalysis_thr))
		[| { terminate } |] (
		dbisim(Clock_CLID_Reading(id__,0,
				          const_GasAnalysis_thr))
		)
		)
		)
		
		stateClockSync = {|get_CLID_Analysis,Analysis::entered,get_CLID_NoGas,NoGas::entered,get_CLID_GasDetected,GasDetected::entered,get_CLID_Reading,Reading::entered|}
		
		-- Shared memory
		-- Shared memory variables
		
		-- sharedVarMemory process
		sharedVarMemory(id__,
				    const_GasAnalysis_thr) = terminate -> SKIP
		
		sharedVarSync = {||}
		
		sharedVarHide = {||}
		}
endmodule
