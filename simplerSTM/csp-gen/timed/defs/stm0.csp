
--
-- RoboChart generator version 3.0.0.202401231330
-- Automatically generated on 06-05-2024 11:20:30
--
-- Iterated compression status: true
-- Assertions compression status: false
--

module stm0
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_i0|
	              NID_s0|
	              NID_s1|
	              NID_s2|
	              NID_f0|
	              NID_s3|
	              NID_s4|
	              NID_j0
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_input, set_input, setL_input, setR_input: core_int
	channel get_input2, set_input2, setL_input2, setR_input2: core_int
	channel get_b1, set_b1, setL_b1, setR_b1: core_boolean
	channel get_b2, set_b2, setL_b2, setR_b2: core_boolean
	channel get_input3, set_input3, setL_input3, setR_input3: core_int
	channel get_input4, set_input4, setL_input4, setR_input4: core_int
	
	-- Shared variable channels
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	channel stop__: NIDS.InOut
	channel stop: InOut
	channel status__: NIDS.InOut.core_int
	channel status: InOut.core_int
	channel trigger1__: NIDS.InOut
	channel trigger1: InOut
	channel trigger2__: NIDS.InOut.core_int
	channel trigger2: InOut.core_int
	channel trigger3__: NIDS.InOut.core_int
	channel trigger3: InOut.core_int
	
	-- Declaring call and ret events for undefined operations
	channel moveCall: core_real.core_int
	channel move2Call: core_real.core_int
	
	enterSS = {|
	i0::enter,
	s0::enter,
	s1::enter,
	s2::enter,
	f0::enter,
	s3::enter,
	s4::enter,
	j0::enter
	|}
	
	enteredSS = 	{|
	s0::entered,
	s1::entered,
	s2::entered,
	f0::entered,
	s3::entered,
	s4::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
	,	stop,
		status,
		trigger1,
		trigger2,
		trigger3
	,	moveCall,
		move2Call
		|}
	
	channel clockReset, clockResetL, clockResetR 
	
	localClockResets = {||}
	
	
	channel get_CLID_s2 : core_clock_type 
	channel get_CLID_s1 : core_clock_type 
	channel get_CLID_s3 : core_clock_type 
	channel get_CLID_s4 : core_clock_type 
	channel get_CLID_s0 : core_clock_type 
	channel get_CLID_f0 : core_clock_type 
	--channel increment__
	
	CLID_s2_clock_type(id__,
			          const_stm0_delta,
			          const_stm0_Thr) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_s1_clock_type(id__,
			          const_stm0_delta,
			          const_stm0_Thr) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_s3_clock_type(id__,
			          const_stm0_delta,
			          const_stm0_Thr) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_s4_clock_type(id__,
			          const_stm0_delta,
			          const_stm0_Thr) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_s0_clock_type(id__,
			          const_stm0_delta,
			          const_stm0_Thr) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_f0_clock_type(id__,
			          const_stm0_delta,
			          const_stm0_Thr) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	

		-- Nodes --
		-- declaring all nodes
		
		----------------------------------------------------------------------
		-- Initial: i0
		module i0
		exports
		
			channel enter, interrupt
			
			Timed(OneStep) {
				D__(id__,
						    const_stm0_delta,
						    const_stm0_Thr) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__,
						    const_stm0_delta,
						    const_stm0_Thr) = D__(id__,
						    const_stm0_delta,
						    const_stm0_Thr)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: s0
		module s0
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_stm0_delta,
						    const_stm0_Thr) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(true & (share__choice(set_input!2 -> SKIP)));true&(share__choice(trigger2.out!6 -> SKIP)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; true&(share__choice(trigger2.out!6 -> SKIP)) ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_stm0_delta,
						    const_stm0_Thr) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(true & (share__choice(set_input!2 -> SKIP)));true&(share__choice(trigger2.out!6 -> SKIP)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; true&(share__choice(trigger2.out!6 -> SKIP)) ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_stm0_delta,
						          const_stm0_Thr) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: s1
		module s1
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_stm0_delta,
						    const_stm0_Thr) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(status.in?input -> (SStop /\ set_input!input -> SKIP))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; true&(share__choice(status.out.3 -> SKIP)) ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((share__choice(get_input?input -> true&(share__choice(status.out!input -> SKIP))) ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_stm0_delta,
						    const_stm0_Thr) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(status.in?input -> (SStop /\ set_input!input -> SKIP))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; true&(share__choice(status.out.3 -> SKIP)) ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((share__choice(get_input?input -> true&(share__choice(status.out!input -> SKIP))) ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_stm0_delta,
						          const_stm0_Thr) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: s2
		module s2
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_stm0_delta,
						    const_stm0_Thr) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(get_input?input -> true&CALL__move(
								id__,
							    const_stm0_delta,
							    const_stm0_Thr,
								0,
								input
							)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; true&CALL__move2(
							 	  			id__,
							 	  		    const_stm0_delta,
							 	  		    const_stm0_Thr,
							 	  			3,
							 	  			1
							 	  		) ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((share__choice(get_b1?b1 -> true&(if b1 then (share__choice(share__choice(get_input?input -> share__choice(get_input4?input4 -> true & (share__choice(set_input!Mult(input4, (Plus(2, input, core_int)), core_int) -> SKIP)))))) else (true&(share__choice(stop.out -> SKIP))))) ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_stm0_delta,
						    const_stm0_Thr) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(get_input?input -> true&CALL__move(
								id__,
							    const_stm0_delta,
							    const_stm0_Thr,
								0,
								input
							)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; true&CALL__move2(
							 	  			id__,
							 	  		    const_stm0_delta,
							 	  		    const_stm0_Thr,
							 	  			3,
							 	  			1
							 	  		) ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((share__choice(get_b1?b1 -> true&(if b1 then (share__choice(share__choice(get_input?input -> share__choice(get_input4?input4 -> true & (share__choice(set_input!Mult(input4, (Plus(2, input, core_int)), core_int) -> SKIP)))))) else (true&(share__choice(stop.out -> SKIP))))) ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_stm0_delta,
						          const_stm0_Thr) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- Final state: f0
		module f0
		
		exports
		
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				D__(id__,
						    const_stm0_delta,
						    const_stm0_Thr) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
						
						Entering 	= entered -> SKIP ; Active
						Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
						Interrupted	= share__choice(exit -> exited -> Inactive)
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_stm0_delta,
						    const_stm0_Thr) = D__(id__,
						    const_stm0_delta,
						    const_stm0_Thr)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: s3
		module s3
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_stm0_delta,
						    const_stm0_Thr) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(share__choice(get_input2?input2 -> share__choice(get_input3?input3 -> true & (share__choice(set_input!Mult((Plus(3, input2, core_int)), input3, core_int) -> SKIP))))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; share__choice(get_input?input -> true&(share__choice(status.out.input -> SKIP))) ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((true&(share__choice(stop.out -> SKIP)) ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_stm0_delta,
						    const_stm0_Thr) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(share__choice(get_input2?input2 -> share__choice(get_input3?input3 -> true & (share__choice(set_input!Mult((Plus(3, input2, core_int)), input3, core_int) -> SKIP))))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; share__choice(get_input?input -> true&(share__choice(status.out.input -> SKIP))) ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((true&(share__choice(stop.out -> SKIP)) ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_stm0_delta,
						          const_stm0_Thr) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: s4
		module s4
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_stm0_delta,
						    const_stm0_Thr) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(share__choice(get_input2?input2 -> true & (share__choice(set_input!input2 -> SKIP))));share__choice(get_input?input -> share__choice(get_input4?input4 -> true&(share__choice(trigger2.out!(Plus(Mult(input4, input, core_int), 4, core_int)) -> SKIP)))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((share__choice(true & (share__choice(set_input!Minus(4, 1, core_int) -> SKIP))) ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_stm0_delta,
						    const_stm0_Thr) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(share__choice(get_input2?input2 -> true & (share__choice(set_input!input2 -> SKIP))));share__choice(get_input?input -> share__choice(get_input4?input4 -> true&(share__choice(trigger2.out!(Plus(Mult(input4, input, core_int), 4, core_int)) -> SKIP)))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((share__choice(true & (share__choice(set_input!Minus(4, 1, core_int) -> SKIP))) ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_stm0_delta,
						          const_stm0_Thr) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- Junction: j0
		module j0
		exports
		
			channel enter, interrupt
			
			Timed(OneStep) {
				D__(id__,
						    const_stm0_delta,
						    const_stm0_Thr) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_stm0_delta,
						    const_stm0_Thr) = D__(id__,
						    const_stm0_delta,
						    const_stm0_Thr)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		-- END of Nodes --
		
		Timed(OneStep) {
		-- Operation calls --
		-- Only the undefined operations are declared here.
		-- If the state machine is in isolation, all required operations will be undefined.
		-- If it is in the context of a controller, the required operations not provided by the
		-- controller will be declared here, and the defined operations will be defined in the
		-- context of the Controller module, and therefore within scope of the state machine module.
		CALL__move(id__,
				    const_stm0_delta,
				    const_stm0_Thr,
					param_lv,
					param_a) = EDeadline(moveCall.param_lv.param_a,0)
		CALL__move2(id__,
				    const_stm0_delta,
				    const_stm0_Thr,
					param_lv,
					param_a) = EDeadline(move2Call.param_lv.param_a,0)
		
		-- END of Operation calls --
	
		-- STM processes
		STM(id__,
				    const_stm0_delta,
				    const_stm0_Thr) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
		( 
			(
				(
					(IteratedStateful(id__,
							    const_stm0_delta,
							    const_stm0_Thr) \ {terminate} ; share__choice(terminate -> SKIP))
				 	[[ share__ <- x__ | x__ <- {||} ]]
				)
			[| {share__} |]
			SKIP
			)
			[| union(sharedVarSync,{terminate}) |]
			dbisim(sharedVarMemory(id__,
					    const_stm0_delta,
					    const_stm0_Thr))
		)\sharedVarHide
		
		STM_VS_O(id__,
				    const_stm0_delta,
				    const_stm0_Thr) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
		( 
			(
				(
					(IteratedStateful_VS_O(id__,
							    const_stm0_delta,
							    const_stm0_Thr) \ {terminate} ; share__choice(terminate -> SKIP))
				 	[[ share__ <- x__ | x__ <- {||} ]]
				)
			[| {share__} |]
			SKIP
			)
			[| union(sharedVarSync,{terminate}) |]
			dbisim(sharedVarMemory(id__,
					    const_stm0_delta,
					    const_stm0_Thr))
		)\sharedVarHide
		
		-- Transitions
		Transitions(id__,
				    const_stm0_delta,
				    const_stm0_Thr) = ((let
			Trans = share__choice(get_input?input -> get_b2?b2 -> get_input2?input2 -> get_input3?input3 -> get_b1?b1 -> TimeOut_1(
				 (share__ -> SKIP
				 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s0::enter -> SKIP))))
				 [] dbisim((trigger2__!NID_s0.in?input2:{input2|input2 <- core_int, (input>2)} -> share__choice(set_input2!input2 -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s2::enter -> SKIP)))
				 [] dbisim(((b1 and b2))&(internal__!NID_s2 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_input!Plus(5, const_stm0_delta, core_int) -> SKIP)));true&(share__choice(stop.out -> SKIP)) ; f0::enter -> SKIP)))
				 [] dbisim((((((input2>3) or (input3<4))) and ((b1 and (not (b2))))))&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(stop.out -> SKIP)) ; s1::enter -> SKIP)))
				 [] dbisim(((not (b2)))&(trigger1__!NID_s0.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(get_input?input -> true&(share__choice(status.out.input -> SKIP))) ; s3::enter -> SKIP)))
				 [] dbisim(((input2>1))&(internal__!NID_s3 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s1::enter -> SKIP)))
				 [] dbisim((true)&(internal__!NID_s1 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s4::enter -> SKIP)))
				 [] dbisim((true)&(internal__!NID_s4 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s3::enter -> SKIP)))
				 [] dbisim((true)&(trigger2__!NID_s3.in?input:{input|input <- core_int, true} -> share__choice(set_input!input -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; j0::enter -> SKIP)))
				 [] dbisim((true)&(internal__!NID_j0 -> SKIP ;  ((SKIP ; s4::enter -> SKIP))))
				 []
				 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
				 []
				 terminate -> SKIP
				 )
			,SKIP);Trans
			)
		within
			Trans [|{terminate}|> SKIP
		)
		)
		
		-- Stateful
		-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
		
		-- Named process definitions
		MachineBody(id__,
				    const_stm0_delta,
				    const_stm0_Thr) = 
			dbisim((
			let
				finalNodesEntered = {|f0::entered|}
			within
				(dbisim((dbisim((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					i0::enter,
					s0::enter,
					s1::enter,
					s2::enter,
					f0::enter,
					s3::enter,
					s4::enter,
					j0::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited,interrupt|})
						transSync = {|internal__.NID_i0,trigger2__.NID_s0.in,internal__.NID_s2,internal__.NID_s0,trigger1__.NID_s0.in,internal__.NID_s3,internal__.NID_s1,internal__.NID_s4,trigger2__.NID_s3.in,internal__.NID_j0|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   i0::D__(id__,
						   		    const_stm0_delta,
						   		    const_stm0_Thr)
						   [| { share__, terminate } |] (
						   s0::D__(id__,
						   		    const_stm0_delta,
						   		    const_stm0_Thr)
						   [| { share__, terminate } |] (
						   s1::D__(id__,
						   		    const_stm0_delta,
						   		    const_stm0_Thr)
						   [| { share__, terminate } |] (
						   s2::D__(id__,
						   		    const_stm0_delta,
						   		    const_stm0_Thr)
						   [| { share__, terminate } |] (
						   f0::D__(id__,
						   		    const_stm0_delta,
						   		    const_stm0_Thr)
						   [| { share__, terminate } |] (
						   s3::D__(id__,
						   		    const_stm0_delta,
						   		    const_stm0_Thr)
						   [| { share__, terminate } |] (
						   s4::D__(id__,
						   		    const_stm0_delta,
						   		    const_stm0_Thr)
						   [| { share__, terminate } |] (
						   j0::D__(id__,
						   		    const_stm0_delta,
						   		    const_stm0_Thr)
						   )
						   )
						   )
						   )
						   )
						   )
						   )
						 )
						 [[s0::interrupt <- x__ | x__ <- {|interrupt,trigger2__.NID_s0.in,internal__.NID_s0,trigger1__.NID_s0.in|}]]
						 [[s1::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s1|}]]
						 [[s2::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s2|}]]
						 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
						 [[s3::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s3,trigger2__.NID_s3.in|}]]
						 [[s4::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s4|}]]
						 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__,setR_input,setR_input2 |} ]] 
						  [[set_input <- setL_input,set_b2 <- setL_b2,set_input2 <- setL_input2,set_input3 <- setL_input3,set_b1 <- setL_b1]]
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 			,setL_input
						 			,setL_b2
						 			,setL_input2
						 			,setL_input3
						 			,setL_b1
						 			,setR_input
						 			 			,setR_input2
						 			|}) |]
						 ((i0::enter -> Transitions(id__,
						 		    const_stm0_delta,
						 		    const_stm0_Thr))
						  [[ share__ <- x__ | x__ <- {| share__,setL_input,setL_b2,setL_input2,setL_input3,setL_b1 |} ]]
						  [[set_input <- setR_input,set_input2 <- setR_input2]]
						 )
						)[[setL_input <- set_input,setL_b2 <- set_b2,setL_input2 <- set_input2,setL_input3 <- set_input3,setL_b1 <- set_b1]]
						 [[setR_input <- set_input,setR_input2 <- set_input2]]
						)
					)
					 \ hideSet)
					[[
						stop__.x____ <- stop,
						status__.x____ <- status,
						trigger1__.x____ <- trigger1,
						trigger2__.x____ <- trigger2,
						trigger3__.x____ <- trigger3
						| x____ <- NIDS
					]]
				)
				)
				 [| union(stateClockSync,{terminate}) |]
				 StateClocks(id__,
				 		          const_stm0_delta,
				 		          const_stm0_Thr)
				)\diff(stateClockSync,enteredSS))
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour(id__,
				    const_stm0_delta,
				    const_stm0_Thr) = 
			dbisim((let
				stateClockSync = {|get_CLID_s2,s2::entered,get_CLID_s1,s1::entered,get_CLID_s3,s3::entered,get_CLID_s4,s4::entered,get_CLID_s0,s0::entered|}
			 within
				(MachineBody(id__,
						    const_stm0_delta,
						    const_stm0_Thr) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
						          const_stm0_delta,
						          const_stm0_Thr)) \ union(stateClockSync,enteredSS)
			)
			)
		
		IteratedBehaviour(id__,
				    const_stm0_delta,
				    const_stm0_Thr) = 
			dbisim((let
				stateClockSync = {|get_CLID_s2,s2::entered,get_CLID_s1,s1::entered,get_CLID_s3,s3::entered,get_CLID_s4,s4::entered,get_CLID_s0,s0::entered|}
			 within
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										dbisim(
											sbisim(
												dbisim(
													sbisim(
														MachineBody(id__,
																    const_stm0_delta,
																    const_stm0_Thr)
														[| {|get_CLID_s0,s0::entered,terminate|} |]
														dbisim(Clock_CLID_s0(id__,0,
																          const_stm0_delta,
																          const_stm0_Thr))
													)\{|get_CLID_s0|}
												)
												[| {|get_CLID_s4,s4::entered,terminate|} |]
												dbisim(Clock_CLID_s4(id__,0,
														          const_stm0_delta,
														          const_stm0_Thr))
											)\{|get_CLID_s4|}
										)
										[| {|get_CLID_s3,s3::entered,terminate|} |]
										dbisim(Clock_CLID_s3(id__,0,
												          const_stm0_delta,
												          const_stm0_Thr))
									)\{|get_CLID_s3|}
								)
								[| {|get_CLID_s1,s1::entered,terminate|} |]
								dbisim(Clock_CLID_s1(id__,0,
										          const_stm0_delta,
										          const_stm0_Thr))
							)\{|get_CLID_s1|}
						)
						[| {|get_CLID_s2,s2::entered,terminate|} |]
						dbisim(Clock_CLID_s2(id__,0,
								          const_stm0_delta,
								          const_stm0_Thr))
					)\{|get_CLID_s2|}
				)
				) \ union(stateClockSync,enteredSS)
			)
			)
		
		Stateful(id__,
				    const_stm0_delta,
				    const_stm0_Thr) = 
			((let
				getsetLocalChannels = {|get_input,set_input,
				get_input2,set_input2,
				get_b1,set_b1,
				get_b2,set_b2,
				get_input3,set_input3,
				get_input4,set_input4|}
				clockSync = {||}
			within
				(Behaviour(id__,
						    const_stm0_delta,
						    const_stm0_Thr) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__,
				 		    const_stm0_delta,
				 		    const_stm0_Thr) [| {terminate} |] Clocks(id__,
				 		          const_stm0_delta,
				 		          const_stm0_Thr))
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		IteratedStateful(id__,
				    const_stm0_delta,
				    const_stm0_Thr) =
			(dbisim(
				sbisim(
					dbisim(
						sbisim(
							dbisim(
								sbisim(
									dbisim(
										sbisim(
											dbisim(
												sbisim(
													dbisim(
														sbisim(
															IteratedBehaviour(id__,
																	    const_stm0_delta,
																	    const_stm0_Thr)
															[| {|get_input4,set_input4,terminate|} |]
															Memory_input4(0)
														)\{|get_input4,set_input4|}
													)
													[| {|get_input3,set_input3,terminate|} |]
													Memory_input3(0)
												)\{|get_input3,set_input3|}
											)
											[| {|get_b2,set_b2,terminate|} |]
											Memory_b2(true)
										)\{|get_b2,set_b2|}
									)
									[| {|get_b1,set_b1,terminate|} |]
									Memory_b1(true)
								)\{|get_b1,set_b1|}
							)
							[| {|get_input2,set_input2,terminate|} |]
							Memory_input2(0)
						)\{|get_input2,set_input2|}
					)
					[| {|get_input,set_input,terminate|} |]
					Memory_input(0)
				)\{|get_input,set_input|}
			)
			)
		
		-- Visible counterparts
		MachineBody_VS_O(id__,
				    const_stm0_delta,
				    const_stm0_Thr) = 
			dbisim((
			let
				finalNodesEntered = {|f0::entered|}
			within
				(dbisim((dbisim((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					i0::enter,
					s0::enter,
					s1::enter,
					s2::enter,
					f0::enter,
					s3::enter,
					s4::enter,
					j0::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited,interrupt|})
						transSync = {|internal__.NID_i0,trigger2__.NID_s0.in,internal__.NID_s2,internal__.NID_s0,trigger1__.NID_s0.in,internal__.NID_s3,internal__.NID_s1,internal__.NID_s4,trigger2__.NID_s3.in,internal__.NID_j0|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   i0::VS_O__(id__,
						   		    const_stm0_delta,
						   		    const_stm0_Thr)
						   [| { share__, terminate } |] (
						   s0::VS_O__(id__,
						   		    const_stm0_delta,
						   		    const_stm0_Thr)
						   [| { share__, terminate } |] (
						   s1::VS_O__(id__,
						   		    const_stm0_delta,
						   		    const_stm0_Thr)
						   [| { share__, terminate } |] (
						   s2::VS_O__(id__,
						   		    const_stm0_delta,
						   		    const_stm0_Thr)
						   [| { share__, terminate } |] (
						   f0::VS_O__(id__,
						   		    const_stm0_delta,
						   		    const_stm0_Thr)
						   [| { share__, terminate } |] (
						   s3::VS_O__(id__,
						   		    const_stm0_delta,
						   		    const_stm0_Thr)
						   [| { share__, terminate } |] (
						   s4::VS_O__(id__,
						   		    const_stm0_delta,
						   		    const_stm0_Thr)
						   [| { share__, terminate } |] (
						   j0::VS_O__(id__,
						   		    const_stm0_delta,
						   		    const_stm0_Thr)
						   )
						   )
						   )
						   )
						   )
						   )
						   )
						 )
						 [[s0::interrupt <- x__ | x__ <- {|interrupt,trigger2__.NID_s0.in,internal__.NID_s0,trigger1__.NID_s0.in|}]]
						 [[s1::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s1|}]]
						 [[s2::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s2|}]]
						 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
						 [[s3::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s3,trigger2__.NID_s3.in|}]]
						 [[s4::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s4|}]]
						 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__,setR_input,setR_input2 |} ]] 
						  [[set_input <- setL_input,set_b2 <- setL_b2,set_input2 <- setL_input2,set_input3 <- setL_input3,set_b1 <- setL_b1]]
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 			,setL_input
						 			,setL_b2
						 			,setL_input2
						 			,setL_input3
						 			,setL_b1
						 			,setR_input
						 			 			,setR_input2
						 			|}) |]
						 ((i0::enter -> Transitions(id__,
						 		    const_stm0_delta,
						 		    const_stm0_Thr))
						  [[ share__ <- x__ | x__ <- {| share__,setL_input,setL_b2,setL_input2,setL_input3,setL_b1 |} ]]
						  [[set_input <- setR_input,set_input2 <- setR_input2]]
						 )
						)[[setL_input <- set_input,setL_b2 <- set_b2,setL_input2 <- set_input2,setL_input3 <- set_input3,setL_b1 <- set_b1]]
						 [[setR_input <- set_input,setR_input2 <- set_input2]]
						)
					)
					 \ hideSet)
					[[
						stop__.x____ <- stop,
						status__.x____ <- status,
						trigger1__.x____ <- trigger1,
						trigger2__.x____ <- trigger2,
						trigger3__.x____ <- trigger3
						| x____ <- NIDS
					]]
				)
				)
				 [| union(stateClockSync,{terminate}) |]
				 StateClocks(id__,
				 		          const_stm0_delta,
				 		          const_stm0_Thr)
				)\diff(stateClockSync,enteredSS))
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour_VS_O(id__,
				    const_stm0_delta,
				    const_stm0_Thr) = 
			dbisim((let
				stateClockSync = {|get_CLID_s2,s2::entered,get_CLID_s1,s1::entered,get_CLID_s3,s3::entered,get_CLID_s4,s4::entered,get_CLID_s0,s0::entered|}
			 within
				(MachineBody_VS_O(id__,
						    const_stm0_delta,
						    const_stm0_Thr) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
						          const_stm0_delta,
						          const_stm0_Thr)) \ diff(union(stateClockSync,enteredSS),enteredSS)
			)
			)
		
		IteratedBehaviour_VS_O(id__,
				    const_stm0_delta,
				    const_stm0_Thr) = 
			dbisim((let
				stateClockSync = {|get_CLID_s2,s2::entered,get_CLID_s1,s1::entered,get_CLID_s3,s3::entered,get_CLID_s4,s4::entered,get_CLID_s0,s0::entered|}
			 within
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										dbisim(
											sbisim(
												dbisim(
													sbisim(
														MachineBody_VS_O(id__,
																    const_stm0_delta,
																    const_stm0_Thr)
														[| {|get_CLID_s0,s0::entered,terminate|} |]
														dbisim(Clock_CLID_s0(id__,0,
																          const_stm0_delta,
																          const_stm0_Thr))
													)\{|get_CLID_s0|}
												)
												[| {|get_CLID_s4,s4::entered,terminate|} |]
												dbisim(Clock_CLID_s4(id__,0,
														          const_stm0_delta,
														          const_stm0_Thr))
											)\{|get_CLID_s4|}
										)
										[| {|get_CLID_s3,s3::entered,terminate|} |]
										dbisim(Clock_CLID_s3(id__,0,
												          const_stm0_delta,
												          const_stm0_Thr))
									)\{|get_CLID_s3|}
								)
								[| {|get_CLID_s1,s1::entered,terminate|} |]
								dbisim(Clock_CLID_s1(id__,0,
										          const_stm0_delta,
										          const_stm0_Thr))
							)\{|get_CLID_s1|}
						)
						[| {|get_CLID_s2,s2::entered,terminate|} |]
						dbisim(Clock_CLID_s2(id__,0,
								          const_stm0_delta,
								          const_stm0_Thr))
					)\{|get_CLID_s2|}
				)
				) \ diff(union(stateClockSync,enteredSS),enteredSS)
			)
			)
		
		Stateful_VS_O(id__,
				    const_stm0_delta,
				    const_stm0_Thr) = 
			dbisim((let
				getsetLocalChannels = {|get_input,set_input,
				get_input2,set_input2,
				get_b1,set_b1,
				get_b2,set_b2,
				get_input3,set_input3,
				get_input4,set_input4|}
				clockSync = {||}
			within
				(Behaviour_VS_O(id__,
						    const_stm0_delta,
						    const_stm0_Thr) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__,
				 		    const_stm0_delta,
				 		    const_stm0_Thr) [| {terminate} |] Clocks(id__,
				 		          const_stm0_delta,
				 		          const_stm0_Thr))
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		IteratedStateful_VS_O(id__,
				    const_stm0_delta,
				    const_stm0_Thr) =
			(dbisim(
				sbisim(
					dbisim(
						sbisim(
							dbisim(
								sbisim(
									dbisim(
										sbisim(
											dbisim(
												sbisim(
													dbisim(
														sbisim(
															IteratedBehaviour_VS_O(id__,
																	    const_stm0_delta,
																	    const_stm0_Thr)
															[| {|get_input4,set_input4,terminate|} |]
															Memory_input4(0)
														)\{|get_input4,set_input4|}
													)
													[| {|get_input3,set_input3,terminate|} |]
													Memory_input3(0)
												)\{|get_input3,set_input3|}
											)
											[| {|get_b2,set_b2,terminate|} |]
											Memory_b2(true)
										)\{|get_b2,set_b2|}
									)
									[| {|get_b1,set_b1,terminate|} |]
									Memory_b1(true)
								)\{|get_b1,set_b1|}
							)
							[| {|get_input2,set_input2,terminate|} |]
							Memory_input2(0)
						)\{|get_input2,set_input2|}
					)
					[| {|get_input,set_input,terminate|} |]
					Memory_input(0)
				)\{|get_input,set_input|}
			)
			)
		
		-- END
		
		-- Memory
		-- Memory variables
		Memory_input(input) =
			get_input!input -> Memory_input(input)
			[]
			set_input?x__ -> Memory_input(x__)
			[]
			terminate -> SKIP
		Memory_input2(input2) =
			get_input2!input2 -> Memory_input2(input2)
			[]
			set_input2?x__ -> Memory_input2(x__)
			[]
			terminate -> SKIP
		Memory_b1(b1) =
			get_b1!b1 -> Memory_b1(b1)
			[]
			set_b1?x__ -> Memory_b1(x__)
			[]
			terminate -> SKIP
		Memory_b2(b2) =
			get_b2!b2 -> Memory_b2(b2)
			[]
			set_b2?x__ -> Memory_b2(x__)
			[]
			terminate -> SKIP
		Memory_input3(input3) =
			get_input3!input3 -> Memory_input3(input3)
			[]
			set_input3?x__ -> Memory_input3(x__)
			[]
			terminate -> SKIP
		Memory_input4(input4) =
			get_input4!input4 -> Memory_input4(input4)
			[]
			set_input4?x__ -> Memory_input4(x__)
			[]
			terminate -> SKIP
		
		-- varMemory process
		varMemory(id__,
				    const_stm0_delta,
				    const_stm0_Thr) = Memory_input(0)
		[| { terminate } |] (
		Memory_input2(0)
		[| { terminate } |] (
		Memory_b1(true)
		[| { terminate } |] (
		Memory_b2(true)
		[| { terminate } |] (
		Memory_input3(0)
		[| { terminate } |] (
		Memory_input4(0)
		)
		)
		)
		)
		)
		
		getsetLocalChannels = {|get_input,set_input,get_input2,set_input2,get_b1,set_b1,get_b2,set_b2,get_input3,set_input3,get_input4,set_input4|}
		
		-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
		FVS__(id__,
				    const_stm0_delta,
				    const_stm0_Thr) = STM_VS_O(id__,
				    const_stm0_delta,
				    const_stm0_Thr) \ localClockResets
		D__(id__,
				    const_stm0_delta,
				    const_stm0_Thr) = timed_priority(STM(id__,
				    const_stm0_delta,
				    const_stm0_Thr) \ union(internal_events,localClockResets))
		O__(id__,
				    const_stm0_delta,
				    const_stm0_Thr) = dbisim(D__(id__,
				    const_stm0_delta,
				    const_stm0_Thr))
		VS__(id__,
				    const_stm0_delta,
				    const_stm0_Thr) = FVS__(id__,
				    const_stm0_delta,
				    const_stm0_Thr)
		VS_O__(id__,
				    const_stm0_delta,
				    const_stm0_Thr) = dbisim(FVS__(id__,
				    const_stm0_delta,
				    const_stm0_Thr))
		HEXT__(id__,
				    const_stm0_delta,
				    const_stm0_Thr) = O__(id__,
				    const_stm0_delta,
				    const_stm0_Thr) [|shared_variable_events|] SKIP
		FVS_C__(id__,
				    const_stm0_delta,
				    const_stm0_Thr) = dbisim(timed_priority(STM(id__,
				    const_stm0_delta,
				    const_stm0_Thr) \ internal_events))
		HUP__(id__,
				    const_stm0_delta,
				    const_stm0_Thr) = timed_priority(O__(id__,
				    const_stm0_delta,
				    const_stm0_Thr) [|{share__}|] SKIP)
		
		-- Clocks
		
		Clocks(id__,
				          const_stm0_delta,
				          const_stm0_Thr) = terminate -> SKIP
		
		clockSync = {||}
		
		Clock_CLID_s2(id__,x__,
				          const_stm0_delta,
				          const_stm0_Thr) = 
			TimeOut_1(
				s2::entered -> Clock_CLID_s2(id__,0,
						          const_stm0_delta,
						          const_stm0_Thr)
				[]
				get_CLID_s2!x__ -> Clock_CLID_s2(id__,x__,
						          const_stm0_delta,
						          const_stm0_Thr)
				[]
				terminate -> SKIP,Clock_CLID_s2(id__,clock_type_plus(x__,1,CLID_s2_clock_type(id__,
						          const_stm0_delta,
						          const_stm0_Thr)),
						          const_stm0_delta,
						          const_stm0_Thr))
		Clock_CLID_s1(id__,x__,
				          const_stm0_delta,
				          const_stm0_Thr) = 
			TimeOut_1(
				s1::entered -> Clock_CLID_s1(id__,0,
						          const_stm0_delta,
						          const_stm0_Thr)
				[]
				get_CLID_s1!x__ -> Clock_CLID_s1(id__,x__,
						          const_stm0_delta,
						          const_stm0_Thr)
				[]
				terminate -> SKIP,Clock_CLID_s1(id__,clock_type_plus(x__,1,CLID_s1_clock_type(id__,
						          const_stm0_delta,
						          const_stm0_Thr)),
						          const_stm0_delta,
						          const_stm0_Thr))
		Clock_CLID_s3(id__,x__,
				          const_stm0_delta,
				          const_stm0_Thr) = 
			TimeOut_1(
				s3::entered -> Clock_CLID_s3(id__,0,
						          const_stm0_delta,
						          const_stm0_Thr)
				[]
				get_CLID_s3!x__ -> Clock_CLID_s3(id__,x__,
						          const_stm0_delta,
						          const_stm0_Thr)
				[]
				terminate -> SKIP,Clock_CLID_s3(id__,clock_type_plus(x__,1,CLID_s3_clock_type(id__,
						          const_stm0_delta,
						          const_stm0_Thr)),
						          const_stm0_delta,
						          const_stm0_Thr))
		Clock_CLID_s4(id__,x__,
				          const_stm0_delta,
				          const_stm0_Thr) = 
			TimeOut_1(
				s4::entered -> Clock_CLID_s4(id__,0,
						          const_stm0_delta,
						          const_stm0_Thr)
				[]
				get_CLID_s4!x__ -> Clock_CLID_s4(id__,x__,
						          const_stm0_delta,
						          const_stm0_Thr)
				[]
				terminate -> SKIP,Clock_CLID_s4(id__,clock_type_plus(x__,1,CLID_s4_clock_type(id__,
						          const_stm0_delta,
						          const_stm0_Thr)),
						          const_stm0_delta,
						          const_stm0_Thr))
		Clock_CLID_s0(id__,x__,
				          const_stm0_delta,
				          const_stm0_Thr) = 
			TimeOut_1(
				s0::entered -> Clock_CLID_s0(id__,0,
						          const_stm0_delta,
						          const_stm0_Thr)
				[]
				get_CLID_s0!x__ -> Clock_CLID_s0(id__,x__,
						          const_stm0_delta,
						          const_stm0_Thr)
				[]
				terminate -> SKIP,Clock_CLID_s0(id__,clock_type_plus(x__,1,CLID_s0_clock_type(id__,
						          const_stm0_delta,
						          const_stm0_Thr)),
						          const_stm0_delta,
						          const_stm0_Thr))
		
		StateClocks(id__,
				          const_stm0_delta,
				          const_stm0_Thr) = dbisim(Clock_CLID_s2(id__,0,
				          const_stm0_delta,
				          const_stm0_Thr))
		[| { terminate } |] (
		dbisim(Clock_CLID_s1(id__,0,
				          const_stm0_delta,
				          const_stm0_Thr))
		[| { terminate } |] (
		dbisim(Clock_CLID_s3(id__,0,
				          const_stm0_delta,
				          const_stm0_Thr))
		[| { terminate } |] (
		dbisim(Clock_CLID_s4(id__,0,
				          const_stm0_delta,
				          const_stm0_Thr))
		[| { terminate } |] (
		dbisim(Clock_CLID_s0(id__,0,
				          const_stm0_delta,
				          const_stm0_Thr))
		)
		)
		)
		)
		
		stateClockSync = {|get_CLID_s2,s2::entered,get_CLID_s1,s1::entered,get_CLID_s3,s3::entered,get_CLID_s4,s4::entered,get_CLID_s0,s0::entered|}
		
		-- Shared memory
		-- Shared memory variables
		
		-- sharedVarMemory process
		sharedVarMemory(id__,
				    const_stm0_delta,
				    const_stm0_Thr) = terminate -> SKIP
		
		sharedVarSync = {||}
		
		sharedVarHide = {||}
		}
endmodule
