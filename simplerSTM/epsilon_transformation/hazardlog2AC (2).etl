//this is the ORIGINAL version used in all other examples, 
//BUT the AC structure is not correct, as all the elements are not under the argumentPackage

// added "Query" constraints in line 243 and 455, to remove the transformation for safety measure including "Query"
//if ( m.controlMeasure.isDefined() and (not m.controlMeasure.startstWith("Query")))// so inference.target = safety measure
// inference.reasoning = argur over sub safety measure
// but define inference.source = queryclain in line 301-312, and line 510-521, so this queryclaim with a claim.name= Query can be queried in OEL later
//and will be redefined in the RC2AC.eol


//AssertedInference is relationship between claims
// ArgumentReasoning is strategy
//AssertedEvidence is relationship between claim and evidence
//ArtifactReference is evidence/solution

rule hazardlogToArgumentPackage
transform a : S!HazardLog
to b : T!ArgumentPackage
{
}


@lazy
rule causeToClaim
transform a : S!Cause
to b : T!Claim
{
var name = new T!LangString;
b.name = name;
b.name.lang = "English";
b.name.content ="Claim for " + a.number ;

var description = new T!Description;
var content = new T!MultiLangString;
var value = new T!LangString;
value.lang = "English";
value.content ="Cause " + a.number + " {" +  a.description +" } shall be avoided." ;

b.description = description;
b.description.content = content;
b.description.content.value.add(value);
}

@lazy
rule safetymeasureToClaim
transform a : S!ControlMeasure
to b : T!Claim
{
var name = new T!LangString;
b.name = name;
b.name.lang = "English";
b.name.content ="Claim for " + a.number ;

var description = new T!Description;
var content = new T!MultiLangString;
var value = new T!LangString;
value.lang = "English";
value.content = "Safety measure " + a.number + " {" +  a.description +" } shall be implemented." ;

b.description = description;
b.description.content = content;
// content.value is Collection
b.description.content.value.add(value);
}

@lazy
rule verificationToClaim
transform a : S!Verification
to b : T!Claim
{
var name = new T!LangString;
b.name = name;
b.name.lang = "English";
b.name.content ="Claim for " + a.number ;

var description = new T!Description;
var content = new T!MultiLangString;
var value = new T!LangString;
value.lang = "English";
value.content = "Safety measure shall be verified by {"  +  a.description + " }";

b.description = description;
b.description.content = content;

b.description.content.value.add(value);
}


@lazy
rule validationToClaim
transform a : S!Validation
to b : T!Claim
{
var name = new T!LangString;
b.name = name;
b.name.lang = "English";
b.name.content ="Claim for " + a.number ;

var description = new T!Description;
var content = new T!MultiLangString;
var value = new T!LangString;
value.lang = "English";
value.content = "Safety measure shall be validated by {"  +  a.description + " }";

b.description = description;
b.description.content = content;
// content.value is Collection
b.description.content.value.add(value);
}



@lazy
rule evidenceToSolution
transform a : S!Evidence
to b : T!ArtifactReference
{
var name = new T!LangString;
b.name = name;
b.name.lang = "English";
b.name.content ="Evidence: " + a.description ;

}


rule hazardToClaim
transform a : S!HazardousSituation
to b : T!Claim
{
var name = new T!LangString;
b.name = name;
b.name.lang = "English";
b.name.content ="Claim for " + a.number ;

var description = new T!Description;
var content = new T!MultiLangString;
var value = new T!LangString;
value.lang = "English";
value.content = "Hazard " + a.number + " {" +  a.description + "} shall be avoided." ;

b.description = description;
b.description.content = content;
// content.value is Collection
b.description.content.value.add(value);

b.name.content.println();
b.description.content.value.first().content.println();

if(a.causes.notEmpty())
{
var inference = new T!AssertedInference;

inference.target.add(b);


//strategy = arugmentreasoning 
var reasoning = new T!ArgumentReasoning;
var reasoningcontent = new T!MultiLangString;
var value = new T!LangString;
value.lang = "English";
value.content = "Strategy: Argument over identified causes.";

inference.reasoning = reasoning;
inference.reasoning.content = reasoningcontent;
inference.reasoning.content.value.add(value);



//inferenec.source = causes
for (c in a.causes)
{
//c.number.println();
inference.source.add(c.equivalent());

//link subcauses to cause
//this "if" cover line 154- 364
if(c.causes.notEmpty())
{
var inference = new T!AssertedInference;

//inference.target = claim = transition,i.e. upper claim
inference.target.add(c.equivalent());
" ".println();
inference.target.first().description.content.value.content.first().println();


//strategy = arugmentreasoning 
var reasoning = new T!ArgumentReasoning;
var reasoningcontent = new T!MultiLangString;
var value = new T!LangString;
value.lang = "English";
value.content = "Strategy: Argument over identified subcauses.";

inference.reasoning = reasoning;
inference.reasoning.content = reasoningcontent;
inference.reasoning.content.value.add(value);
inference.reasoning.content.value.first().content.println();


for (subcause in c.causes)
{
inference.source.add(subcause.equivalent());

//then to link safety measure(source) to subcasue(target)
if(subcause.controlMeasure.notEmpty())
{
var inference = new T!AssertedInference;

//inference.target = cause
inference.target.add(subcause.equivalent());
" ".println();

inference.target.first().description.content.value.content.first().println();


//strategy = arugmentreasoning: Argue over identified control measure 
var reasoning = new T!ArgumentReasoning;
var reasoningcontent = new T!MultiLangString;
var value = new T!LangString;
value.lang = "English";
value.content = "Strategy: Argue over identified control measures.";

inference.reasoning = reasoning;
inference.reasoning.content = reasoningcontent;
inference.reasoning.content.value.add(value);
inference.reasoning.content.value.first().content.println();
"".println();

//inferenec.source = control measure
for (m in subcause.controlMeasure)
{
//c.number.println();
inference.source.add(m.equivalent());


//sub measure to measure
if(m.controlMeasure.notEmpty() )
{
var inference = new T!AssertedInference;

//inference.target = cause
inference.target.add(m.equivalent());
" ".println();

inference.target.first().description.content.value.content.first().println();


//strategy = arugmentreasoning: Argue over identified control measure 
var reasoning = new T!ArgumentReasoning;
var reasoningcontent = new T!MultiLangString;
var value = new T!LangString;
value.lang = "English";
value.content = "Strategy: Argue over identified subcontrol measures.";

inference.reasoning = reasoning;
inference.reasoning.content = reasoningcontent;
inference.reasoning.content.value.add(value);
inference.reasoning.content.value.first().content.println();
"".println();

for(submeasure in m.controlMeasure)
{

if(not submeasure.description.startsWith("Query"))
{
inference.source.add(submeasure.equivalent());

// then link sub measure to V & V
if(submeasure.verification.notEmpty() or submeasure.validation.notEmpty())
{
//build link between V&V and the uptter claim-submeasure
var inference = new T!AssertedInference;

//inference.target = control measure
inference.target.add(submeasure.equivalent());
" ".println();

inference.target.first().description.content.value.content.first().println();


//strategy = arugmentreasoning: Argue over identified V & V 
var reasoning = new T!ArgumentReasoning;
var reasoningcontent = new T!MultiLangString;
var value = new T!LangString;
value.lang = "English";
value.content = "Strategy: Argue over V & V.";

inference.reasoning = reasoning;
inference.reasoning.content = reasoningcontent;
inference.reasoning.content.value.add(value);
inference.reasoning.content.value.first().content.println();
"".println();

//inferenec.source = Verification
if(submeasure.verification.notEmpty())
{
for (vr in submeasure.verification)
{
//c.number.println();
inference.source.add(vr.equivalent());

//build Verificatio evidence and link between evidence and verification claim


for (ev in vr.evidence)
{
//build link between evidence and verification claim
var evidenceInference = new T!AssertedEvidence;

//evidenceinference.target = verification
evidenceInference.target.add(vr.equivalent());
" ".println();

evidenceInference.target.first().description.content.value.content.first().println();

evidenceInference.source.add(ev.equivalent());

}
}
}


//inferenec.source = validation
if(submeasure.validation.notEmpty())
{
for (vl in submeasure.validation)
{
//c.number.println();
inference.source.add(vl.equivalent());

//build validation evidence and link between evidence and validation claim


for (ev in vl.evidence)
{
//build link between evidence and validation claim
var evidenceInference = new T!AssertedEvidence;

//evidenceinference.target = validation
evidenceInference.target.add(vl.equivalent());
" ".println();

evidenceInference.target.first().description.content.value.content.first().println();

evidenceInference.source.add(ev.equivalent());

}
}
}

inference.source.description.content.value.first().content.first().println();
}

}

else
// here to generate a special claim with name "Query" as source of inference
// and in the next step in RC2AC.eol, EOL needs to find this inference with source as "Query"
//and clear this source , then redefine source as RC states claims
{
var queryclaim = new T!Claim;
var name = new T!LangString;
queryclaim.name = name;
queryclaim.name.lang = "English";
queryclaim.name.content ="Query";
inference.source.add(queryclaim);


var description = new T!Description;
var content = new T!MultiLangString;
var value = new T!LangString;
value.lang = "English";
value.content = "the concrete claims to be generated by model query" ;

queryclaim.description = description;
queryclaim.description.content = content;
// content.value is Collection
queryclaim.description.content.value.add(value);

}
}


}


else 
// safety measure defined, sub measure not defined
//link safety measure to VV
{
if(m.verification.notEmpty() or m.validation.notEmpty())
{
var inference = new T!AssertedInference;

//inference.target = control measure
inference.target.add(m.equivalent());
" ".println();

inference.target.first().description.content.value.content.first().println();


//strategy = arugmentreasoning: Argue over identified V & V 
var reasoning = new T!ArgumentReasoning;
var reasoningcontent = new T!MultiLangString;
var value = new T!LangString;
value.lang = "English";
value.content = "Strategy: Argue over V & V.";

inference.reasoning = reasoning;
inference.reasoning.content = reasoningcontent;
inference.reasoning.content.value.add(value);
inference.reasoning.content.value.first().content.println();
"".println();

//inferenec.source = Verification
if(m.verification.notEmpty())
{
for (vr in m.verification)
{
//c.number.println();
inference.source.add(vr.equivalent());
//build Verificatio evidence and link between evidence and verification claim


for (ev in vr.evidence)
{
//build link between evidence and verification claim
var evidenceInference = new T!AssertedEvidence;

//evidenceinference.target = verification
evidenceInference.target.add(vr.equivalent());
" ".println();

evidenceInference.target.first().description.content.value.content.first().println();

evidenceInference.source.add(ev.equivalent());

}

}
}


//inferenec.source = validation
if(m.validation.notEmpty())
{
for (vl in m.validation)
{
//c.number.println();
inference.source.add(vl.equivalent());
//build validation evidence and link between evidence and validation claim


for (ev in vl.evidence)
{
//build link between evidence and validation claim
var evidenceInference = new T!AssertedEvidence;

//evidenceinference.target = validation
evidenceInference.target.add(vl.equivalent());
" ".println();

evidenceInference.target.first().description.content.value.content.first().println();

evidenceInference.source.add(ev.equivalent());

}
}
}

inference.source.description.content.value.first().content.first().println();
}

}

}
}
}

}










// the 2nd branch opposite to line 154 if(c.causes.notEmpty())
//here is the case if(c.causes.Empty()), i.e. no subcauses
// then link cause to safety measure
// this if scope line 191-277
else 
if(c.controlMeasure.notEmpty())
{
var inference = new T!AssertedInference;

//inference.target = cause
inference.target.add(c.equivalent());
" ".println();

inference.target.first().description.content.value.content.first().println();


//strategy = arugmentreasoning: Argue over identified control measure 
var reasoning = new T!ArgumentReasoning;
var reasoningcontent = new T!MultiLangString;
var value = new T!LangString;
value.lang = "English";
value.content = "Strategy: Argue over identified control measures.";

inference.reasoning = reasoning;
inference.reasoning.content = reasoningcontent;
inference.reasoning.content.value.add(value);
inference.reasoning.content.value.first().content.println();
"".println();



//below line 408-558 repeat line 216-360
//but change subcause to cause
for (m in c.controlMeasure)
{
//c.number.println();
inference.source.add(m.equivalent());


//sub measure to measure
if(m.controlMeasure.notEmpty() )
{
var inference = new T!AssertedInference;

//inference.target = cause
inference.target.add(m.equivalent());
" ".println();

inference.target.first().description.content.value.content.first().println();


//strategy = arugmentreasoning: Argue over identified control measure 
var reasoning = new T!ArgumentReasoning;
var reasoningcontent = new T!MultiLangString;
var value = new T!LangString;
value.lang = "English";
value.content = "Strategy: Argue over identified subcontrol measures.";

inference.reasoning = reasoning;
inference.reasoning.content = reasoningcontent;
inference.reasoning.content.value.add(value);
inference.reasoning.content.value.first().content.println();
"".println();

for(submeasure in m.controlMeausre)
{
if(not submeasure.description.startsWith("Query"))
{
inference.source.add(submeasure.equivalent());

// then link sub measure to V & V
if(submeasure.verification.notEmpty() or submeasure.validation.notEmpty())
{
var inference = new T!AssertedInference;

//inference.target = control measure
inference.target.add(submeasure.equivalent());
" ".println();

inference.target.first().description.content.value.content.first().println();


//strategy = arugmentreasoning: Argue over identified V & V 
var reasoning = new T!ArgumentReasoning;
var reasoningcontent = new T!MultiLangString;
var value = new T!LangString;
value.lang = "English";
value.content = "Strategy: Argue over V & V.";

inference.reasoning = reasoning;
inference.reasoning.content = reasoningcontent;
inference.reasoning.content.value.add(value);
inference.reasoning.content.value.first().content.println();
"".println();

//inferenec.source = Verification
if(submeasure.verification.notEmpty())
{
for (vr in submeasure.verification)
{
//c.number.println();
inference.source.add(vr.equivalent());

//build Verificatio evidence and link between evidence and verification claim


for (ev in vr.evidence)
{
//build link between evidence and verification claim
var evidenceInference = new T!AssertedEvidence;

//evidenceinference.target = verification
evidenceInference.target.add(vr.equivalent());
" ".println();

evidenceInference.target.first().description.content.value.content.first().println();

evidenceInference.source.add(ev.equivalent());

}
}
}


//inferenec.source = validation
if(submeasure.validation.notEmpty())
{
for (vl in submeasure.validation)
{
//c.number.println();
inference.source.add(vl.equivalent());

//build validation evidence and link between evidence and validation claim
for (ev in vl.evidence)
{
//build link between evidence and validation claim
var evidenceInference = new T!AssertedEvidence;

//evidenceinference.target = validation
evidenceInference.target.add(vl.equivalent());
" ".println();

evidenceInference.target.first().description.content.value.content.first().println();

evidenceInference.source.add(ev.equivalent());

}
}
}

inference.source.description.content.value.first().content.first().println();
}

}

else
// here to generate a special claim with name "Query" as source of inference
// and in the next step in RC2AC.eol, EOL needs to find this inference with source as "Query"
//and clear this source , then redefine source as RC states claims
{
var queryclaim = new T!Claim;
var name = new T!LangString;
queryclaim.name = name;
queryclaim.name.lang = "English";
queryclaim.name.content ="Query";
inference.source.add(queryclaim);
}



}


}


else 
// safety measure defined, sub measure not defined
//link safety measure to VV
{
if(m.verification.notEmpty() or m.validation.notEmpty())
{
var inference = new T!AssertedInference;

//inference.target = control measure
inference.target.add(m.equivalent());
" ".println();
inference.target.first().name.content.print();
"- ".print();
inference.target.first().description.content.value.content.first().println();


//strategy = arugmentreasoning: Argue over identified V & V 
var reasoning = new T!ArgumentReasoning;
var reasoningcontent = new T!MultiLangString;
var value = new T!LangString;
value.lang = "English";
value.content = "Strategy: Argue over V & V.";

inference.reasoning = reasoning;
inference.reasoning.content = reasoningcontent;
inference.reasoning.content.value.add(value);
inference.reasoning.content.value.first().content.println();
"".println();

//inferenec.source = Verification
if(m.verification.notEmpty())
{
for (vr in m.verification)
{
//c.number.println();
inference.source.add(vr.equivalent());
//build Verificatio evidence and link between evidence and verification claim


for (ev in vr.evidence)
{
//build link between evidence and verification claim
var evidenceInference = new T!AssertedEvidence;

//evidenceinference.target = verification
evidenceInference.target.add(vr.equivalent());
" ".println();

evidenceInference.target.first().description.content.value.content.first().println();

evidenceInference.source.add(ev.equivalent());

}
}
}


//inferenec.source = validation
if(m.validation.notEmpty())
{
for (vl in m.validation)
{
//c.number.println();
inference.source.add(vl.equivalent());

//build validation evidence and link between evidence and validation claim


for (ev in vl.evidence)
{
//build link between evidence and validation claim
var evidenceInference = new T!AssertedEvidence;

//evidenceinference.target = validation
evidenceInference.target.add(vl.equivalent());
" ".println();

evidenceInference.target.first().description.content.value.content.first().println();

evidenceInference.source.add(ev.equivalent());

}
}
}

inference.source.description.content.value.first().content.first().println();
}

}

}

}
}
}
}




