@namespace(uri="http://www.robocalc.circus/Circus", prefix="circus")
package circus;


//Term methods to be implemented
@GenModel(documentation="net.sourceforge.czt.z.ast")
abstract class Term {
	//attr String name; //TO DO: not included in CZT AST, to be confirmed
//	attr int annsSize;
//	val Term[*] terms;
//	attr boolean hasAnn;
	
}




/*************************************
           Ann
*************************************/

class Ann extends Term {
}


class SectTypeEnvAnn extends Ann {
	val NameSectTypeTriple[*] nameSectTypeTriples;
}


class LocAnn extends Ann {
	attr Integer col;
	attr Integer end;
	attr Integer length;
	attr Integer line;
	attr String loc;
	attr Integer start;	
	//in ast, it is BigInteger instead of Integer.
}

class SignatureAnn extends Ann {
	val Signature signature;
}

class TypeAnn extends Ann {
	val Type type;
}









/********************************
          ActionList
********************************/

abstract class ActionList extends Term {
}

class CircusActionList extends ActionList {
	val CircusAction[*] circusActions;// the return type in ast is CircusActionList, but I didn't follow this. TBC
}


abstract class CircusAnn extends ActionList {
}

class ActionSignatureAnn extends CircusAnn {
	val ActionSignature actionSignature;
}

class CircusStateAnn extends CircusAnn {
}

class ImplicitChannelAnn extends CircusAnn {
}

class OnTheFlyDefAnn extends CircusAnn {
}

class OutputFieldAnn extends CircusAnn {
}

class ProcessSignatureAnn extends CircusAnn {
	val ProcessSignature processSignature;
}

class ProofObligationAnn extends CircusAnn {
	val Pred pred;
}

class StateUpdateAnn extends CircusAnn {
	val StateUpdate stateUpdate;
}




/********************************
          AssignmentPairs
********************************/

class AssignmentPairs extends Term {
	val ZNameList lhsElement;
	val ZExprList rhsElement;
}

abstract class ChannelSet extends Term {
}

class CircusChannelSet extends ChannelSet {
	val Expr expr;
}

abstract class ChannelSetList extends Term {
}

class CircusChannelSetList extends ChannelSetList {
	val ChannelSet[*] channelSets;
}

abstract class CircusSignature extends Term {
	val ZName name;
	
}

class ActionSignature extends CircusSignature {
	val ZName actionName;
	val CircusChannelSetList channelSetList;
	val CircusCommunicationList communicationList;
	val Signature formalParams; //?
	val Signature localVarsl; //?
	val CircusNameSetList nameSetList;
	val SignatureList signatureList;
	val Signature usedChannels; //?
	attr boolean isParamAction;
		
}

mapentry ZNameToActionSignatureList : ZName -> ActionSignatureList;

mapentry ZNameToZSignatureList : ZName -> ZSignatureList;

mapentry ZNameToSignature : ZName -> Signature;

mapentry ZNameToCircusChannelSetList : ZName -> CircusChannelSetList;

mapentry ZNameToCircusCommunicationList : ZName -> CircusCommunicationList;

mapentry ZNameToCircusNameSetList : ZName -> CircusNameSetList;

class ProcessSignature extends CircusSignature {
	val ZNameToActionSignatureList actions;//Map<ZName,ActionSignatureList>	getActions()
	
	val ActionSignatureList actionSignatureList;
	val ZSignatureList basicProcessLocalZSignatureList; 
	attr CallUsage callUsage;
	val CircusChannelSetList circusProcessChannelSetList;
	val Signature formalParamsOrIndexes;
	val ZNameList genFormals;
	
	val ZNameToZSignatureList localZSignatures; 	//Map<ZName,ZSignatureList>	getLocalZSignatures()
	
	val ZSignatureList mainSignatureList;
	val ProcessSignatureList processSignatureList; 
	val ZName processName;
	val SignatureList[*] signatureLists;
	val Signature stateSignature;
	val StateUpdate stateUpdate;
	
	val ZNameToSignature usedChannels; 
	//Map<ZName,Signature>	getUsedChannels()
	
	val NameTypePair[*] usedChannelsAsList;//getUsedChannelsAsList()
	
	val ZNameToCircusChannelSetList usedChannelSets;
	//Map<ZName,CircusChannelSetList>	getUsedChannelSets()
	
	val ChannelSet[*] usedChannelSetsList;
	
	val ZNameToCircusCommunicationList usedCommunications; 	//Map<ZName,CircusCommunicationList>	getUsedCommunications()
	
	 val Communication[*] 	usedCommunicationsAsList;
	
	val ZNameToCircusNameSetList usedNameSets; 
	//Map<ZName,CircusNameSetList>	getUsedNameSets()
	
	val NameSet[*]  usedNameSetsAsList;
	attr boolean    isBasicProcessSignature;
	attr boolean 	isEmptyProcessSignature;
	
}



/********************************
          Communication
********************************/
enum CommPattern {
	ChannelSet = 0; 
	Input = 1; 
	Mixed = 2; 
	Output = 3; 
	Synch = 4; 
}

enum CommUsage {
	Generic = 0; 
	Normal = 1;
}

class Communication extends Term {
	val RefExpr channelExpr;
	val CircusFieldList fieldList;
	attr CommPattern commPattern;
	attr CommUsage commUsage;
	attr boolean indexed;
	attr Integer multiSych;//the type should be BigInteger, TBC
}

abstract class CommunicationList extends Term {
}

class CircusCommunicationList extends Term {
	val Communication[*] communications;
}

/********************************
          Field
********************************/

abstract class Field extends Term {
}

//this attr is extended from AST, such that there is no need for class OutputField
//we do not use OutputFieldAnn class either (too complicated compared to a boolean attr), a boolean type is enough
//val OutputFieldAnn outputAnn 
class DotField extends Field {
	val Expr expr;

	attr Boolean outputField;
}


@GenModel(documentation="?N: Pred")
class InputField extends Field {
	val ZName varialbeName;
	val Pred restriction;
}

/*
@GenModel(documentation="!N: Pred. This is NOT included in Circus AST.")
class OutputField extends Field {
	val Expr expr;
}
*/

abstract class FieldList extends Term {
}

class CircusFieldList extends FieldList {
	val Field[*] fields;
}




/********************************
          NameSet
********************************/

abstract class NameSet extends Term {
}

class CircusNameSet extends NameSet {
	val Expr expr;
}

abstract class NameSetList extends Term {
}

class CircusNameSetList extends NameSetList {
	val CircusNameSet[*] circusNameSets;
}

/********************************
          DeclList
********************************/
abstract class DeclList extends Term {
}

class ZDeclList extends DeclList {
	val Decl[*] decls;
}


/********************************
          FreetypeList
********************************/
class Freetype extends Term {
	val ZName name; 
	val BranchList branchList; 
}



/********************************
          FreetypeList
********************************/
abstract class FreetypeList extends Term {
}

class ZFreetypeList extends FreetypeList {
	val Freetype[*] freeTypes;
}


/********************************
          Para
********************************/
abstract class Para extends Term {
}

enum Box{
	AxBox = 0; 
	OmitBox = 1;
	SchBox = 2; 	
}


//LatexMarkupPara extends Para, not implemented


class AxPara extends Para {
	attr Box box;
	val ZNameList namelist;
	val ZSchText zSchText;
}

@GenModel(documentation= "A action paragraph that declares a name for an action definition. Strokes are not allowed in channel set names, and this is ensured by the parser. This element represents the N == ParAction grammar rule, where, where N is a Name.")
class ActionPara extends Para {
	val CircusAction circusAction;
	val ZName name;
}

class ChannelPara extends Para {
	val ZDeclList declList;
}

class ChannelSetPara extends Para {
	val ChannelSet channelSet;
	val ZNameList GenFormals;
	val ZName name;
}


class ConjPara extends Para {
	attr String name;
	val ZNameList namelist;
	val Pred pred;
}

class FreePara extends Para {
	val FreetypeList freetypeList; 
}

class GivenPara extends Para {
	val ZNameList nameList; 
}

//NarrPara extends Para, not implemented


class NameSetPara extends Para {
	val ZName name;
	val NameSet nameSet;
}


enum Assoc {
	Left = 0;
	Right = 1;
}

enum Cat {
	Function = 0;
	Generic = 1;
	Relation = 2; 
}

class OptempPara extends Para {
	attr Assoc assoc;
	attr Cat cat;
	val Oper[*] opers;
	attr Integer prec; //BigInteger	getPrec() //Integer or int? TBC
}


class ProcessPara extends Para {
	val CircusProcess circusProcess;
	val ZNameList zGenFormals;
	val ZName name;
	attr boolean isBasicProcess;
}



class CircusConjPara extends Para {
}

class TransformerPara extends CircusConjPara {
	val Name name;
	val TransformerPred transformerPred;
}



//class UnparsedPara extends Para, not implemented



/********************************
          Sect
********************************/

abstract class Sect extends Term {
}


class ZSect extends Sect {
	attr String name;
	val Parent[*] parents;
	val ZParaList paraList;

}


//TO DO: to be confirmed with Alvaro
class NarrSect extends Sect {
//	val String[*] contents;
}


//TO DO: to be confirmed with Alvaro
//class UnparsedZSect extends Sect {
//	val String[*] contents;
//}

/********************************
          ParaList
********************************/
abstract class ParaList extends Term {
}

class ZParaList extends ParaList {
	val Para[*] paras;
	
}



/********************************
          ParenAnn
********************************/
abstract class ParenAnn extends Term {

}


/********************************
          Parent
********************************/
class Parent extends Term {
	attr String word;
}




/********************************
          SchText
********************************/

abstract class SchText extends Term {
}

class ZSchText extends SchText {
	val ZDeclList declList;
	val Pred pred;
}

/********************************
          Pred
********************************/

abstract class Pred extends Term {
}

@GenModel(documentation="A schema predicate.")
class ExprPred extends Pred {
	val Expr expr;
}

@GenModel(documentation="An abstract superclass for constant true/false facts.")
abstract class Fact extends Pred {
}



class NegPred extends Pred {
	val Pred pred;
}

@GenModel(documentation="Falsity.")
class FalsePred extends Fact {
}

@GenModel(documentation="Truth .")
class TruePred extends Fact {
}

abstract class Pred2 extends Pred {
	val Pred leftPred;
	val Pred rightPred;
	val Pred[*] preds;
}



@GenModel(documentation="Membership predicate: Mixfix=false, Equality: Mixfix=true, Other operator application: Mixfix=true")
class MemPred extends Pred {
	val Expr[*] exprs; 
	val Expr leftExpr;
	val Expr rightExpr;
	attr boolean mixFix;
}

enum And {
	Chain = 0; 
	NL = 1; 
	Semi = 2; 
	Wedge = 3; 
}



class AndPred extends Pred2 {
	attr And and;
}


class IffPred extends Pred2 {
}

class ImpliesPred extends Pred2 {
}

class OrPred extends Pred2 {
}

enum Model {
	FlDv = 0;
	SFl = 1; 
	Tr = 2; 
}

enum Transformation {
	Equivalence = 0; 
	Refinement = 1;
	Simulation = 2;
}

class TransformerPred extends Pred {
	attr Model model;
	val SchText schText;
	attr Transformation transformation;
}

class ActionTransformerPred extends TransformerPred {
	val CircusAction[*] circusActions;
	val CircusAction impl;//?
	val CircusAction spec;//?
}

class ProcessTransformerPred extends TransformerPred {
	val CircusProcess[*] circusProcesses;
	val CircusProcess impl;//?
	val CircusProcess spec;//?
}

abstract class QntPred extends Pred {
	val Pred pred;
	val SchText schText;
}

class Exists1Pred extends QntPred {
}

class ExistsPred extends QntPred {
}

class ForallPred extends QntPred {
}

class StateUpdate extends QntPred {
	val AssignmentPairs[*] assignmentPairs;
}

abstract class SignatureList extends Term {
}

class ActionSignatureList extends SignatureList {
	val ActionSignature[*] actionSignatureList;
}

class ProcessSignatureList extends SignatureList {
	val ProcessSignature[*] processSignatures;
}

class ZSignatureList extends SignatureList {
	val Signature[*] signatures;
}




/********************************
          NewOldPair
********************************/
class NewOldPair extends Term {
	val ZName[*] names;
	val ZName newName;
	val ZName oldName;
	
}

/********************************
          Signature
********************************/
class Signature extends Term {
	val NameTypePair[*] nameTypePairs;
}



/********************************
          Spec
********************************/
class Spec extends Term {
	val Sect[*] sects;
	attr String version;
}



/********************************
          StrokeList
********************************/
abstract class StrokeList extends Term {
}

class ZStrokeList extends StrokeList {
	val Stroke[*] strokes;
}




/********************************
          Type
********************************/
abstract class Type extends Term {
}

class GenericType extends Type {
	val ZNameList nameList;
	val Type2[*] types;
}

abstract class Type2 extends Type {
}

abstract class CircusType extends Type2 {
}

@GenModel(documentation="A generic parameter type")
class GenParamType extends Type2 {
	val ZName name;
}

class GivenType extends Type2 {
	val ZName name;
}


class PowerType extends Type2 {
	val Type2 type;
}


class ProdType extends Type2 {
	val Type2[*] types;
}

class SchemaType extends Type2 {
	val Signature signature;
}



class ActionType extends CircusType {
	val ActionSignature actionSignature;
}

class ChannelType extends CircusType {
	val Type2 type;
}

class CircusSigType extends CircusType {
	val Signature signature;
}

class ProcessType extends CircusType {
	val ProcessSignature processSignature;
} 


class ChannelSetType extends CircusSigType {
}

class CommunicationType extends CircusSigType {
	val ZName channelName;
	val Type channelType;
	val NameTypePair[*] communicationPattern;// does the var match the type? TBC
	attr boolean isSynchronisation;
}

class NameSetType extends CircusSigType {
}





/********************************
          CircusProcess
********************************/
abstract class CircusProcess extends Term {
}

class BasicProcess extends CircusProcess {
	val Para[*] localParas;
	val CircusAction mainAction;
	val Para[*] onTheFlyParas;
	val ZParaList paraList;
	val AxPara statePara;
	val ZName stateParaName;
	attr boolean isDefaultState;
	attr boolean isMainActionValid;
	attr boolean isStateValid;
}

enum CallUsage {
	Indexed = 0; 
	Parameterised = 1; 
}

@GenModel(documentation="The default value of CallUsage is Param.")
class CallProcess extends CircusProcess {
	val ZExprList actuals;
	val RefExpr callExpr;
	attr CallUsage callUsage;
}

abstract class Process1 extends CircusProcess {
	val CircusProcess circusProcess;
}

class HideProcess extends Process1 {
	val ChannelSet channelSet;
}

class RenameProcess extends Process1 {
	val AssignmentPairs	assignmentPairs;
}

abstract class ProcessD extends Process1 {
	val BasicProcess basicProcess;
	val ZDeclList declList;
	attr boolean isBasicProcess;
}

class IndexedProcess extends ProcessD {
}

class ParamProcess extends ProcessD {
}

abstract class ProcessIte extends ProcessD {
}

class SeqProcessIte extends ProcessIte {
}

class ExtChoiceProcessIte extends ProcessIte {
}

class IntChoiceProcessIte extends ProcessIte {
}

abstract class ProcessIdx extends ProcessIte {
}

class IntChoiceProcessIdx extends ProcessIdx {
}

class ExtChoiceProcessIdx extends ProcessIdx {
}

class SeqProcessIdx extends ProcessIdx {
}

abstract class ParProcessIdx extends ProcessIdx {
}

class AlphabetisedParallelProcessIdx extends ParProcessIdx {
	val ChannelSet channelSet;
}

class InterleaveProcessIdx extends ParProcessIdx {
}

class ParallelProcessIdx extends ParProcessIdx {
	val ChannelSet channelSet;
}

abstract class ParProcessIte extends ProcessIte {
}

class AlphabetisedParallelProcessIte extends ParProcessIte {
	val ChannelSet channelSet;
}

class InterleaveProcessIte extends ParProcessIte {
}

class ParallelProcessIte extends ParProcessIte {
	val ChannelSet channelSet;
}

abstract class Process2 extends CircusProcess {
	val CircusProcess leftProcess;
	val CircusProcess rightProcess;
//	val CircusProcess[*] crcusProcesses;//is this necessary?
}

class ExtChoiceProcessImpl extends Process2 {
}

class IntChoiceProcess extends Process2 {
}

class SeqProcess extends Process2 {
}

abstract class ParProcess extends Process2 {
}

class AlphabetisedParallelProcess extends ParProcess {
	val ChannelSetList channelSetList;//ListTerm<ChannelSet> getChannelSet(), the return type is changed to ChannelSetList 
	val ChannelSet leftAlpha;
	val ChannelSet rightAlpha;
}

class InterleaveProcess extends ParProcess {
}

class ParallelProcess extends ParProcess {
	val ChannelSet channelSet;
}

abstract class CircusAction extends Term {
}

abstract class Action1 extends CircusAction {
	val CircusAction circusAction;
}



class GuardedAction extends Action1 {
	val Pred pred;
}



class HideAction extends Action1 {
	val ChannelSet channelSet;
}

class MuAction extends Action1 {
	val ZName name;
	attr boolean isParameterised;
}

class RenameAction extends Action1 {
	val AssignmentPairs assignmentPairs;
}

class PrefixingAction extends Action1 {
	val Communication communication;
}

class SubstitutionAction extends Action1 {
	val ZRenameList zRenameList;
}

abstract class LetAction extends Action1 {
}

class LetMuAction extends LetAction {
	val ZParaList paraList;
}

class LetVarAction extends LetAction {
	val ZDeclList declList;
	val ZExprList exprList;
}

abstract class ActionD extends Action1 {
	val ZDeclList declList;
}

abstract class ActionIte extends ActionD {
}

class ParamAction extends ActionD {
	attr boolean isParamCommand;
}

class ExtChoiceActionIte extends ActionIte {
}

class IntChoiceActionIte extends ActionIte {
}

class SeqActionIte extends ActionIte {
}

abstract class ParActionIte extends ActionIte {
	val NameSet nameSet;
}

class AlphabetisedParallelActionIte extends ParActionIte {
	val ChannelSet channelSet;
}

class InterleaveActionIte extends ParActionIte {
}

class ParallelActionIte extends ParActionIte {
	val ChannelSet channelSet;
}

abstract class Action2 extends CircusAction {
//	val CircusActionList actionList;
	//val CircusAction[*] circusActions;
	val CircusAction leftAction;
	val CircusAction rightAction;
}

class ExtChoiceAction extends Action2 {
}

class IntChoiceAction extends Action2 {
}

class InterruptAction extends Action2 {
}

class SeqAction extends Action2 {
}

abstract class ParAction extends Action2 {
	val NameSet leftNameSet;
	val NameSet rightNameSet;
//	val NameSet[*] nameSets;// is this necessary? is it the union of left and right?
}

class AlphabetisedParallelAction extends ParAction {
	val ChannelSet[*] channelSets;
	val ChannelSet leftAlpha;
	val ChannelSet rightAlpha;
}

class InterleaveAction extends ParAction {
}

class ParallelAction extends ParAction {
	val ChannelSet channelSet;
}

abstract class BasicAction extends CircusAction {
}

class ChaosAction extends BasicAction {
}

class SkipAction extends BasicAction {
}

class StopAction extends BasicAction {
}

abstract class CircusCommand extends CircusAction {
}

class AssignmentCommand extends CircusCommand {
	val AssignmentPairs assignmentPairs;
}

class SpecStmtCommand extends CircusCommand {
	val ZNameList frame;
	val Pred post;
	val Pred pre;
	val Pred[*] preds;//necessary?
}

class VarDeclCommand extends CircusCommand {
	val CircusAction circusAction;
	val ZDeclList declList;
}

abstract class CircusGuardedCommand extends CircusCommand {
	val CircusActionList actionList;
	val GuardedAction guardedAction;
	attr int numberOfGuards;
}

class IfGuardedCommand extends CircusGuardedCommand {
}

class DoGuardedCommand extends CircusGuardedCommand {
}

class CallAction extends CircusAction {
	val ZExprList exprList;
	val ZName name;
}

class SchExprAction extends CircusAction {
	val Expr expr;
}



//OperatorName extends Object, not implemented

/********************************
          Name
********************************/

abstract class Name extends Term {
}

enum Fixity {
	INFIX = 0;
	NOFIX = 1;
	POSTFIX = 2;
	PREFIX = 3;
}

class ZName extends Name {
	attr String word;
	attr String ~id;
	attr String operatorName;//val OperatorName operatorName; TBC: OperatorName extends Object, so not implemented or used. String is used here instead
	//getOperatorName(Fixity fixity) not implemented because it requires fixity as parameter.
	val ZStrokeList strokeLsit; 
}

abstract class NameList extends Term {
}

class ZNameList extends NameList {
	val ZName[*] names;
}




/********************************
          NameSectTypeTriple
********************************/
@GenModel(documentation="A tuple consisting of a name, a section, and a type.")
class NameSectTypeTriple extends Term {
	val ZName name;
	attr String section;
	val Type type;
}



/********************************
          NameTypePair
********************************/
@GenModel(documentation="A tuple consisting of a name, a section, and a type.")
class NameTypePair extends Term {
	val ZName name;
	val Type type;
}



/********************************
          Numeral
********************************/
abstract class Numeral extends Term {
}

class ZNumeral extends Numeral {
	//TBC
	attr Integer value; 
}


/********************************
          Oper
********************************/
abstract class Oper extends Term {
}

@GenModel(documentation=" If the List attribute is false, then this operand represents a single expression. If true, this operand represents a comma-separated list of expressions.")
class Operand extends Oper {
	attr boolean isList; //getList is changed to isList
}


class Operator extends Oper {
	attr String word;
}

/********************************
          Decl
********************************/
abstract class Decl extends Term {
}

 
@GenModel(documentation="The getNameList method contains a list of non-null NameList objects with size two. Therefore, we specify the size of the NameList as 2, so that no need for the wellformed-ness on this")
class ChannelDecl extends Decl {
	//there is not a class of NameListList, so auto-gen model can not mapping to the czt model
	//val ZNameList[2] listOfNameLists;
	val ZNameList genFormals;
	val ZNameList channelNameList;
	val Expr expr;
}

@GenModel(documentation="net.sourceforge.czt.z.ast, A constant declaration. Example: x==3")
class ConstDecl extends Decl {
	val ZName name;
	val Expr expr;
}

class InclDecl extends Decl {
	val Expr expr;
}

enum ParamQualifier {
	Result = 0; 
	Value = 1; 
	ValueResult = 2; 
}

class QualifiedDecl extends Decl {
	val Expr expr;
	val ZNameList nameList;
	attr ParamQualifier paramQualifier;
}

class VarDecl extends Decl {
	val Expr expr;
	val ZNameList nameList;
}


/********************************
          Branch
********************************/

class Branch extends Term {
	val ZName name;
	val Expr expr;
}

abstract class BranchList extends Term {
}

class ZBranchList extends BranchList {
	val Branch[*] branches;
}


/********************************
          Directive and DirectiveType
not implemented as related to latex markup
********************************/




/********************************
          Stroke
********************************/

abstract class Stroke extends Term {
}

@GenModel(documentation="The stroke '?' ")
class InStroke extends Stroke {
}

@GenModel(documentation="The stroke ' ' ' ")
class NextStroke extends Stroke {
}


@GenModel(documentation="net.sourceforge.czt.base.ast, An enumeration of the digits zero to nine. This is not used.")
enum Digit{
	EIGHT; 
	FIVE; 
	FOUR; 
	NINE; 
	ONE; 
	SEVEN; 
	SIX; 
	THREE; 
	TWO; 
	ZERO;	
}

@GenModel(documentation="A digit stroke")
class NumStroke extends Stroke {
	attr Digit digit; 
}

@GenModel(documentation="The stroke '!' ")
class OutStroke extends Stroke {
}



/********************************
          RenameList
********************************/

abstract class RenameList extends Term {
}


class ZRenameList extends RenameList {
	val NewOldPair[*] newOldPair;
}





/********************************
          ExprList
********************************/

abstract class ExprList extends Term {
}

class ZExprList extends ExprList {
	val Expr[*] exprs;
}


//ZFactory not implemented
//CircusFactory not implemented

/********************************
          Expr
********************************/

@GenModel(documentation="RoboChart Expression")
abstract class Expr extends Term {
}

class BasicChannelSetExpr extends Expr {
	val CircusCommunicationList communicationList;
}

class BindExpr extends Expr {
	val ZDeclList declList;
}

class CondExpr extends Expr {
	val Expr[*] Expr; 
	val Expr leftExpr;
	val Expr rightExpr;
	val Pred pred;
}

//is this necessary? can we use int?
class NumExpr extends Expr {
	val ZNumeral numeral;
}

class RefExpr extends Expr {
	attr boolean explicit;
	val ZExprList exprList;
	attr boolean mixFix;
	val ZName name;
}

class SigmaExpr extends Expr {
	val RefExpr channel;
	val Expr value;
}


class SchExpr extends Expr {
	val SchText schText;
}




@GenModel(documentation="An abstract unary expression")
abstract class Expr1 extends Expr {
	val Expr expr;
}


class DecorExpr extends Expr1 {
	val Stroke stroke;
}


class BindSelExpr extends Expr1 {
	val ZName name;
}


@GenModel(documentation="A schema hiding expression")
class HideExpr extends Expr1 {
	val ZNameList nameList;
}

class NegExpr extends Expr1 {
}

class PowerExpr extends Expr1 {
}

class PreExpr extends Expr1 {
}

class RenameExpr extends Expr1 {
	//val or ref
	val ZRenameList renameList;
}

class ThetaExpr extends Expr1 {
	val ZStrokeList strokeList;
}

class TupleSelExpr extends Expr1 {
	val Numeral numeral;
}





abstract class Expr2 extends Expr {
	val Expr leftExpr;
	val Expr rightExpr;
	
//	val Expr[*] exprs;
//in ast, it's: Expr[*] exprs;
//in CZT tree structure, it's ExprList
//    val ZExprList exprList;
}


abstract class QntExpr extends Expr {
	val Expr expr;
	val SchText schText;
}


//is this abstract?
class MuExpr extends QntExpr {
	
}


class SetCompExpr extends QntExpr {
	
}

abstract class Qnt1Expr extends QntExpr {

	@"http://www.eclipse.org/OCL/Collection"(nullFree="false")
	!ordered val VarDecl[+] variables;
	val Expr suchthat;
	val Expr[1] predicate;
}

class ForallExpr extends Qnt1Expr {
}

class ExistsExpr extends Qnt1Expr {
}

class LambdaExpr extends Qnt1Expr {
}

class LetExpr extends Qnt1Expr {
}

class Exists1Expr extends Qnt1Expr {
	//attr boolean[1] ~unique; this attr is from RoboChart
}

@GenModel(documentation="An abstract expression containing 0..N expression")
abstract class Expr0N extends Expr {
	val ZExprList exprList;
}

@GenModel(documentation="An abstract expression containing 2..N expression")
abstract class Expr2N extends Expr0N {
	
}


class SetExpr extends Expr0N {
}

class ProdExpr extends Expr2N {
}

class TupleExpr extends Expr2N {
}



@GenModel(documentation="Function Operator Application: mixFox = true, Application: mixFix = false")
class ApplExpr extends Expr2 {
	attr boolean mixFix;
}


abstract class SchExpr2 extends Expr2 {
}

class AndExpr extends SchExpr2 {
}

@GenModel(documentation="A schema composition expression")
class CompExpr extends SchExpr2 {
}

class IffExpr extends SchExpr2 {
}


class ImpliesExpr extends SchExpr2 {
}

class OrExpr extends SchExpr2 {
}

class PipeExpr extends SchExpr2 {
}

class ProjExpr extends SchExpr2 {
}


