
--
-- RoboChart generator version 3.0.0.202401231330
-- Automatically generated on 23-05-2024 18:21:18
--
-- Iterated compression status: true
-- Assertions compression status: false
--

module pkg3
exports

module M1
	exports
	
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase
	
	-- declaring channels
	-- declaring robotic platform events
	
	
	-- declaring module termination channel
	channel terminate
	
	-- declaring robotic platform variables
	
	-- channel set with all visible events
	sem__events = {|
	|}
	
	-- declaring controller
		module C1
			shared_variable_events = {|
			|}
			
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
	
			-- declaring controller events
			
			
			
			-- declaring call and ret events for undefined operations
			
			-- declaring controller termination channel
			channel terminate
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			|}
			
			-- set of visible memory events
			visibleMemoryEvents = {||}
	
			-- defined operations
		
			-- declaring machines
			module s3
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_s0|
				              NID_f0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_a, set_a, setL_a, setR_a: core_int
				channel get_b, set_b, setL_b, setR_b: {(x0__,x1__,x2__) | x0__ <- core_int,x1__ <- core_int,x2__ <- {(x0__,x1__) | x0__ <- core_real,x1__ <- core_int}}
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel stop__: NIDS.InOut
				channel stop: InOut
				channel trigger1__: NIDS.InOut.core_int
				channel trigger1: InOut.core_int
				channel event1__: NIDS.InOut.core_int
				channel event1: InOut.core_int
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				s0::enter,
				f0::enter
				|}
				
				enteredSS = 	{|
				s0::entered,
				f0::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	stop,
					trigger1,
					event1
					|}
				
				channel clockReset, clockResetL, clockResetR 
				
				localClockResets = {||}
				
				
				channel get_CLID_f0 : core_clock_type 
				channel get_CLID_s0 : core_clock_type 
				--channel increment__
				
				CLID_f0_clock_type(id__,
						          const_pkg0_C1_stm0_constant1) = 
					let
						max = (clock_type_max(Union({
				{}
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				CLID_s0_clock_type(id__,
						          const_pkg0_C1_stm0_constant1) = 
					let
						max = (clock_type_max(Union({
				{}
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				
			
					-- Nodes --
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
									    const_pkg0_C1_stm0_constant1) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__,
									    const_pkg0_C1_stm0_constant1) = D__(id__,
									    const_pkg0_C1_stm0_constant1)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: s0
					module s0
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__,
									    const_pkg0_C1_stm0_constant1) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&(share__choice(event1.in?a -> (SStop /\ set_a!a -> SKIP))) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((share__choice(share__choice(get_a?a -> true & (share__choice(set_a!Plus(a, 1, core_int) -> SKIP)))) ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_pkg0_C1_stm0_constant1) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&(share__choice(event1.in?a -> (SStop /\ set_a!a -> SKIP))) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((share__choice(share__choice(get_a?a -> true & (share__choice(set_a!Plus(a, 1, core_int) -> SKIP)))) ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks(id__,
									          const_pkg0_C1_stm0_constant1) = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Final state: f0
					module f0
					
					exports
					
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							D__(id__,
									    const_pkg0_C1_stm0_constant1) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
									
									Entering 	= entered -> SKIP ; Active
									Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
									Interrupted	= share__choice(exit -> exited -> Inactive)
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_pkg0_C1_stm0_constant1) = D__(id__,
									    const_pkg0_C1_stm0_constant1)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					-- END of Nodes --
					
					Timed(OneStep) {
					-- Operation calls --
					-- Only the undefined operations are declared here.
					-- If the state machine is in isolation, all required operations will be undefined.
					-- If it is in the context of a controller, the required operations not provided by the
					-- controller will be declared here, and the defined operations will be defined in the
					-- context of the Controller module, and therefore within scope of the state machine module.
					
					-- END of Operation calls --
				
					-- STM processes
					STM(id__,
							    const_pkg0_C1_stm0_constant1) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(IteratedStateful(id__,
										    const_pkg0_C1_stm0_constant1) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {||} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__,
								    const_pkg0_C1_stm0_constant1))
					)\sharedVarHide
					
					STM_VS_O(id__,
							    const_pkg0_C1_stm0_constant1) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(IteratedStateful_VS_O(id__,
										    const_pkg0_C1_stm0_constant1) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {||} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__,
								    const_pkg0_C1_stm0_constant1))
					)\sharedVarHide
					
					-- Transitions
					Transitions(id__,
							    const_pkg0_C1_stm0_constant1) = ((let
						Trans = share__choice(get_a?a -> TimeOut_1(
							 (share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s0::enter -> SKIP))))
							 [] dbisim((true)&(stop__!NID_s0.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; f0::enter -> SKIP)))
							 [] dbisim((trigger1__!NID_s0.in?a:{a|a <- core_int, (a>2)} -> share__choice(set_a!a -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s0::enter -> SKIP)))
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
							 )
						,SKIP);Trans
						)
					within
						Trans [|{terminate}|> SKIP
					)
					)
					
					-- Stateful
					-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
					
					-- Named process definitions
					MachineBody(id__,
							    const_pkg0_C1_stm0_constant1) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								s0::enter,
								f0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i0,stop__.NID_s0.in,trigger1__.NID_s0.in|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   i0::D__(id__,
									   		    const_pkg0_C1_stm0_constant1)
									   [| { share__, terminate } |] (
									   s0::D__(id__,
									   		    const_pkg0_C1_stm0_constant1)
									   [| { share__, terminate } |] (
									   f0::D__(id__,
									   		    const_pkg0_C1_stm0_constant1)
									   )
									   )
									 )
									 [[s0::interrupt <- x__ | x__ <- {|interrupt,stop__.NID_s0.in,trigger1__.NID_s0.in|}]]
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__,setR_a |} ]] 
									  [[set_a <- setL_a]]
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,setL_a
									 			,setR_a
									 			|}) |]
									 ((i0::enter -> Transitions(id__,
									 		    const_pkg0_C1_stm0_constant1))
									  [[ share__ <- x__ | x__ <- {| share__,setL_a |} ]]
									  [[set_a <- setR_a]]
									 )
									)[[setL_a <- set_a]]
									 [[setR_a <- set_a]]
									)
								)
								 \ hideSet)
								[[
									stop__.x____ <- stop,
									trigger1__.x____ <- trigger1,
									event1__.x____ <- event1
									| x____ <- NIDS
								]]
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__,
							 		          const_pkg0_C1_stm0_constant1)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour(id__,
							    const_pkg0_C1_stm0_constant1) = 
						dbisim((let
							stateClockSync = {|get_CLID_s0,s0::entered|}
						 within
							(MachineBody(id__,
									    const_pkg0_C1_stm0_constant1) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
									          const_pkg0_C1_stm0_constant1)) \ union(stateClockSync,enteredSS)
						)
						)
					
					IteratedBehaviour(id__,
							    const_pkg0_C1_stm0_constant1) = 
						dbisim((let
							stateClockSync = {|get_CLID_s0,s0::entered|}
						 within
							(dbisim(
								sbisim(
									MachineBody(id__,
											    const_pkg0_C1_stm0_constant1)
									[| {|get_CLID_s0,s0::entered,terminate|} |]
									dbisim(Clock_CLID_s0(id__,0,
											          const_pkg0_C1_stm0_constant1))
								)\{|get_CLID_s0|}
							)
							) \ union(stateClockSync,enteredSS)
						)
						)
					
					Stateful(id__,
							    const_pkg0_C1_stm0_constant1) = 
						((let
							getsetLocalChannels = {|get_a,set_a,
							get_b,set_b|}
							clockSync = {||}
						within
							(Behaviour(id__,
									    const_pkg0_C1_stm0_constant1) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__,
							 		    const_pkg0_C1_stm0_constant1) [| {terminate} |] Clocks(id__,
							 		          const_pkg0_C1_stm0_constant1))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					IteratedStateful(id__,
							    const_pkg0_C1_stm0_constant1) =
						(dbisim(
							sbisim(
								dbisim(
									sbisim(
										IteratedBehaviour(id__,
												    const_pkg0_C1_stm0_constant1)
										[| {|get_b,set_b,terminate|} |]
										Memory_b((0,0,(0,0)))
									)\{|get_b,set_b|}
								)
								[| {|get_a,set_a,terminate|} |]
								Memory_a(0)
							)\{|get_a,set_a|}
						)
						)
					
					-- Visible counterparts
					MachineBody_VS_O(id__,
							    const_pkg0_C1_stm0_constant1) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								s0::enter,
								f0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i0,stop__.NID_s0.in,trigger1__.NID_s0.in|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   i0::VS_O__(id__,
									   		    const_pkg0_C1_stm0_constant1)
									   [| { share__, terminate } |] (
									   s0::VS_O__(id__,
									   		    const_pkg0_C1_stm0_constant1)
									   [| { share__, terminate } |] (
									   f0::VS_O__(id__,
									   		    const_pkg0_C1_stm0_constant1)
									   )
									   )
									 )
									 [[s0::interrupt <- x__ | x__ <- {|interrupt,stop__.NID_s0.in,trigger1__.NID_s0.in|}]]
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__,setR_a |} ]] 
									  [[set_a <- setL_a]]
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,setL_a
									 			,setR_a
									 			|}) |]
									 ((i0::enter -> Transitions(id__,
									 		    const_pkg0_C1_stm0_constant1))
									  [[ share__ <- x__ | x__ <- {| share__,setL_a |} ]]
									  [[set_a <- setR_a]]
									 )
									)[[setL_a <- set_a]]
									 [[setR_a <- set_a]]
									)
								)
								 \ hideSet)
								[[
									stop__.x____ <- stop,
									trigger1__.x____ <- trigger1,
									event1__.x____ <- event1
									| x____ <- NIDS
								]]
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__,
							 		          const_pkg0_C1_stm0_constant1)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour_VS_O(id__,
							    const_pkg0_C1_stm0_constant1) = 
						dbisim((let
							stateClockSync = {|get_CLID_s0,s0::entered|}
						 within
							(MachineBody_VS_O(id__,
									    const_pkg0_C1_stm0_constant1) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
									          const_pkg0_C1_stm0_constant1)) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					IteratedBehaviour_VS_O(id__,
							    const_pkg0_C1_stm0_constant1) = 
						dbisim((let
							stateClockSync = {|get_CLID_s0,s0::entered|}
						 within
							(dbisim(
								sbisim(
									MachineBody_VS_O(id__,
											    const_pkg0_C1_stm0_constant1)
									[| {|get_CLID_s0,s0::entered,terminate|} |]
									dbisim(Clock_CLID_s0(id__,0,
											          const_pkg0_C1_stm0_constant1))
								)\{|get_CLID_s0|}
							)
							) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					Stateful_VS_O(id__,
							    const_pkg0_C1_stm0_constant1) = 
						dbisim((let
							getsetLocalChannels = {|get_a,set_a,
							get_b,set_b|}
							clockSync = {||}
						within
							(Behaviour_VS_O(id__,
									    const_pkg0_C1_stm0_constant1) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__,
							 		    const_pkg0_C1_stm0_constant1) [| {terminate} |] Clocks(id__,
							 		          const_pkg0_C1_stm0_constant1))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					IteratedStateful_VS_O(id__,
							    const_pkg0_C1_stm0_constant1) =
						(dbisim(
							sbisim(
								dbisim(
									sbisim(
										IteratedBehaviour_VS_O(id__,
												    const_pkg0_C1_stm0_constant1)
										[| {|get_b,set_b,terminate|} |]
										Memory_b((0,0,(0,0)))
									)\{|get_b,set_b|}
								)
								[| {|get_a,set_a,terminate|} |]
								Memory_a(0)
							)\{|get_a,set_a|}
						)
						)
					
					-- END
					
					-- Memory
					-- Memory variables
					Memory_a(a) =
						get_a!a -> Memory_a(a)
						[]
						set_a?x__ -> Memory_a(x__)
						[]
						terminate -> SKIP
					Memory_b(b) =
						get_b!b -> Memory_b(b)
						[]
						set_b?x__ -> Memory_b(x__)
						[]
						terminate -> SKIP
					
					-- varMemory process
					varMemory(id__,
							    const_pkg0_C1_stm0_constant1) = Memory_a(0)
					[| { terminate } |] (
					Memory_b((0,0,(0,0)))
					)
					
					getsetLocalChannels = {|get_a,set_a,get_b,set_b|}
					
					-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
					FVS__(id__,
							    const_pkg0_C1_stm0_constant1) = STM_VS_O(id__,
							    const_pkg0_C1_stm0_constant1) \ localClockResets
					D__(id__,
							    const_pkg0_C1_stm0_constant1) = timed_priority(STM(id__,
							    const_pkg0_C1_stm0_constant1) \ union(internal_events,localClockResets))
					O__(id__,
							    const_pkg0_C1_stm0_constant1) = dbisim(D__(id__,
							    const_pkg0_C1_stm0_constant1))
					VS__(id__,
							    const_pkg0_C1_stm0_constant1) = FVS__(id__,
							    const_pkg0_C1_stm0_constant1)
					VS_O__(id__,
							    const_pkg0_C1_stm0_constant1) = dbisim(FVS__(id__,
							    const_pkg0_C1_stm0_constant1))
					HEXT__(id__,
							    const_pkg0_C1_stm0_constant1) = O__(id__,
							    const_pkg0_C1_stm0_constant1) [|shared_variable_events|] SKIP
					FVS_C__(id__,
							    const_pkg0_C1_stm0_constant1) = dbisim(timed_priority(STM(id__,
							    const_pkg0_C1_stm0_constant1) \ internal_events))
					HUP__(id__,
							    const_pkg0_C1_stm0_constant1) = timed_priority(O__(id__,
							    const_pkg0_C1_stm0_constant1) [|{share__}|] SKIP)
					
					-- Clocks
					
					Clocks(id__,
							          const_pkg0_C1_stm0_constant1) = terminate -> SKIP
					
					clockSync = {||}
					
					Clock_CLID_s0(id__,x__,
							          const_pkg0_C1_stm0_constant1) = 
						TimeOut_1(
							s0::entered -> Clock_CLID_s0(id__,0,
									          const_pkg0_C1_stm0_constant1)
							[]
							get_CLID_s0!x__ -> Clock_CLID_s0(id__,x__,
									          const_pkg0_C1_stm0_constant1)
							[]
							terminate -> SKIP,Clock_CLID_s0(id__,clock_type_plus(x__,1,CLID_s0_clock_type(id__,
									          const_pkg0_C1_stm0_constant1)),
									          const_pkg0_C1_stm0_constant1))
					
					StateClocks(id__,
							          const_pkg0_C1_stm0_constant1) = dbisim(Clock_CLID_s0(id__,0,
							          const_pkg0_C1_stm0_constant1))
					
					stateClockSync = {|get_CLID_s0,s0::entered|}
					
					-- Shared memory
					-- Shared memory variables
					
					-- sharedVarMemory process
					sharedVarMemory(id__,
							    const_pkg0_C1_stm0_constant1) = terminate -> SKIP
					
					sharedVarSync = {||}
					
					sharedVarHide = {||}
					}
			endmodule
			module stm0
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_s0|
				              NID_f0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_a, set_a, setL_a, setR_a: core_int
				channel get_b, set_b, setL_b, setR_b: {(x0__,x1__,x2__) | x0__ <- core_int,x1__ <- core_int,x2__ <- {(x0__,x1__) | x0__ <- core_real,x1__ <- core_int}}
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel stop__: NIDS.InOut
				channel stop: InOut
				channel trigger1__: NIDS.InOut.core_int
				channel trigger1: InOut.core_int
				channel event1__: NIDS.InOut
				channel event1: InOut
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				s0::enter,
				f0::enter
				|}
				
				enteredSS = 	{|
				s0::entered,
				f0::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	stop,
					trigger1,
					event1
					|}
				
				channel clockReset, clockResetL, clockResetR 
				
				localClockResets = {||}
				
				
				channel get_CLID_f0 : core_clock_type 
				channel get_CLID_s0 : core_clock_type 
				--channel increment__
				
				CLID_f0_clock_type(id__,
						          const_pkg3_M1_C1_stm0_constant1) = 
					let
						max = (clock_type_max(Union({
				{}
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				CLID_s0_clock_type(id__,
						          const_pkg3_M1_C1_stm0_constant1) = 
					let
						max = (clock_type_max(Union({
				{}
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				
			
					-- Nodes --
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
									    const_pkg3_M1_C1_stm0_constant1) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__,
									    const_pkg3_M1_C1_stm0_constant1) = D__(id__,
									    const_pkg3_M1_C1_stm0_constant1)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: s0
					module s0
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__,
									    const_pkg3_M1_C1_stm0_constant1) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&(share__choice(event1.out -> SKIP)) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((share__choice(share__choice(get_a?a -> true & (share__choice(set_a!Plus(a, 1, core_int) -> SKIP)))) ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_pkg3_M1_C1_stm0_constant1) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&(share__choice(event1.out -> SKIP)) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((share__choice(share__choice(get_a?a -> true & (share__choice(set_a!Plus(a, 1, core_int) -> SKIP)))) ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks(id__,
									          const_pkg3_M1_C1_stm0_constant1) = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Final state: f0
					module f0
					
					exports
					
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							D__(id__,
									    const_pkg3_M1_C1_stm0_constant1) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
									
									Entering 	= entered -> SKIP ; Active
									Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
									Interrupted	= share__choice(exit -> exited -> Inactive)
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_pkg3_M1_C1_stm0_constant1) = D__(id__,
									    const_pkg3_M1_C1_stm0_constant1)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					-- END of Nodes --
					
					Timed(OneStep) {
					-- Operation calls --
					-- Only the undefined operations are declared here.
					-- If the state machine is in isolation, all required operations will be undefined.
					-- If it is in the context of a controller, the required operations not provided by the
					-- controller will be declared here, and the defined operations will be defined in the
					-- context of the Controller module, and therefore within scope of the state machine module.
					
					-- END of Operation calls --
				
					-- STM processes
					STM(id__,
							    const_pkg3_M1_C1_stm0_constant1) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(IteratedStateful(id__,
										    const_pkg3_M1_C1_stm0_constant1) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {||} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__,
								    const_pkg3_M1_C1_stm0_constant1))
					)\sharedVarHide
					
					STM_VS_O(id__,
							    const_pkg3_M1_C1_stm0_constant1) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(IteratedStateful_VS_O(id__,
										    const_pkg3_M1_C1_stm0_constant1) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {||} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__,
								    const_pkg3_M1_C1_stm0_constant1))
					)\sharedVarHide
					
					-- Transitions
					Transitions(id__,
							    const_pkg3_M1_C1_stm0_constant1) = ((let
						Trans = share__choice(get_a?a -> TimeOut_1(
							 (share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s0::enter -> SKIP))))
							 [] dbisim((true)&(stop__!NID_s0.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; f0::enter -> SKIP)))
							 [] dbisim((trigger1__!NID_s0.in?a:{a|a <- core_int, (a>2)} -> share__choice(set_a!a -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; s0::enter -> SKIP)))
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
							 )
						,SKIP);Trans
						)
					within
						Trans [|{terminate}|> SKIP
					)
					)
					
					-- Stateful
					-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
					
					-- Named process definitions
					MachineBody(id__,
							    const_pkg3_M1_C1_stm0_constant1) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								s0::enter,
								f0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i0,stop__.NID_s0.in,trigger1__.NID_s0.in|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   i0::D__(id__,
									   		    const_pkg3_M1_C1_stm0_constant1)
									   [| { share__, terminate } |] (
									   s0::D__(id__,
									   		    const_pkg3_M1_C1_stm0_constant1)
									   [| { share__, terminate } |] (
									   f0::D__(id__,
									   		    const_pkg3_M1_C1_stm0_constant1)
									   )
									   )
									 )
									 [[s0::interrupt <- x__ | x__ <- {|interrupt,stop__.NID_s0.in,trigger1__.NID_s0.in|}]]
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__,setR_a |} ]] 
									  [[set_a <- setL_a]]
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,setL_a
									 			,setR_a
									 			|}) |]
									 ((i0::enter -> Transitions(id__,
									 		    const_pkg3_M1_C1_stm0_constant1))
									  [[ share__ <- x__ | x__ <- {| share__,setL_a |} ]]
									  [[set_a <- setR_a]]
									 )
									)[[setL_a <- set_a]]
									 [[setR_a <- set_a]]
									)
								)
								 \ hideSet)
								[[
									stop__.x____ <- stop,
									trigger1__.x____ <- trigger1,
									event1__.x____ <- event1
									| x____ <- NIDS
								]]
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__,
							 		          const_pkg3_M1_C1_stm0_constant1)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour(id__,
							    const_pkg3_M1_C1_stm0_constant1) = 
						dbisim((let
							stateClockSync = {|get_CLID_s0,s0::entered|}
						 within
							(MachineBody(id__,
									    const_pkg3_M1_C1_stm0_constant1) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
									          const_pkg3_M1_C1_stm0_constant1)) \ union(stateClockSync,enteredSS)
						)
						)
					
					IteratedBehaviour(id__,
							    const_pkg3_M1_C1_stm0_constant1) = 
						dbisim((let
							stateClockSync = {|get_CLID_s0,s0::entered|}
						 within
							(dbisim(
								sbisim(
									MachineBody(id__,
											    const_pkg3_M1_C1_stm0_constant1)
									[| {|get_CLID_s0,s0::entered,terminate|} |]
									dbisim(Clock_CLID_s0(id__,0,
											          const_pkg3_M1_C1_stm0_constant1))
								)\{|get_CLID_s0|}
							)
							) \ union(stateClockSync,enteredSS)
						)
						)
					
					Stateful(id__,
							    const_pkg3_M1_C1_stm0_constant1) = 
						((let
							getsetLocalChannels = {|get_a,set_a,
							get_b,set_b|}
							clockSync = {||}
						within
							(Behaviour(id__,
									    const_pkg3_M1_C1_stm0_constant1) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__,
							 		    const_pkg3_M1_C1_stm0_constant1) [| {terminate} |] Clocks(id__,
							 		          const_pkg3_M1_C1_stm0_constant1))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					IteratedStateful(id__,
							    const_pkg3_M1_C1_stm0_constant1) =
						(dbisim(
							sbisim(
								dbisim(
									sbisim(
										IteratedBehaviour(id__,
												    const_pkg3_M1_C1_stm0_constant1)
										[| {|get_b,set_b,terminate|} |]
										Memory_b((0,0,(0,0)))
									)\{|get_b,set_b|}
								)
								[| {|get_a,set_a,terminate|} |]
								Memory_a(0)
							)\{|get_a,set_a|}
						)
						)
					
					-- Visible counterparts
					MachineBody_VS_O(id__,
							    const_pkg3_M1_C1_stm0_constant1) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								s0::enter,
								f0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i0,stop__.NID_s0.in,trigger1__.NID_s0.in|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   i0::VS_O__(id__,
									   		    const_pkg3_M1_C1_stm0_constant1)
									   [| { share__, terminate } |] (
									   s0::VS_O__(id__,
									   		    const_pkg3_M1_C1_stm0_constant1)
									   [| { share__, terminate } |] (
									   f0::VS_O__(id__,
									   		    const_pkg3_M1_C1_stm0_constant1)
									   )
									   )
									 )
									 [[s0::interrupt <- x__ | x__ <- {|interrupt,stop__.NID_s0.in,trigger1__.NID_s0.in|}]]
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__,setR_a |} ]] 
									  [[set_a <- setL_a]]
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,setL_a
									 			,setR_a
									 			|}) |]
									 ((i0::enter -> Transitions(id__,
									 		    const_pkg3_M1_C1_stm0_constant1))
									  [[ share__ <- x__ | x__ <- {| share__,setL_a |} ]]
									  [[set_a <- setR_a]]
									 )
									)[[setL_a <- set_a]]
									 [[setR_a <- set_a]]
									)
								)
								 \ hideSet)
								[[
									stop__.x____ <- stop,
									trigger1__.x____ <- trigger1,
									event1__.x____ <- event1
									| x____ <- NIDS
								]]
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__,
							 		          const_pkg3_M1_C1_stm0_constant1)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour_VS_O(id__,
							    const_pkg3_M1_C1_stm0_constant1) = 
						dbisim((let
							stateClockSync = {|get_CLID_s0,s0::entered|}
						 within
							(MachineBody_VS_O(id__,
									    const_pkg3_M1_C1_stm0_constant1) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
									          const_pkg3_M1_C1_stm0_constant1)) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					IteratedBehaviour_VS_O(id__,
							    const_pkg3_M1_C1_stm0_constant1) = 
						dbisim((let
							stateClockSync = {|get_CLID_s0,s0::entered|}
						 within
							(dbisim(
								sbisim(
									MachineBody_VS_O(id__,
											    const_pkg3_M1_C1_stm0_constant1)
									[| {|get_CLID_s0,s0::entered,terminate|} |]
									dbisim(Clock_CLID_s0(id__,0,
											          const_pkg3_M1_C1_stm0_constant1))
								)\{|get_CLID_s0|}
							)
							) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					Stateful_VS_O(id__,
							    const_pkg3_M1_C1_stm0_constant1) = 
						dbisim((let
							getsetLocalChannels = {|get_a,set_a,
							get_b,set_b|}
							clockSync = {||}
						within
							(Behaviour_VS_O(id__,
									    const_pkg3_M1_C1_stm0_constant1) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__,
							 		    const_pkg3_M1_C1_stm0_constant1) [| {terminate} |] Clocks(id__,
							 		          const_pkg3_M1_C1_stm0_constant1))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					IteratedStateful_VS_O(id__,
							    const_pkg3_M1_C1_stm0_constant1) =
						(dbisim(
							sbisim(
								dbisim(
									sbisim(
										IteratedBehaviour_VS_O(id__,
												    const_pkg3_M1_C1_stm0_constant1)
										[| {|get_b,set_b,terminate|} |]
										Memory_b((0,0,(0,0)))
									)\{|get_b,set_b|}
								)
								[| {|get_a,set_a,terminate|} |]
								Memory_a(0)
							)\{|get_a,set_a|}
						)
						)
					
					-- END
					
					-- Memory
					-- Memory variables
					Memory_a(a) =
						get_a!a -> Memory_a(a)
						[]
						set_a?x__ -> Memory_a(x__)
						[]
						terminate -> SKIP
					Memory_b(b) =
						get_b!b -> Memory_b(b)
						[]
						set_b?x__ -> Memory_b(x__)
						[]
						terminate -> SKIP
					
					-- varMemory process
					varMemory(id__,
							    const_pkg3_M1_C1_stm0_constant1) = Memory_a(0)
					[| { terminate } |] (
					Memory_b((0,0,(0,0)))
					)
					
					getsetLocalChannels = {|get_a,set_a,get_b,set_b|}
					
					-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
					FVS__(id__,
							    const_pkg3_M1_C1_stm0_constant1) = STM_VS_O(id__,
							    const_pkg3_M1_C1_stm0_constant1) \ localClockResets
					D__(id__,
							    const_pkg3_M1_C1_stm0_constant1) = timed_priority(STM(id__,
							    const_pkg3_M1_C1_stm0_constant1) \ union(internal_events,localClockResets))
					O__(id__,
							    const_pkg3_M1_C1_stm0_constant1) = dbisim(D__(id__,
							    const_pkg3_M1_C1_stm0_constant1))
					VS__(id__,
							    const_pkg3_M1_C1_stm0_constant1) = FVS__(id__,
							    const_pkg3_M1_C1_stm0_constant1)
					VS_O__(id__,
							    const_pkg3_M1_C1_stm0_constant1) = dbisim(FVS__(id__,
							    const_pkg3_M1_C1_stm0_constant1))
					HEXT__(id__,
							    const_pkg3_M1_C1_stm0_constant1) = O__(id__,
							    const_pkg3_M1_C1_stm0_constant1) [|shared_variable_events|] SKIP
					FVS_C__(id__,
							    const_pkg3_M1_C1_stm0_constant1) = dbisim(timed_priority(STM(id__,
							    const_pkg3_M1_C1_stm0_constant1) \ internal_events))
					HUP__(id__,
							    const_pkg3_M1_C1_stm0_constant1) = timed_priority(O__(id__,
							    const_pkg3_M1_C1_stm0_constant1) [|{share__}|] SKIP)
					
					-- Clocks
					
					Clocks(id__,
							          const_pkg3_M1_C1_stm0_constant1) = terminate -> SKIP
					
					clockSync = {||}
					
					Clock_CLID_s0(id__,x__,
							          const_pkg3_M1_C1_stm0_constant1) = 
						TimeOut_1(
							s0::entered -> Clock_CLID_s0(id__,0,
									          const_pkg3_M1_C1_stm0_constant1)
							[]
							get_CLID_s0!x__ -> Clock_CLID_s0(id__,x__,
									          const_pkg3_M1_C1_stm0_constant1)
							[]
							terminate -> SKIP,Clock_CLID_s0(id__,clock_type_plus(x__,1,CLID_s0_clock_type(id__,
									          const_pkg3_M1_C1_stm0_constant1)),
									          const_pkg3_M1_C1_stm0_constant1))
					
					StateClocks(id__,
							          const_pkg3_M1_C1_stm0_constant1) = dbisim(Clock_CLID_s0(id__,0,
							          const_pkg3_M1_C1_stm0_constant1))
					
					stateClockSync = {|get_CLID_s0,s0::entered|}
					
					-- Shared memory
					-- Shared memory variables
					
					-- sharedVarMemory process
					sharedVarMemory(id__,
							    const_pkg3_M1_C1_stm0_constant1) = terminate -> SKIP
					
					sharedVarSync = {||}
					
					sharedVarHide = {||}
					}
			endmodule
			
			Timed(OneStep) {
					-- undefined operations
					
					-- declaring controller memory
					Memory(id__) = SKIP
					
					D__(id__,
							    const_pkg3_M1_C1_s3_constant1,
							    const_pkg3_M1_C1_stm0_constant1) = prioritise(	((
							(
								let
									const_pkg0_C1_stm0_constant1 = const_pkg3_M1_C1_s3_constant1
								within 
								s3::D__(id__,
										    const_pkg0_C1_stm0_constant1)[[
									s3::terminate <- terminate
								]]
								\ {|
									s3::stop,
									s3::trigger1,
									s3::event1
								|}
							)
								[|{|terminate|}|]
							(
								stm0::D__(id__,
										    const_pkg3_M1_C1_stm0_constant1)[[
									stm0::terminate <- terminate
								]]
								\ {|
									stm0::stop,
									stm0::trigger1,
									stm0::event1
								|}
							)
						)
						\diff(
							{|terminate|},
							{|terminate|}
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<visibleMemoryEvents,{tock}>)
					
					-- VS version
					VS__(id__,
							    const_pkg3_M1_C1_s3_constant1,
							    const_pkg3_M1_C1_stm0_constant1) = prioritise(	((
							(
								let
									const_pkg0_C1_stm0_constant1 = const_pkg3_M1_C1_s3_constant1
								within 
								s3::VS__(id__,
										    const_pkg0_C1_stm0_constant1)[[
									s3::terminate <- terminate
								]]
								\ {|
									s3::stop,
									s3::trigger1,
									s3::event1
								|}
							)
								[|{|terminate|}|]
							(
								stm0::VS__(id__,
										    const_pkg3_M1_C1_stm0_constant1)[[
									stm0::terminate <- terminate
								]]
								\ {|
									stm0::stop,
									stm0::trigger1,
									stm0::event1
								|}
							)
						)
						\diff(
							{|terminate|},
							{|terminate|}
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<visibleMemoryEvents,{tock}>)
				
					-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
					O__(id__,
							    const_pkg3_M1_C1_s3_constant1,
							    const_pkg3_M1_C1_stm0_constant1) = dbisim(prioritise(	((
							(
								let
									const_pkg0_C1_stm0_constant1 = const_pkg3_M1_C1_s3_constant1
								within 
								s3::O__(id__,
										    const_pkg0_C1_stm0_constant1)[[
									s3::terminate <- terminate
								]]
								\ {|
									s3::stop,
									s3::trigger1,
									s3::event1
								|}
							)
								[|{|terminate|}|]
							(
								stm0::O__(id__,
										    const_pkg3_M1_C1_stm0_constant1)[[
									stm0::terminate <- terminate
								]]
								\ {|
									stm0::stop,
									stm0::trigger1,
									stm0::event1
								|}
							)
						)
						\diff(
							{|terminate|},
							{|terminate|}
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<visibleMemoryEvents,{tock}>))
									
					-- VS_O version
					VS_O__(id__,
							    const_pkg3_M1_C1_s3_constant1,
							    const_pkg3_M1_C1_stm0_constant1) = dbisim(prioritise(	((
							(
								let
									const_pkg0_C1_stm0_constant1 = const_pkg3_M1_C1_s3_constant1
								within 
								s3::VS_O__(id__,
										    const_pkg0_C1_stm0_constant1)[[
									s3::terminate <- terminate
								]]
								\ {|
									s3::stop,
									s3::trigger1,
									s3::event1
								|}
							)
								[|{|terminate|}|]
							(
								stm0::VS_O__(id__,
										    const_pkg3_M1_C1_stm0_constant1)[[
									stm0::terminate <- terminate
								]]
								\ {|
									stm0::stop,
									stm0::trigger1,
									stm0::event1
								|}
							)
						)
						\diff(
							{|terminate|},
							{|terminate|}
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<visibleMemoryEvents,{tock}>))
				
					HEXT(id__,
							    const_pkg3_M1_C1_s3_constant1,
							    const_pkg3_M1_C1_stm0_constant1) = O__(id__,
							    const_pkg3_M1_C1_s3_constant1,
							    const_pkg3_M1_C1_stm0_constant1) [|shared_variable_events|] SKIP			
			}
	
		endmodule
	
	Timed(OneStep) {
		visibleMemoryEvents = {||}
		
		-- declaring module memory
		Memory(id__) = SKIP
		
		D__(id__,
				    const_pkg3_M1_C1_s3_constant1,
				    const_pkg3_M1_C1_stm0_constant1) = prioritise(	(
				(
					(SKIP)
						[|{||}|]
					(
						(
							C1::D__(id__,
									    const_pkg3_M1_C1_s3_constant1,
									    const_pkg3_M1_C1_stm0_constant1)[[
								C1::terminate <- terminate
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
				)
				\ Union({
					{|
					|},
					{|
					|},
					{|
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		,<visibleMemoryEvents,{tock}>)
		
		-- visible state equivalent
		
		VS__(id__,
				    const_pkg3_M1_C1_s3_constant1,
				    const_pkg3_M1_C1_stm0_constant1) = prioritise(	(
				(
					(SKIP)
						[|{||}|]
					(
						(
							C1::VS__(id__,
									    const_pkg3_M1_C1_s3_constant1,
									    const_pkg3_M1_C1_stm0_constant1)[[
								C1::terminate <- terminate
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
				)
				\ Union({
					{|
					|},
					{|
					|},
					{|
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		,<visibleMemoryEvents,{tock}>)
		
		-- O version (optimised)
		
		O__(id__,
				    const_pkg3_M1_C1_s3_constant1,
				    const_pkg3_M1_C1_stm0_constant1) = dbisim(prioritise(	(
				(
					(SKIP)
						[|{||}|]
					(
						(
							C1::O__(id__,
									    const_pkg3_M1_C1_s3_constant1,
									    const_pkg3_M1_C1_stm0_constant1)[[
								C1::terminate <- terminate
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
				)
				\ Union({
					{|
					|},
					{|
					|},
					{|
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		,<visibleMemoryEvents,{tock}>))
		
		-- visible state optimised equivalent
		
		VS_O__(id__,
				    const_pkg3_M1_C1_s3_constant1,
				    const_pkg3_M1_C1_stm0_constant1) = dbisim(prioritise(	(
				(
					(SKIP)
						[|{||}|]
					(
						(
							C1::VS_O__(id__,
									    const_pkg3_M1_C1_s3_constant1,
									    const_pkg3_M1_C1_stm0_constant1)[[
								C1::terminate <- terminate
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
				)
				\ Union({
					{|
					|},
					{|
					|},
					{|
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		,<visibleMemoryEvents,{tock}>))
		
		-- O version (optimised) with visible assignments
		
		AS_O__(id__,
				    const_pkg3_M1_C1_s3_constant1,
				    const_pkg3_M1_C1_stm0_constant1) = dbisim(	(
				(
					(SKIP)
						[|{||}|]
					(
						(
							C1::O__(id__,
									    const_pkg3_M1_C1_s3_constant1,
									    const_pkg3_M1_C1_stm0_constant1)[[
								C1::terminate <- terminate
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
				)
				\ Union({
					{|
					|},
					{|
					|},
					{|
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		)
	}
	
endmodule




endmodule
