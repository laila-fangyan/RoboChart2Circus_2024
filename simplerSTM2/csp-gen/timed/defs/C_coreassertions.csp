
--
-- RoboChart generator version 3.0.0.202401231330
-- Automatically generated on 23-05-2024 18:21:18
--
-- Iterated compression status: true
-- Assertions compression status: false
--

include "core_timed_defs.csp"
include "file_pk1_defs.csp"
include "core_defs.csp"
include "C.csp"
include "state_timed_defs.csp"
include "robochart_defs.csp"
include "../instantiations.csp"

transparent wbisim
channel r__
-- generate C
P_C = let
	id__ = 0
	
	
	
	const_C_s0_constant1 = const_pkg2_stm1_constant1
	const_C_s1_constant1 = const_pkg0_C1_stm0_c1_constant1
	const_C_s2_constant1 = const_pkg0_C2_stm2_0_constant1
	const_C_s3_constant1 = const_pkg0_C1_stm0_constant1
		
within
	C::O__(id__,
			    const_C_s0_constant1,
			    const_C_s1_constant1,
			    const_C_s2_constant1,
			    const_C_s3_constant1)

assert P_C :[deadlock-free]	
assert P_C;RUN({r__}) :[deadlock-free]
assert P_C :[deterministic]
assert P_C :[divergence-free]

-- generate C_s0
P_C_s0 = let
	id__ = 0
	
	
	
within
	C::s0::O__(
		id__,
		const_pkg2_stm1_constant1
	)
assert P_C_s0 :[deadlock-free]	
assert P_C_s0;RUN({r__}) :[deadlock-free]
assert P_C_s0 :[deterministic]
assert P_C_s0 :[divergence-free]
-- timed deadlock free
assert prioritise(P_C_s0[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_C_s0
-- generate C_s1
P_C_s1 = let
	id__ = 0
	
	
	
within
	C::s1::O__(
		id__,
		const_pkg0_C1_stm0_c1_constant1
	)
assert P_C_s1 :[deadlock-free]	
assert P_C_s1;RUN({r__}) :[deadlock-free]
assert P_C_s1 :[deterministic]
assert P_C_s1 :[divergence-free]
-- timed deadlock free
assert prioritise(P_C_s1[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_C_s1
-- generate C_s2
P_C_s2 = let
	id__ = 0
	
	
	
within
	C::s2::O__(
		id__,
		const_pkg0_C2_stm2_0_constant1
	)
assert P_C_s2 :[deadlock-free]	
assert P_C_s2;RUN({r__}) :[deadlock-free]
assert P_C_s2 :[deterministic]
assert P_C_s2 :[divergence-free]
-- timed deadlock free
assert prioritise(P_C_s2[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_C_s2
-- generate C_s3
P_C_s3 = let
	id__ = 0
	
	
	
within
	C::s3::O__(
		id__,
		const_pkg0_C1_stm0_constant1
	)
assert P_C_s3 :[deadlock-free]	
assert P_C_s3;RUN({r__}) :[deadlock-free]
assert P_C_s3 :[deterministic]
assert P_C_s3 :[divergence-free]
-- timed deadlock free
assert prioritise(P_C_s3[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_C_s3
-- timed deadlock free
assert prioritise(P_C[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_C
