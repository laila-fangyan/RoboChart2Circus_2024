var stm_set = RC!StateMachineDef.all();
var stm0_c1 = stm_set.selectOne(s|s.name = "stm0_c1" );

var node_s0 = stm0_c1.nodes.selectOne(n|n.name = "s0");

var node_s0_fqn : new String;
RC.println();

node_s0_fqn = node_s0.FQN(RC);
"line10: ".print();node_s0_fqn.println();

//Fully Qualified Name for Node
operation RC!Node FQN(RC_model: Any): String{
	var  stm_sets = RC_model!StateMachineDef.all();
	"line 13".println();
	stm_sets.println();
	
	//Case 1: the node is contained in a stm
	for(stm in stm_sets){
		if(stm.nodes.includes(self)){
			return self.name+"_"+ stm.FQN(RC_model);
//			return self.name+"_"+stm.name;
		}
	}
	
	//Case 2: the node is contained in a composite node

	for(nd in RC_model!Node.all()){
		if(nd.nodes.size>0){
			if(nd.nodes.includes(self)){
				return self.name+"_"+ nd.FQN(RC_model);
			}
		}
	}
	
}

operation RC!StateMachineDef FQN(RC_model: Any): String{

	//Case 1: the stm is contained in a controller
	for(ctl in RC_model!ControllerDef.all()){
		if(ctl.machines.includes(self)){
		
		"line 44".println(); 
		ctl.type().println();
		ctl.FQN(RC_model).println();
			return self.name + "_" + ctl.FQN(RC_model);
		}
	}
	
	//Case 2: the stm is contained in a package
	for(pkg in RC_model!RCPackage.all()){
		if(pkg.machines.includes(self)){
			return self.name + "_" + pkg.name;
		}
	}
	
	//a module can not have a stm outside a controller
	
}



operation RC!ControllerDef FQN(RC_model: Any): String{
	
	//Case 1: the controller is contained in a module
	for(md in RC_model!RCModule.all()){
		if(md.nodes.includes(self)){
		"line 67".println();
			return self.name + "_" + md.FQN(RC_model);
		}
	}
	
	//Case 2: the controller is contained in a package
	for(pkg in RC_model!RCPackage.all()){
		if(pkg.machines.includes(self)){
			if(pkg.name.isDefined()){
			"line76 ".print();
			pkg.name.println();
				return self.name + "_" + pkg.name;			
			}else{
			
		"line 81".println();
				return self.name;	
			}
		}
	}
	
}

/*
var stmref_set = RC!StateMachineRef.all();
stm_set.println();
stmref_set.println();
RC!RCPackage.all().println();
//for(pkg in RC!RCPackage.all()){
//	pkg.eContents().println();
//}
var C1_set = RC!Controller.all().select(c|c.name = "C1");
C1_set.println();

var C2_set = RC!Controller.all().select(c|c.name = "C2");
C2_set.println();
for(C1 in C1_set){


for(stm in C1.machines.select(s|s.name = "s3")){
	"line 12 stm: ".println(); stm.println();
	stm.ref.println();
	for(c in C1_set){
		if(c.machines.includes(stm)){
		("the controller containing stmref s3 is found as " + c.name).println();
		c.name = "C1_containing_s3";
		} else {
		"not found".println();
		c.name = "C1_not_containing_s3";
	}}
	for(pkg in RC!RCPackage.all()){
		if(pkg.machines.includes(stm.ref)){
		("the package which contains stm1 is found as " + pkg.name).println();
		} else "the package is not found".println();
	}
}}
"line7".println();
RC.allInstances().println();
var stm = stm_set.selectOne(s|s.name = "stm1" );
"line8".println();
RC.allinstances().includes(stm).println();

var  sref_s0 = stmref_set.selectOne(s|s.name = "s0");
sref_s0.ref.name.println();
"line18".println();


var nc = RC!StateMachineDef.all().at(1);
("nc.name = " + nc.name).println();
nc.nodes.select(s|s.name = "s0").size().println();
for(n in nc.nodes.select(s|s.name = "s0")){
	("n.name = "+ n.name).println();
	var n_name : String;
	"line20".println();n.getOwningModel().println(); //RC
	for(stm in stm_set){
		if(stm.nodes.includes(n)){
			n_name = n.name+"_" + stm.name;
			
			("n_name = " + n_name).println();
			var isrefed = false;
			var isInPkg = false;
			for(stmref in RC!StateMachineRef.all()){
				if(stmref.ref = stm){
					n_name = n_name +"_" + stmref.name;
					isrefed = true;
					("n_name = " + n_name).println();
				}
			}
			if(not isrefed){
//				for(ctl in RC!Controller)
			}
			"line25".println();RC.owns(n).println();
		}
			
	}
	
	for(elem in RC.allInstances()){
	
	}

}


for (t in nc.transitions.select(t|t.name = "t1")){
	("t.name = "+ t.name).println();


}

*/